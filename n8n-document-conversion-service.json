{
  "name": "Document Conversion Service",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/convert-to-text",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "conversion-webhook",
      "name": "Conversion Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "ask-foreman-convert"
    },
    {
      "parameters": {
        "jsCode": "// Extract parameters from the incoming request\nconst input = $input.all()[0];\nconst body = input.json?.body || input.json || {};\n\n// Validate required parameters\nif (!body.BlobUrl) {\n    throw new Error('BlobUrl is required');\n}\n\nif (!body.FileName) {\n    throw new Error('FileName is required');\n}\n\n// Extract all parameters\nconst blobUrl = body.BlobUrl;\nconst fileName = body.FileName;\nconst client = body.Client || 'unknown';\nconst category = body.Category || 'documents';\nconst originalFileName = body.OriginalFileName || fileName;\nconst fileId = body.FileId || `${client}_${Date.now()}`;\nconst mimeType = body.MimeType || 'application/octet-stream';\n\n// Add SAS token if not already present\nlet fullBlobUrl = blobUrl;\nif (!blobUrl.includes('?')) {\n    fullBlobUrl = blobUrl + '?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D';\n}\n\nreturn [{\n    json: {\n        blobUrl: fullBlobUrl,\n        fileName: fileName,\n        originalFileName: originalFileName,\n        client: client,\n        category: category,\n        fileId: fileId,\n        mimeType: mimeType,\n        timestamp: new Date().toISOString()\n    }\n}];"
      },
      "id": "validate-params",
      "name": "Validate & Extract Parameters",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.blobUrl }}",
        "options": {
          "timeout": 60000,
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "download-file",
      "name": "Download File from Blob",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "operation": "extractText",
        "options": {}
      },
      "id": "extract-text",
      "name": "Extract Text from Document",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process the extracted text\nconst input = $input.all()[0];\nconst extractedText = input.json?.text || input.json?.data || '';\nconst metadata = input.json;\n\n// Clean and format the text\nlet cleanedText = extractedText;\n\n// Remove excessive whitespace\ncleanedText = cleanedText.replace(/\\s+/g, ' ');\n\n// Remove control characters\ncleanedText = cleanedText.replace(/[\\x00-\\x1F\\x7F]/g, '');\n\n// Trim\ncleanedText = cleanedText.trim();\n\n// If text is empty, provide a message\nif (!cleanedText) {\n    cleanedText = 'No text content could be extracted from this document.';\n}\n\n// Get metadata from earlier node\nconst params = $('validate-params').item.json;\n\nreturn [{\n    json: {\n        success: true,\n        fileId: params.fileId,\n        fileName: params.fileName,\n        originalFileName: params.originalFileName,\n        client: params.client,\n        category: params.category,\n        mimeType: params.mimeType,\n        extractedText: cleanedText,\n        text: cleanedText,\n        content: cleanedText,\n        textLength: cleanedText.length,\n        timestamp: params.timestamp,\n        processedAt: new Date().toISOString()\n    }\n}];"
      },
      "id": "process-text",
      "name": "Process Extracted Text",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"fileId\": \"={{ $json.fileId }}\",\n  \"fileName\": \"={{ $json.fileName }}\",\n  \"client\": \"={{ $json.client }}\",\n  \"category\": \"={{ $json.category }}\",\n  \"extractedText\": \"={{ $json.extractedText }}\",\n  \"text\": \"={{ $json.text }}\",\n  \"content\": \"={{ $json.content }}\",\n  \"textLength\": {{ $json.textLength }},\n  \"timestamp\": \"={{ $json.timestamp }}\",\n  \"processedAt\": \"={{ $json.processedAt }}\"\n}",
        "options": {}
      },
      "id": "conversion-response",
      "name": "Conversion Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1250, 300]
    }
  ],
  "connections": {
    "Conversion Webhook": {
      "main": [
        [
          {
            "node": "Validate & Extract Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Extract Parameters": {
      "main": [
        [
          {
            "node": "Download File from Blob",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File from Blob": {
      "main": [
        [
          {
            "node": "Extract Text from Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text from Document": {
      "main": [
        [
          {
            "node": "Process Extracted Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Extracted Text": {
      "main": [
        [
          {
            "node": "Conversion Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "id": "document-conversion-service"
}
