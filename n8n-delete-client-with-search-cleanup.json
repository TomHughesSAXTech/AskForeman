{
  "name": "Delete Client with Search Index Cleanup",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/clients/delete",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "delete-client-webhook-node",
      "name": "Delete Client Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "delete-client-webhook"
    },
    {
      "parameters": {
        "jsCode": "const body = $json.body;\n\n// Validate input\nif (!body.clientId && !body.clientName) {\n  throw new Error('Either clientId or clientName is required');\n}\n\nconst clientId = body.clientId || body.clientName.toLowerCase();\nconst clientName = body.clientName || body.clientId;\n\n// Log the delete request\nconsole.log(`Delete request received for client: ${clientName} (ID: ${clientId})`);\n\n// Create delete operation data with comprehensive blob paths\nconst deleteData = {\n  clientId: clientId,\n  clientName: clientName,\n  operation: 'DELETE_CLIENT',\n  timestamp: new Date().toISOString(),\n  // Azure Blob paths to delete from BOTH OriginalClients and ConvertedClients\n  blobPaths: [\n    // OriginalClients folder structure\n    `FCS-OriginalClients/${clientName}/.placeholder`,\n    `FCS-OriginalClients/${clientName}/drawings/.placeholder`,\n    `FCS-OriginalClients/${clientName}/estimates/.placeholder`, \n    `FCS-OriginalClients/${clientName}/proposals/.placeholder`,\n    `FCS-OriginalClients/${clientName}/specs/.placeholder`,\n    `FCS-OriginalClients/${clientName}/signed-contracts/.placeholder`,\n    `FCS-OriginalClients/${clientName}/.metadata/client.json`,\n    // ConvertedClients folder structure\n    `FCS-ConvertedClients/${clientName}/.placeholder`,\n    `FCS-ConvertedClients/${clientName}/drawings/.placeholder`,\n    `FCS-ConvertedClients/${clientName}/estimates/.placeholder`,\n    `FCS-ConvertedClients/${clientName}/proposals/.placeholder`, \n    `FCS-ConvertedClients/${clientName}/specs/.placeholder`,\n    `FCS-ConvertedClients/${clientName}/signed-contracts/.placeholder`,\n    `FCS-ConvertedClients/${clientName}/.metadata/client.json`\n  ]\n};\n\nconsole.log(`Will delete ${deleteData.blobPaths.length} blob paths for client: ${clientName}`);\n\nreturn [{\n  json: deleteData\n}];"
      },
      "id": "prepare-delete-data-node",
      "name": "Prepare Delete Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "const deleteData = $json;\n\n// Create array of delete operations for each blob path\nconst deleteOperations = deleteData.blobPaths.map(path => ({\n  json: {\n    blobPath: path,\n    clientId: deleteData.clientId,\n    clientName: deleteData.clientName,\n    url: `https://saxtechfcs.blob.core.windows.net/fcs-clients/${path}?sp=racwdl&st=2025-08-07T21:44:55Z&se=2030-08-08T05:59:55Z&spr=https&sv=2024-11-04&sr=c&sig=AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo%3D`\n  }\n}));\n\nconsole.log(`Created ${deleteOperations.length} delete operations for client: ${deleteData.clientName}`);\n\nreturn deleteOperations;"
      },
      "id": "create-delete-operations-node",
      "name": "Create Delete Operations",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "method": "DELETE",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-version",
              "value": "2024-11-04"
            },
            {
              "name": "x-ms-blob-type", 
              "value": "BlockBlob"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "delete-blob-request-node",
      "name": "Delete Blob Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Collect all the deletion results\nconst results = [];\nlet clientName = 'unknown';\nlet clientId = 'unknown';\n\n// Process each deletion result\nfor (const item of $input.all()) {\n  if (item.json.clientName) clientName = item.json.clientName;\n  if (item.json.clientId) clientId = item.json.clientId;\n  \n  const statusCode = item.json.statusCode || 0;\n  const blobPath = item.json.blobPath;\n  \n  console.log(`Delete result for ${blobPath}: HTTP ${statusCode}`);\n  \n  results.push({\n    path: blobPath,\n    status: (statusCode === 202 || statusCode === 404) ? 'deleted' : 'failed',\n    statusCode: statusCode,\n    timestamp: new Date().toISOString()\n  });\n}\n\n// Count successful deletions\nconst successCount = results.filter(r => r.status === 'deleted').length;\nconst failedCount = results.filter(r => r.status === 'failed').length;\n\n// Prepare for search index cleanup\nconst deleteResult = {\n  status: failedCount === 0 ? 'success' : 'partial_success',\n  operation: 'DELETE_CLIENT',\n  clientId: clientId,\n  clientName: clientName,\n  deletedCount: successCount,\n  failedCount: failedCount,\n  message: failedCount === 0 \n    ? `Client \"${clientName}\" deleted from storage, proceeding with search index cleanup`\n    : `Client \"${clientName}\" partially deleted: ${successCount} successful, ${failedCount} failed`,\n  timestamp: new Date().toISOString(),\n  details: results,\n  // Flag for search index cleanup\n  requiresSearchIndexCleanup: true\n};\n\nconsole.log(`Delete operation completed for client: ${clientName} - ${successCount} deleted, ${failedCount} failed - proceeding to search index cleanup`);\n\nreturn [{\n  json: deleteResult\n}];"
      },
      "id": "process-delete-results-node",
      "name": "Process Delete Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "operation": "delete",
        "collection": "construction_documents",
        "options": {
          "deleteAll": false
        },
        "filter": {
          "client": "={{ $json.clientName }}"
        }
      },
      "id": "cleanup-search-index-node",
      "name": "Cleanup Search Index",
      "type": "n8n-nodes-base.vectorStore",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process search index cleanup result\nconst deleteResult = $('Process Delete Results').first().json;\nconst searchCleanupResult = $json;\n\n// Update final result with search index cleanup status\nconst finalResult = {\n  ...deleteResult,\n  searchIndexCleanup: {\n    status: 'completed',\n    deletedDocuments: searchCleanupResult.deletedCount || 0,\n    timestamp: new Date().toISOString()\n  },\n  message: deleteResult.status === 'success' \n    ? `Client \"${deleteResult.clientName}\" completely removed from storage and search index`\n    : `Client \"${deleteResult.clientName}\" partially deleted from storage, search index cleaned up`,\n  searchIndexNote: `Removed ${searchCleanupResult.deletedCount || 0} documents from search index`\n};\n\nconsole.log(`Search index cleanup completed for client: ${deleteResult.clientName} - removed ${searchCleanupResult.deletedCount || 0} documents`);\n\nreturn [{\n  json: finalResult\n}];"
      },
      "id": "finalize-delete-result-node",
      "name": "Finalize Delete Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "responseHeaders": {
          "entries": [
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Access-Control-Allow-Methods", 
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "name": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization, X-Requested-With"
            }
          ]
        },
        "options": {}
      },
      "id": "delete-response-node",
      "name": "Delete Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 300]
    }
  ],
  "connections": {
    "Delete Client Webhook": {
      "main": [
        [
          {
            "node": "Prepare Delete Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Delete Data": {
      "main": [
        [
          {
            "node": "Create Delete Operations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Delete Operations": {
      "main": [
        [
          {
            "node": "Delete Blob Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Blob Request": {
      "main": [
        [
          {
            "node": "Process Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Delete Results": {
      "main": [
        [
          {
            "node": "Cleanup Search Index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanup Search Index": {
      "main": [
        [
          {
            "node": "Finalize Delete Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Delete Result": {
      "main": [
        [
          {
            "node": "Delete Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "1"
}
