UPDATE YOUR N8N WORKFLOW - "Extract & Validate Upload Data" NODE:
===============================================================

Replace the JavaScript code in this node with:

// Enhanced file extraction with proper error handling and FCS-OriginalClients path
const input = $input.all()[0];
const body = input.json?.body || {};
const files = input.json?.files || [];
const binary = input.binary || {};

let file = null;
let fileName = '';
let fileSize = 0;
let mimeType = '';
let fileData = null;

// Try multiple methods to find the uploaded file
if (files && files.length > 0) {
    file = files[0];
    fileName = file.filename || file.name || 'unknown';
    fileSize = file.size || 0;
    mimeType = file.mimetype || file.type || 'application/octet-stream';
    fileData = file.data || file;
} else if (binary && Object.keys(binary).length > 0) {
    const binaryKey = Object.keys(binary)[0];
    file = binary[binaryKey];
    fileName = body.fileName || file.fileName || binaryKey || 'unknown';
    fileSize = file.data ? file.data.length : 0;
    mimeType = file.mimeType || body.mimeType || 'application/octet-stream';
    fileData = file.data || file;
} else if (body.file) {
    file = body.file;
    fileName = body.fileName || file.filename || 'unknown';
    fileSize = body.fileSize || file.size || 0;
    mimeType = body.mimeType || file.mimetype || 'application/octet-stream';
    fileData = file;
}

// Validate required fields
if (!body.client) {
    throw new Error('Client is required');
}

if (!body.category) {
    throw new Error('Category is required');
}

// The client value from frontend might be lowercase, we need to preserve the actual folder name case
// For existing clients like "Baruch", "Brownsville", "Smith", we need to maintain their exact casing
let actualClientFolder = body.client;

// Map common client names to their actual folder names (you can expand this list)
const clientFolderMapping = {
    'baruch': 'Baruch',
    'brownsville': 'Brownsville',
    'smith': 'Smith',
    // Add more mappings as needed
};

// If the client is in our mapping, use the correct case
if (clientFolderMapping[body.client.toLowerCase()]) {
    actualClientFolder = clientFolderMapping[body.client.toLowerCase()];
} else {
    // For new clients, capitalize first letter of each word
    actualClientFolder = body.client
        .split(/[-_\s]/)
        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
        .join('');
}

// Generate unique file ID and paths
const timestamp = Date.now();
const sanitizedFileName = fileName.replace(/[^a-zA-Z0-9.-]/g, '_');
const fileId = `${body.client}_${body.category}_${sanitizedFileName}_${timestamp}`;

// Define blob paths - IMPORTANT: Use FCS-OriginalClients prefix with correct client folder case
const originalBlobPath = `FCS-OriginalClients/${actualClientFolder}/${body.category}/${sanitizedFileName}`;
const convertedBlobPath = `FCS-OriginalClients/${actualClientFolder}/${body.category}/${sanitizedFileName.replace(/\.[^/.]+$/, '')}.txt`;
const metadataPath = `FCS-OriginalClients/${actualClientFolder}/.metadata/${fileId}.json`;

return [{
    json: {
        operation: 'CREATE',
        fileId: fileId,
        fileName: fileName,
        sanitizedFileName: sanitizedFileName,
        originalFileName: fileName,
        fileSize: fileSize,
        mimeType: mimeType,
        client: body.client,
        actualClientFolder: actualClientFolder,
        category: body.category,
        uploadTimestamp: new Date().toISOString(),
        originalBlobPath: originalBlobPath,
        convertedBlobPath: convertedBlobPath,
        metadataPath: metadataPath,
        blobUrl: `https://saxtechfcs.blob.core.windows.net/fcs-clients/${originalBlobPath}`,
        convertedUrl: `https://saxtechfcs.blob.core.windows.net/fcs-convertedclients/${convertedBlobPath}`,
        fileData: fileData
    },
    binary: binary
}];
