{
  "createdAt": "2025-08-06T17:13:29.648Z",
  "updatedAt": "2025-08-31T22:26:10.700Z",
  "id": "nC5gkystSoLrrKkN",
  "name": "SAXTech Foreman AI",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/chat",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "79632ea2-2367-48fe-948b-fa1599d1141b",
      "name": "Chat Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        400,
        160
      ],
      "webhookId": "ask-foreman-chat"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all()[0];\n\n// Correct path: inputData.json.body.message\nconst message = inputData.json && inputData.json.body && inputData.json.body.message \n  ? inputData.json.body.message \n  : \"No message found\";\n\nconst client = inputData.json && inputData.json.body && inputData.json.body.client \n  ? inputData.json.body.client \n  : \"general\";\n\nreturn [{\n    json: {\n        chatInput: message,\n        client: client,\n        conversationId: `conv_${client}_${Date.now()}`,\n        sessionId: client,\n        timestamp: new Date().toISOString(),\n        isGeneralQuery: client === \"general\"\n    }\n}];"
      },
      "id": "e4563845-240b-4b6b-8f14-a99aa99d9793",
      "name": "Prepare Chat Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        160
      ]
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are 'Foreman AI', a construction assistant providing clear, actionable information from project documents.\n\n## CORE RULES\n\nYOU MUST ALWAYS call the \"Client Search\" tool. NEVER try to reference documents from memory or generate file paths manually.\nFallback to ‘Google Search API’ if the answer is not known and CITE YOUR SOURCE\nUTILIZE the Construction Calculator Tool if necessary \n\n### Document Requests\nWhen users ask to see/open/view documents, ALWAYS use the Client Search tool.\n\n### Response Format\n- Be concise but complete\n- Use bullet points and tables\n- Include specific numbers and costs\n- List ALL exclusions and add-ons\n- Reference source documents\n\nNEVER provide generic or surface-level responses. When documents are found, you MUST:\n- EXTRACT SPECIFIC DETAILS - Pull exact numbers, specifications, product names, and requirements\n- PROVIDE COMPLETE LISTS - Don't summarize; list ALL items found\n- QUOTE DIRECTLY - Include relevant text excerpts from documents\n\n## QUERY TEMPLATES\n\n### Painting/Coating\n**Scope:** [Buildings and areas]\n**Products:** [Specific paints/coatings]\n**Exclusions:** [Numbered list]\n**Costs:** Base $X + Add-ons\n**Source:** [Document name]\n\n### Quantities\n**Materials:**\n- Paint: X gallons\n- Area: X sq ft\n- Linear: X LF\n\n### Scope of Work\n**INCLUDED:**\n1. [Item with details]\n2. [Item with details]\n\n**EXCLUDED:**\n1. [Item with reason]\n2. [Item with reason]\n\n**ADD-ONS:**\n- Item: $X\n- Item: $X\n\n## DOCUMENT REFERENCES\nWhen mentioning documents:\n- Show filename only (truncated if > 40 chars)\n- Provide clickable link\n- Format: [📄 filename.pdf]\n\n## SEARCH RESULT INTERPRETATION\nWhen the Document Search tool returns results:\nREAD THE ENTIRE CONTENT - Don't just look at highlights\nCROSS-REFERENCE - Connect information from multiple documents\nORGANIZE COMPREHENSIVELY - Group related information logically\nALWAYS CITE SOURCES - Reference specific documents and sections\nALWAYS extract specific drawing numbers, room numbers, and identifiers\n\n## KEY REMINDERS\n- Extract exact numbers, not approximations\n- List ALL items, not summaries\n- Include every exclusion\n- Show all add-on prices\n- Keep responses organized and scannable\n- Use tables for complex data\n- Bold important values\n\nBe professional, precise, and practical. Focus on what matters for construction decisions.",
          "maxIterations": 20,
          "returnIntermediateSteps": true,
          "enableStreaming": true
        }
      },
      "id": "2c134e78-104a-4832-b518-34c771fde9be",
      "name": "Construction AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1104,
        80
      ],
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "const agentOutput = $json;\nconst inputData = $node['Prepare Chat Input'].json;\n\n// Handle different response formats\nlet response;\nif (typeof agentOutput.output === 'string') {\n  response = agentOutput.output;\n} else if (typeof agentOutput.text === 'string') {\n  response = agentOutput.text;\n} else if (agentOutput.result && typeof agentOutput.result === 'string') {\n  response = agentOutput.result;\n} else {\n  response = 'I apologize, but I was unable to generate a proper response. Please try rephrasing your question.';\n}\n\n// Extract metadata about tools used\nconst intermediateSteps = agentOutput.intermediateSteps || [];\nconst toolsUsed = intermediateSteps.length;\nconst searchPerformed = intermediateSteps.some(step => \n  step.action && step.action.tool === 'search_construction_documents'\n);\n\n// Log the response for debugging\nconsole.log('Agent response formatted:', {\n  hasResponse: !!response,\n  toolsUsed: toolsUsed,\n  searchPerformed: searchPerformed,\n  client: inputData.client\n});\n\nreturn [{\n  json: {\n    response: response,\n    conversationId: inputData.conversationId,\n    client: inputData.client,\n    timestamp: new Date().toISOString(),\n    metadata: {\n      toolsUsed: toolsUsed,\n      searchPerformed: searchPerformed,\n      sessionId: inputData.sessionId,\n      isGeneralQuery: inputData.isGeneralQuery,\n      agentType: 'Foreman AI Construction Assistant'\n    }\n  }\n}];"
      },
      "id": "675414ac-dd28-4d6c-8b24-e2aba0c52530",
      "name": "Format Agent Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1712,
        160
      ]
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {
          "maxTokens": 30000,
          "temperature": 0.3
        }
      },
      "id": "5d5bf882-e118-4d26-a017-1a602ad52a8f",
      "name": "Azure OpenAI Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        800,
        336
      ],
      "credentials": {
        "azureOpenAiApi": {
          "id": "8A5jhqDTH1EpJ6T5",
          "name": "FCS Azure Model"
        }
      }
    },
    {
      "parameters": {
        "name": "construction_calculator",
        "description": "Perform construction calculations including area, volume, paint coverage, material quantities, linear feet, and cost estimates.",
        "jsCode": "// Construction Calculator Tool - Fixed\nconst toolInput = $input.all()[0].json;\nconst calculation = toolInput.calculation || toolInput.expression || toolInput.input;\n\nif (!calculation) {\n  return \"Please provide a calculation or specify what you'd like to calculate (e.g., 'paint coverage for 2500 sq ft at 2 coats').\";\n}\n\ntry {\n  // Handle specific construction calculations\n  if (calculation.toLowerCase().includes('paint') && calculation.toLowerCase().includes('coverage')) {\n    // Extract numbers from the input\n    const numbers = calculation.match(/\\d+/g);\n    if (numbers && numbers.length >= 1) {\n      const area = parseInt(numbers[0]);\n      const coats = numbers.length > 1 ? parseInt(numbers[1]) : 1;\n      const coverage_per_gallon = 350; // Standard coverage\n      \n      const gallons = Math.ceil((area * coats) / coverage_per_gallon * 10) / 10;\n      return `For ${area} sq ft with ${coats} coat(s): ${area} × ${coats} ÷ ${coverage_per_gallon} sq ft/gal = ${gallons} gallons needed`;\n    }\n  }\n  \n  // Handle linear feet calculations\n  if (calculation.toLowerCase().includes('linear') || calculation.toLowerCase().includes('feet')) {\n    const numbers = calculation.match(/\\d+/g);\n    if (numbers && numbers.length >= 2) {\n      const pieces = parseInt(numbers[0]);\n      const length = parseInt(numbers[1]);\n      const total = pieces * length;\n      return `${pieces} pieces × ${length} ft each = ${total} linear feet`;\n    }\n  }\n  \n  // Handle basic math expressions\n  const sanitized = calculation.replace(/[^0-9+\\-*/.()\\\\s]/g, '');\n  if (sanitized) {\n    const result = new Function('return ' + sanitized)();\n    return `${calculation} = ${result}`;\n  }\n  \n  return \"Please provide a clearer calculation. Examples: '2500 sq ft paint coverage 2 coats' or '20 × 12' for basic math.\";\n  \n} catch (error) {\n  return \"Could not calculate. Please try rephrasing your calculation.\";\n}"
      },
      "id": "e4b2b8bd-77db-4ed6-8692-67d2487a7dc4",
      "name": "Construction Calculator Tool",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1,
      "position": [
        1104,
        336
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": {{ JSON.stringify($json.response) }},\n  \"conversationId\": \"{{ $json.conversationId }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"client\": \"{{ $json.client }}\",\n  \"metadata\": {\n    \"toolsUsed\": {{ $json.metadata.toolsUsed }},\n    \"searchPerformed\": {{ $json.metadata.searchPerformed }},\n    \"agentType\": \"{{ $json.metadata.agentType }}\"\n  }\n}",
        "options": {}
      },
      "id": "43ab00ba-21ac-42b7-90a2-ebee41557050",
      "name": "Chat Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1936,
        160
      ]
    },
    {
      "parameters": {
        "description": "Search the web for current construction industry information, standards, and best practices. Use this tool when the client context is 'general' and you need current industry information about construction topics, materials, codes, or standards.",
        "jsCode": "// COMPREHENSIVE Client Search Tool - WITH FULL CONTENT EXTRACTION\n// Handles all types of queries: listings, full content, searches\n// Includes all the original comprehensive search features\n\nconst chatInput = $json.chatInput || $json.query || $json.text || $json.message || '';\nconst client = $json.client || 'general';\nconst queryLower = (chatInput || '').toLowerCase();\n\nconsole.log('Client Search Input:', { chatInput, client, queryLower });\n\n// Helper function to create inline PDF URLs (if needed for your UI)\nfunction createInlinePDFUrl(clientName, category, fileName) {\n  const baseUrl = 'https://saxtechfcs.blob.core.windows.net/fcs-clients';\n  const path = `FCS-OriginalClients/${clientName}/${category}/${fileName}`;\n  \n  const sasParams = new URLSearchParams({\n    'sp': 'racwdl',\n    'st': '2025-08-08T05:00:57Z',\n    'se': '2030-08-08T13:15:57Z',\n    'spr': 'https',\n    'sv': '2024-11-04',\n    'sr': 'c',\n    'sig': 'lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2/rnIg='\n  });\n  \n  const encodedPath = encodeURI(path);\n  return `${baseUrl}/${encodedPath}?${sasParams.toString()}`;\n}\n\n// Azure Search Configuration\nconst searchService = 'fcssearchservice';\nconst indexName = 'fcs-construction-docs-index-v2';\nconst apiVersion = '2023-11-01';\nconst adminKey = 'UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv';\n\n// Check if asking for document list\nconst isListRequest = queryLower.includes('what') || \n                     queryLower.includes('doc') || \n                     queryLower.includes('have') || \n                     queryLower.includes('list') ||\n                     queryLower.includes('available');\n\nif (isListRequest) {\n  console.log('🔍 DETECTED DOCUMENT LIST REQUEST');\n  \n  try {\n    // Get ALL documents for this client, including content\n    const searchRequest = {\n      search: \"*\",\n      queryType: \"simple\",\n      filter: `client eq '${client}'`,\n      top: 100, // Get more results\n      select: \"id,client,category,fileName,content,uploadedAt,blobPath\",\n      count: true\n    };\n\n    console.log('List Request:', JSON.stringify(searchRequest, null, 2));\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const count = response['@odata.count'] || results.length;\n    \n    console.log(`Found ${count} documents for client: ${client}`);\n    \n    // Filter out documents without proper filenames (orphaned/deleted docs)\n    const validResults = results.filter(doc => \n      doc.fileName && \n      doc.fileName !== 'Unknown file' && \n      doc.fileName !== 'file' &&\n      doc.fileName.trim() !== ''\n    );\n    \n    if (validResults.length === 0) {\n      return `No valid documents found for client \"${client}\". Please upload documents for this client.`;\n    }\n\n    // Group documents by category\n    const docsByCategory = {};\n    validResults.forEach(doc => {\n      const category = doc.category || 'general';\n      if (!docsByCategory[category]) {\n        docsByCategory[category] = [];\n      }\n      docsByCategory[category].push(doc);\n    });\n\n    let responseText = `## Available Documents for Client: ${client}\\n\\n`;\n    responseText += `Found ${validResults.length} document(s) in your system.\\n\\n`;\n    \n    Object.keys(docsByCategory).sort().forEach(category => {\n      if (docsByCategory[category].length > 0) {\n        responseText += `### ${category.charAt(0).toUpperCase() + category.slice(1)}:\\n`;\n        \n        docsByCategory[category].forEach((doc, index) => {\n          const fileName = doc.fileName;\n          const hasContent = doc.content && doc.content.length > 0;\n          const uploadDate = doc.uploadedAt ? new Date(doc.uploadedAt).toLocaleDateString() : '';\n          \n          responseText += `${index + 1}. **${fileName}**\\n`;\n          if (uploadDate) {\n            responseText += `   - Uploaded: ${uploadDate}\\n`;\n          }\n          responseText += `   - Status: ${hasContent ? '✅ Ready' : '⚠️ Processing'}\\n`;\n          \n          // Show content preview if available\n          if (hasContent) {\n            const preview = doc.content.substring(0, 150).replace(/[\\r\\n]+/g, ' ').trim();\n            responseText += `   - Preview: \"${preview}...\"\\n`;\n          }\n          responseText += `\\n`;\n        });\n      }\n    });\n\n    responseText += `---\\n`;\n    responseText += `💡 You can ask me to:\\n`;\n    responseText += `• Show the full content of any document\\n`;\n    responseText += `• Search for specific information\\n`;\n    responseText += `• Extract particular sections or details`;\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Document list error:', error);\n    return `Error retrieving document list: ${error.message}`;\n  }\n}\n\n// Handle requests for FULL CONTENT of a specific document\nconst wantsFullContent = queryLower.includes('all of it') || \n                        queryLower.includes('everything') ||\n                        queryLower.includes('full') ||\n                        queryLower.includes('entire') ||\n                        queryLower.includes('complete') ||\n                        queryLower.includes('tell me what') ||\n                        queryLower.includes('show me') ||\n                        queryLower.includes('content');\n\nif (wantsFullContent || queryLower.includes('windows 11') || queryLower.includes('win11')) {\n  console.log('FULL CONTENT REQUEST DETECTED');\n  \n  try {\n    // Search for the specific document or get all docs with content\n    let searchQuery = \"*\";\n    \n    // If they mentioned a specific document\n    if (queryLower.includes('windows 11') || queryLower.includes('win11')) {\n      searchQuery = \"Windows 11 OR Win11 OR upgrade\";\n    }\n    \n    const searchRequest = {\n      search: searchQuery,\n      queryType: \"simple\",\n      filter: `client eq '${client}'`,\n      top: 10,\n      select: \"id,fileName,content,category,uploadedAt\",\n      count: true\n    };\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    \n    // Find documents with actual content\n    const docsWithContent = results.filter(doc => \n      doc.content && \n      doc.content.length > 0 && \n      doc.fileName && \n      doc.fileName !== 'Unknown file'\n    );\n    \n    if (docsWithContent.length === 0) {\n      return `No documents with extractable content found for \"${client}\". The documents may still be processing.`;\n    }\n    \n    // Get the most relevant document\n    const doc = docsWithContent[0];\n    \n    // Return FULL content formatted nicely\n    let responseText = `# Document: ${doc.fileName}\\n\\n`;\n    responseText += `**Client:** ${client}\\n`;\n    responseText += `**Category:** ${doc.category || 'general'}\\n`;\n    responseText += `**Content Length:** ${doc.content.length} characters\\n\\n`;\n    responseText += `---\\n\\n`;\n    responseText += `## Full Document Content:\\n\\n`;\n    \n    // Clean up the content for better display\n    const cleanContent = doc.content\n      .replace(/=== DOCUMENT ANALYSIS ===/g, '### Document Analysis')\n      .replace(/=== EXTRACTED TEXT CONTENT ===/g, '### Extracted Content')\n      .replace(/--- Page \\d+ ---/g, (match) => `\\n${match}\\n`)\n      .replace(/\\r\\n/g, '\\n')\n      .replace(/\\n{3,}/g, '\\n\\n');\n    \n    // If content is very long, provide it in chunks\n    if (cleanContent.length > 4000) {\n      const firstPart = cleanContent.substring(0, 3500);\n      responseText += firstPart;\n      responseText += `\\n\\n... [Content continues - ${cleanContent.length - 3500} more characters]\\n\\n`;\n      responseText += `💡 The document contains additional content. Ask me specific questions to get targeted information from the rest of the document.`;\n    } else {\n      responseText += cleanContent;\n    }\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Content extraction error:', error);\n    return `Error extracting document content: ${error.message}`;\n  }\n}\n\n// Handle SPECIFIC SEARCH QUERIES within documents\nif (chatInput && chatInput.trim() !== '') {\n  console.log('SPECIFIC SEARCH QUERY:', chatInput);\n  \n  try {\n    const searchRequest = {\n      search: chatInput,\n      queryType: \"simple\",\n      searchMode: \"any\",\n      filter: client !== 'general' ? `client eq '${client}'` : null,\n      top: 10,\n      select: \"fileName,category,content\",\n      highlight: \"content\",\n      highlightPreTag: \"**\",\n      highlightPostTag: \"**\",\n      count: true\n    };\n    \n    if (!searchRequest.filter) {\n      delete searchRequest.filter;\n    }\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const count = response['@odata.count'] || results.length;\n    \n    // Filter out invalid results\n    const validResults = results.filter(r => r.fileName && r.fileName !== 'Unknown file');\n    \n    if (validResults.length === 0) {\n      return `No results found for \"${chatInput}\" in ${client !== 'general' ? `client \"${client}\" documents` : 'any documents'}. Try different search terms.`;\n    }\n    \n    let responseText = `## Search Results: \"${chatInput}\"\\n\\n`;\n    responseText += `Found ${validResults.length} relevant result(s).\\n\\n`;\n    \n    validResults.forEach((result, index) => {\n      responseText += `### ${index + 1}. From ${result.fileName}\\n`;\n      responseText += `Category: ${result.category || 'general'}\\n\\n`;\n      \n      // Show highlighted matches or relevant excerpts\n      if (result['@search.highlights'] && result['@search.highlights'].content) {\n        responseText += `**Relevant sections:**\\n`;\n        result['@search.highlights'].content.slice(0, 5).forEach(highlight => {\n          const cleaned = highlight.replace(/[\\r\\n]+/g, ' ').trim();\n          if (cleaned.length > 50) {\n            responseText += `• ${cleaned}\\n`;\n          }\n        });\n      } else if (result.content) {\n        // Find relevant excerpt around the search term\n        const lowerContent = result.content.toLowerCase();\n        const searchTerms = chatInput.toLowerCase().split(' ');\n        let excerptStart = 0;\n        \n        for (const term of searchTerms) {\n          const index = lowerContent.indexOf(term);\n          if (index !== -1) {\n            excerptStart = Math.max(0, index - 100);\n            break;\n          }\n        }\n        \n        const excerpt = result.content.substring(excerptStart, excerptStart + 400).replace(/[\\r\\n]+/g, ' ').trim();\n        responseText += `**Excerpt:** ...${excerpt}...\\n`;\n      }\n      \n      responseText += `\\n---\\n\\n`;\n    });\n    \n    responseText += `💡 Need more details? Ask me to show the full content of any specific document.`;\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Search error:', error);\n    return `Error searching documents: ${error.message}`;\n  }\n}\n\n// Default response\nreturn `I can help you with construction documents for \"${client}\". Try:\\n• \"What documents do you have?\" - to list all documents\\n• \"Show me the Windows 11 document\" - to see specific content\\n• \"Tell me about [topic]\" - to search for specific information\\n• \"All of it\" or \"full content\" - to see complete document content`;\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        1280,
        352
      ],
      "id": "8e478e74-986f-4831-b3a8-62bb22f6d9a6",
      "name": "Google Search API",
      "executeOnce": false
    },
    {
      "parameters": {
        "contextWindowLength": 3
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        960,
        336
      ],
      "id": "31646673-da7e-4206-afe8-eb7c8a5304c6",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/clients/list",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "56110cf4-7a8e-4323-a429-df562e8092bc",
      "name": "List Clients Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -416,
        2464
      ],
      "webhookId": "ask-foreman-list-clients"
    },
    {
      "parameters": {
        "url": "https://saxtechfcs.blob.core.windows.net/fcs-clients?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D&restype=container&comp=list&prefix=FCS-OriginalClients/&delimiter=/",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "d67ff0c1-4530-4820-a56b-8e31ac7d4b1b",
      "name": "List Blob Client Folders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -192,
        2464
      ]
    },
    {
      "parameters": {
        "jsCode": "// Fixed file preparation with binary conversion for Azure upload\nconst inputData = $input.all()[0].json;\n\n// Handle both direct JSON and webhook body structure\nconst body = inputData.body || inputData;\n\n// Extract file data (base64 string)\nconst fileData = body.file || body.data || '';\nconst fileName = body.fileName || body.name || 'unknown.pdf';\nconst mimeType = body.mimeType || body.type || 'application/pdf';\nconst category = body.category || 'uncategorized';\nconst client = body.client || 'general';\nconst clientName = body.clientName || '';\n\n// Check if file data exists\nif (!fileData) {\n    throw new Error('No file data provided in upload request');\n}\n\n// Calculate approximate file size from base64\nconst base64Length = fileData.length;\nconst padding = (fileData.match(/=/g) || []).length;\nconst fileSize = Math.floor((base64Length * 3) / 4) - padding;\n\n// Determine if file is large (> 10MB)\nconst isLargeFile = fileSize > 10 * 1024 * 1024;\n\nconsole.log(`File: ${fileName}, Size: ${(fileSize / 1024 / 1024).toFixed(2)} MB, Large: ${isLargeFile}`);\n\n// Convert base64 to binary buffer for Azure upload\nconst buffer = Buffer.from(fileData, 'base64');\n\n// Return data with both JSON metadata and binary data\nreturn {\n    json: {\n        // Keep base64 for any nodes that need it\n        file: fileData,\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        fileSizeMB: (fileSize / 1024 / 1024).toFixed(2),\n        isLargeFile: isLargeFile,\n        uploadedAt: new Date().toISOString(),\n        // Azure blob URLs\n        originalBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-originalclients/${client}/${category}/${fileName}`,\n        processedBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-processedclients/${client}/${category}/${fileName}.jsonl`\n    },\n    binary: {\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileName.split('.').pop() || 'pdf'\n        }\n    }\n};\n"
      },
      "id": "d6838b5b-6ada-4e85-8502-4fffad133ae7",
      "name": "Parse Client List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        2464
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "54a7f250-370a-4bfa-ae1a-2115e2df603a",
      "name": "List Clients Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        272,
        2464
      ]
    },
    {
      "parameters": {
        "content": "## Delete File(s)\n",
        "height": 736,
        "width": 1728,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -528,
        1440
      ],
      "id": "4745e6ac-93d0-4bf3-b58a-d82dfba3036d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Create Client\n",
        "height": 208,
        "width": 1216,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -528,
        2192
      ],
      "id": "bd0e860d-4195-411f-ae0e-3d5b4d4dba88",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## List Clients\n",
        "height": 208,
        "width": 992,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -528,
        2416
      ],
      "id": "01de47c2-aed4-4491-a89a-8c5722f5b3bb",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/clients/create",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": true
        }
      },
      "id": "779b676c-53df-436c-b6f9-976235b2c629",
      "name": "Create Client Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -416,
        2240
      ],
      "webhookId": "ask-foreman-create-client"
    },
    {
      "parameters": {
        "jsCode": "// Universal \"Prepare File Data\" node code for n8n\n// Handles multiple possible webhook data structures\n\nconst inputItem = $input.first();\n\n// Initialize variables\nlet fileData = null;\nlet fileName = 'document.pdf';\nlet mimeType = 'application/pdf';\nlet category = 'uncategorized';\nlet client = 'general';\nlet clientName = 'general';\n\nconsole.log('=== Prepare File Data - Universal Handler ===');\n\n// Strategy 1: Check if data comes from a previous node (like Check File Size)\nif (inputItem.json && inputItem.json.fileBase64) {\n    console.log('Found fileBase64 from previous node');\n    fileData = inputItem.json.fileBase64;\n    fileName = inputItem.json.fileName || fileName;\n    mimeType = inputItem.json.mimeType || mimeType;\n    category = inputItem.json.category || category;\n    client = inputItem.json.client || client;\n    clientName = inputItem.json.clientName || clientName;\n}\n// Strategy 2: Check if data is directly in json\nelse if (inputItem.json && inputItem.json.file) {\n    console.log('Found file in json root');\n    fileData = inputItem.json.file;\n    fileName = inputItem.json.fileName || fileName;\n    mimeType = inputItem.json.mimeType || mimeType;\n    category = inputItem.json.category || category;\n    client = inputItem.json.client || client;\n    clientName = inputItem.json.clientName || clientName;\n}\n// Strategy 3: Check if data is in json.body (webhook with body)\nelse if (inputItem.json && inputItem.json.body) {\n    console.log('Found body in json, checking for file data');\n    let body = inputItem.json.body;\n    \n    // Parse if body is a string\n    if (typeof body === 'string') {\n        try {\n            body = JSON.parse(body);\n        } catch (e) {\n            console.error('Failed to parse body string');\n        }\n    }\n    \n    if (body && typeof body === 'object') {\n        fileData = body.file || body.fileBase64 || null;\n        fileName = body.fileName || fileName;\n        mimeType = body.mimeType || mimeType;\n        category = body.category || category;\n        client = body.client || client;\n        clientName = body.clientName || clientName;\n    }\n}\n// Strategy 4: Check if we already have binary data from webhook\nelse if (inputItem.binary && Object.keys(inputItem.binary).length > 0) {\n    console.log('Found existing binary data from webhook');\n    const binaryKey = Object.keys(inputItem.binary)[0];\n    const binaryItem = inputItem.binary[binaryKey];\n    \n    // We already have binary, just pass it through with metadata\n    return {\n        json: {\n            fileName: binaryItem.fileName || fileName,\n            mimeType: binaryItem.mimeType || mimeType,\n            category: inputItem.json?.category || category,\n            client: inputItem.json?.client || client,\n            clientName: inputItem.json?.clientName || client,\n            fileSize: binaryItem.data ? binaryItem.data.length : 0,\n            uploadedAt: new Date().toISOString()\n        },\n        binary: inputItem.binary\n    };\n}\n\n// Validate we found file data\nif (!fileData) {\n    console.error('ERROR: No file data found in any expected location');\n    console.error('Input structure:');\n    console.error('- Has json:', !!inputItem.json);\n    console.error('- Has binary:', !!inputItem.binary);\n    if (inputItem.json) {\n        console.error('- JSON keys:', Object.keys(inputItem.json));\n        console.error('- JSON sample:', JSON.stringify(inputItem.json).substring(0, 500));\n    }\n    throw new Error('No file data found in webhook request - check webhook configuration');\n}\n\n// Calculate file size and convert to binary\nlet fileSize;\nlet buffer;\n\n// Check if fileData is already a buffer\nif (Buffer.isBuffer(fileData)) {\n    console.log('File data is already a buffer');\n    buffer = fileData;\n    fileSize = buffer.length;\n} else if (typeof fileData === 'string') {\n    console.log('File data is base64 string, converting to buffer');\n    // It's a base64 string\n    buffer = Buffer.from(fileData, 'base64');\n    fileSize = buffer.length;\n} else {\n    console.error('Unknown file data type:', typeof fileData);\n    throw new Error('File data is neither a buffer nor a base64 string');\n}\n\n// Get file extension\nconst fileExtension = fileName.split('.').pop() || 'pdf';\n\nconsole.log(`✅ File prepared successfully:`);\nconsole.log(`   - Name: ${fileName}`);\nconsole.log(`   - Size: ${(fileSize / 1024).toFixed(2)} KB`);\nconsole.log(`   - Type: ${mimeType}`);\nconsole.log(`   - Client: ${client}/${clientName}`);\nconsole.log(`   - Category: ${category}`);\n\n// Return both JSON metadata and binary data\nreturn {\n    json: {\n        // Metadata for all downstream nodes\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: fileSize > 10 * 1024 * 1024,\n        uploadedAt: new Date().toISOString(),\n        // Keep base64 for nodes that need it\n        fileBase64: typeof fileData === 'string' ? fileData : buffer.toString('base64')\n    },\n    binary: {\n        // Binary data for Azure upload - using 'data' as the standard field name\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileExtension\n        }\n    }\n};\n"
      },
      "id": "f4e6acc7-4825-4eda-9b3b-9f48b20dc617",
      "name": "Prepare Client Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        2240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Fixed file size check with proper data extraction\nconst inputData = $input.all()[0].json;\n\n// Handle both direct JSON and webhook body structure\nconst body = inputData.body || inputData;\n\n// Extract file data (base64 string)\nconst fileData = body.file || body.data || '';\nconst fileName = body.fileName || body.name || 'unknown.pdf';\nconst mimeType = body.mimeType || body.type || 'application/pdf';\nconst category = body.category || 'uncategorized';\nconst client = body.client || 'general';\nconst clientName = body.clientName || '';\n\n// Check if file data exists\nif (!fileData) {\n    throw new Error('No file data provided in upload request');\n}\n\n// Calculate approximate file size from base64\n// Base64 increases size by ~33%, so we reverse calculate\nconst base64Length = fileData.length;\nconst padding = (fileData.match(/=/g) || []).length;\nconst fileSize = Math.floor((base64Length * 3) / 4) - padding;\n\n// Determine if file is large (> 10MB)\nconst isLargeFile = fileSize > 10 * 1024 * 1024;\n\nconsole.log(`File: ${fileName}, Size: ${(fileSize / 1024).toFixed(2)} KB, Large: ${isLargeFile}`);\n\n// Return data for next nodes\nreturn {\n    json: {\n        file: fileData,\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: isLargeFile,\n        uploadedAt: new Date().toISOString()\n    }\n};"
      },
      "id": "18bf1df1-77fe-4416-9e5f-932ea5ba7894",
      "name": "Create Folder Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        2240
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $json.path }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "Content-Type",
              "value": "={{ $json.contentType }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "body",
              "value": "={{ $json.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d56efe2f-6a46-41c6-8476-acf131876ac5",
      "name": "Create Blob Folders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        272,
        2240
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"operation\": \"CREATE_CLIENT\",\n  \"client\": {\n    \"id\": \"{{ $node['Prepare Client Data'].json.id }}\",\n    \"name\": \"{{ $node['Prepare Client Data'].json.name }}\",\n    \"folderName\": \"{{ $node['Prepare Client Data'].json.folderName }}\",\n    \"projectName\": \"{{ $node['Prepare Client Data'].json.projectName }}\",\n    \"categories\": {{ JSON.stringify($node['Prepare Client Data'].json.categories) }}\n  },\n  \"createdAt\": \"{{ $node['Prepare Client Data'].json.createdAt }}\",\n  \"message\": \"Client created successfully with folder structure under FCS-OriginalClients\"\n}",
        "options": {}
      },
      "id": "a15aa3d1-1913-4c92-a4c3-a0fbdecd8bc2",
      "name": "Create Client Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        496,
        2240
      ]
    },
    {
      "parameters": {
        "description": "Call this tool for ANY client-specific queries including:\n- Document searches and information lookups \n- PDF links, document links, or file access requests\n- \"Give me links\", \"show me PDFs\", \"what documents do you have\"\n- Construction document searches, estimates, drawings, proposals, specs\n- Client information, project details, and document summaries\nThis is the MAIN tool for all client document and PDF-related queries.",
        "jsCode": "// COMPREHENSIVE Client Search Tool - AUTO CONTENT VERSION\n// Automatically shows document content when listing documents\n\nconst chatInput = $json.chatInput || $json.query || $json.text || $json.message || '';\nconst client = $json.client || 'general';\nconst queryLower = (chatInput || '').toLowerCase();\n\nconsole.log('Client Search Input:', { chatInput, client, queryLower });\n\n// Azure Search Configuration\nconst searchService = 'fcssearchservice';\nconst indexName = 'fcs-construction-docs-index-v2';\nconst apiVersion = '2023-11-01';\nconst adminKey = 'UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv';\n\n// Check if asking about documents (list request but with automatic content display)\nconst isDocumentQuery = queryLower.includes('what') || \n                       queryLower.includes('doc') || \n                       queryLower.includes('have') || \n                       queryLower.includes('list') ||\n                       queryLower.includes('available') ||\n                       queryLower.includes('show');\n\nif (isDocumentQuery) {\n  console.log('🔍 DOCUMENT QUERY - Will show content automatically');\n  \n  try {\n    // Get ALL documents for this client, INCLUDING FULL CONTENT\n    const searchRequest = {\n      search: \"*\",\n      queryType: \"simple\",\n      filter: `client eq '${client}'`,\n      top: 100,\n      select: \"id,client,category,fileName,content,uploadedAt,blobPath\",\n      count: true\n    };\n\n    console.log('Search Request:', JSON.stringify(searchRequest, null, 2));\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const count = response['@odata.count'] || results.length;\n    \n    console.log(`Found ${count} documents for client: ${client}`);\n    \n    // Filter out invalid documents\n    const validResults = results.filter(doc => \n      doc.fileName && \n      doc.fileName !== 'Unknown file' && \n      doc.fileName !== 'file' &&\n      doc.fileName.trim() !== ''\n    );\n    \n    if (validResults.length === 0) {\n      return `No documents found for client \"${client}\". Please upload documents for this client.`;\n    }\n\n    // Build comprehensive response with FULL CONTENT\n    let responseText = `# Documents for ${client}\\n\\n`;\n    responseText += `Found ${validResults.length} document(s) with the following content:\\n\\n`;\n    responseText += `---\\n\\n`;\n    \n    // Show each document with its FULL CONTENT\n    validResults.forEach((doc, index) => {\n      const fileName = doc.fileName;\n      const category = doc.category || 'general';\n      const hasContent = doc.content && doc.content.length > 0;\n      \n      responseText += `## ${index + 1}. ${fileName}\\n`;\n      responseText += `**Category:** ${category}\\n`;\n      \n      if (doc.uploadedAt) {\n        const uploadDate = new Date(doc.uploadedAt).toLocaleDateString();\n        responseText += `**Uploaded:** ${uploadDate}\\n`;\n      }\n      \n      responseText += `\\n`;\n      \n      // SHOW THE ACTUAL CONTENT\n      if (hasContent) {\n        responseText += `### Document Content:\\n\\n`;\n        \n        // Clean and format the content\n        const cleanContent = doc.content\n          .replace(/=== DOCUMENT ANALYSIS ===/g, '#### Document Analysis')\n          .replace(/=== EXTRACTED TEXT CONTENT ===/g, '#### Extracted Content')\n          .replace(/=== CONSTRUCTION DOCUMENT ANALYSIS ===/g, '#### Construction Analysis')\n          .replace(/=== METADATA ===/g, '#### Metadata')\n          .replace(/--- Page (\\d+) ---/g, '\\n**Page $1**\\n')\n          .replace(/\\r\\n/g, '\\n')\n          .replace(/\\n{3,}/g, '\\n\\n')\n          .trim();\n        \n        // Show full content or truncate if very long\n        if (cleanContent.length > 8000) {\n          // For very long documents, show substantial content but truncate\n          responseText += cleanContent.substring(0, 7500);\n          responseText += `\\n\\n... [${cleanContent.length - 7500} more characters]\\n\\n`;\n          responseText += `💡 **Note:** This document contains additional content. Ask specific questions to explore particular sections.\\n`;\n        } else {\n          // Show complete content for reasonably sized documents\n          responseText += cleanContent;\n        }\n      } else {\n        responseText += `⚠️ *Content is still being processed or is not available*\\n`;\n      }\n      \n      responseText += `\\n---\\n\\n`;\n    });\n\n    responseText += `\\n## How can I help?\\n`;\n    responseText += `Now that I have the document content, you can:\\n`;\n    responseText += `• Ask specific questions about the Windows 11 upgrade process\\n`;\n    responseText += `• Request summaries of specific sections\\n`;\n    responseText += `• Get step-by-step procedures\\n`;\n    responseText += `• Find troubleshooting information\\n`;\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Document search error:', error);\n    return `Error retrieving documents: ${error.message}`;\n  }\n}\n\n// Handle specific content requests (when asking for \"all of it\", \"everything\", etc.)\nconst wantsAllContent = queryLower.includes('all of it') || \n                       queryLower.includes('everything') ||\n                       queryLower.includes('full') ||\n                       queryLower.includes('entire') ||\n                       queryLower.includes('complete') ||\n                       queryLower.includes('tell me what');\n\nif (wantsAllContent) {\n  console.log('FULL CONTENT REQUEST');\n  \n  try {\n    const searchRequest = {\n      search: \"*\",\n      queryType: \"simple\",\n      filter: `client eq '${client}'`,\n      top: 10,\n      select: \"id,fileName,content,category,uploadedAt\",\n      count: true\n    };\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const docsWithContent = results.filter(doc => \n      doc.content && \n      doc.content.length > 0 && \n      doc.fileName && \n      doc.fileName !== 'Unknown file'\n    );\n    \n    if (docsWithContent.length === 0) {\n      return `No documents with content found for \"${client}\".`;\n    }\n    \n    let responseText = `# Complete Document Content\\n\\n`;\n    \n    docsWithContent.forEach((doc, index) => {\n      if (index > 0) responseText += `\\n---\\n\\n`;\n      \n      responseText += `## ${doc.fileName}\\n\\n`;\n      \n      const cleanContent = doc.content\n        .replace(/=== /g, '### ')\n        .replace(/--- Page/g, '\\n**Page')\n        .replace(/\\r\\n/g, '\\n')\n        .trim();\n      \n      responseText += cleanContent;\n    });\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Content extraction error:', error);\n    return `Error extracting content: ${error.message}`;\n  }\n}\n\n// Handle SPECIFIC SEARCH QUERIES\nif (chatInput && chatInput.trim() !== '') {\n  console.log('SPECIFIC SEARCH:', chatInput);\n  \n  try {\n    const searchRequest = {\n      search: chatInput,\n      queryType: \"simple\",\n      searchMode: \"any\",\n      filter: client !== 'general' ? `client eq '${client}'` : null,\n      top: 10,\n      select: \"fileName,category,content\",\n      highlight: \"content\",\n      highlightPreTag: \"**\",\n      highlightPostTag: \"**\",\n      count: true\n    };\n    \n    if (!searchRequest.filter) {\n      delete searchRequest.filter;\n    }\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const count = response['@odata.count'] || results.length;\n    \n    if (results.length === 0) {\n      return `No results found for \"${chatInput}\" in ${client !== 'general' ? `client \"${client}\" documents` : 'any documents'}.`;\n    }\n    \n    let responseText = `# Search Results: \"${chatInput}\"\\n\\n`;\n    responseText += `Found ${count} relevant result(s).\\n\\n`;\n    \n    results.forEach((result, index) => {\n      responseText += `## ${index + 1}. From ${result.fileName || 'Unknown'}\\n`;\n      \n      if (result['@search.highlights'] && result['@search.highlights'].content) {\n        responseText += `**Relevant sections:**\\n`;\n        result['@search.highlights'].content.slice(0, 5).forEach(highlight => {\n          const cleaned = highlight.replace(/[\\r\\n]+/g, ' ').trim();\n          if (cleaned.length > 50) {\n            responseText += `• ${cleaned}\\n`;\n          }\n        });\n      } else if (result.content) {\n        // Show relevant excerpt\n        const excerpt = result.content.substring(0, 500).replace(/[\\r\\n]+/g, ' ').trim();\n        responseText += `**Excerpt:** ${excerpt}...\\n`;\n      }\n      \n      responseText += `\\n`;\n    });\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Search error:', error);\n    return `Error searching: ${error.message}`;\n  }\n}\n\n// Default response\nreturn `I can help you with documents for \"${client}\". Try:\\n• \"What documents do you have?\" - to see all content\\n• \"Search for [topic]\" - to find specific information\\n• Ask any specific question about your documents`;\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        1456,
        352
      ],
      "id": "fbe2384b-ed53-4e89-b0fc-bfc00cafc135",
      "name": "Client Search"
    },
    {
      "parameters": {
        "description": "Call this tool when a client asks high level about a client.",
        "jsCode": "// Enhanced Client Summary Tool - Now with inline PDF previews\n// Provides detailed client information with actual document content and PDF preview links\n\nconst searchService = 'fcssearchservice';\nconst indexName = 'fcs-construction-docs-index-v2';\nconst apiVersion = '2023-11-01';\nconst adminKey = 'UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv';\n\n// Get client from input\nconst clientName = $json.client || $json.chatInput || $json.query || '';\n\nconsole.log('Client Summary Request:', { clientName, allJson: $json });\n\nif (!clientName || clientName.trim() === '') {\n  return 'I need a client name to provide detailed information. Please specify which client you want to know about.';\n}\n\ntry {\n  // Search for all documents for this client\n  const searchRequest = {\n    search: \"*\",\n    queryType: \"simple\",\n    filter: `client eq '${clientName}'`,\n    top: 50, // Get more documents for comprehensive analysis\n    select: \"id,client,category,fileName,content,uploadedAt,blobPath\",\n    count: true\n  };\n\n  const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n  console.log('Fetching all documents for client:', clientName);\n\n  const response = await this.helpers.httpRequest({\n    method: 'POST',\n    url: searchUrl,\n    headers: {\n      'api-key': adminKey,\n      'Content-Type': 'application/json'\n    },\n    body: searchRequest,\n    json: true\n  });\n\n  const results = response.value || [];\n  const totalResults = response['@odata.count'] || results.length;\n\n  console.log(`Found ${totalResults} documents for client: ${clientName}`);\n\n  if (results.length === 0) {\n    return `I don't have any documents for client \"${clientName}\". Please check the client name or ensure documents have been uploaded and indexed.`;\n  }\n\n  // Analyze and categorize the documents\n  let clientSummary = `# ${clientName.toUpperCase()} CLIENT OVERVIEW\\\\n\\\\n`;\n  \n  // Document statistics\n  const docsByCategory = {};\n  const totalDocs = results.length;\n  let latestUpload = null;\n  \n  results.forEach(doc => {\n    const category = doc.category || 'unknown';\n    if (!docsByCategory[category]) {\n      docsByCategory[category] = [];\n    }\n    docsByCategory[category].push(doc);\n    \n    // Track latest upload\n    if (doc.uploadedAt) {\n      const uploadDate = new Date(doc.uploadedAt);\n      if (!latestUpload || uploadDate > latestUpload) {\n        latestUpload = uploadDate;\n      }\n    }\n  });\n\n  clientSummary += `📊 **Document Summary:**\\\\n`;\n  clientSummary += `- Total Documents: ${totalDocs}\\\\n`;\n  if (latestUpload) {\n    clientSummary += `- Last Updated: ${latestUpload.toLocaleDateString()}\\\\n`;\n  }\n  clientSummary += `- Document Categories:\\\\n`;\n  Object.keys(docsByCategory).forEach(category => {\n    clientSummary += `  • ${category.charAt(0).toUpperCase() + category.slice(1)}: ${docsByCategory[category].length} documents\\\\n`;\n  });\n  clientSummary += `\\\\n`;\n\n  // Extract key project information\n  const projectInfo = extractProjectInfo(results);\n  if (projectInfo.length > 0) {\n    clientSummary += `🏗️ **Project Information:**\\\\n`;\n    projectInfo.forEach(info => {\n      clientSummary += `${info}\\\\n`;\n    });\n    clientSummary += `\\\\n`;\n  }\n\n  // Extract financial information\n  const financialInfo = extractFinancialInfo(results);\n  if (financialInfo.length > 0) {\n    clientSummary += `💰 **Financial Summary:**\\\\n`;\n    financialInfo.forEach(info => {\n      clientSummary += `${info}\\\\n`;\n    });\n    clientSummary += `\\\\n`;\n  }\n\n  // Extract key specifications and materials\n  const specsInfo = extractSpecifications(results);\n  if (specsInfo.length > 0) {\n    clientSummary += `🔧 **Key Specifications:**\\\\n`;\n    specsInfo.forEach(info => {\n      clientSummary += `${info}\\\\n`;\n    });\n    clientSummary += `\\\\n`;\n  }\n\n  // Enhanced Document Breakdown with PDF previews\n  clientSummary += `📁 **Document Breakdown with Previews:**\\\\n\\\\n`;\n  Object.keys(docsByCategory).forEach(category => {\n    if (docsByCategory[category].length > 0) {\n      clientSummary += `**${category.charAt(0).toUpperCase() + category.slice(1)} (${docsByCategory[category].length}):**\\\\n`;\n      docsByCategory[category].slice(0, 8).forEach((doc, index) => { // Show up to 8 docs per category\n        const fileName = doc.fileName || 'Unknown file';\n        const uploadDate = doc.uploadedAt ? new Date(doc.uploadedAt).toLocaleDateString() : '';\n        \n        // Create inline PDF preview for PDF files\n        if (fileName.toLowerCase().endsWith('.pdf')) {\n          const pdfUrl = createInlinePDFUrl(clientName, category, fileName);\n          const shortFileName = fileName.length > 50 ? fileName.substring(0, 47) + '...' : fileName;\n          clientSummary += `${index + 1}. **${shortFileName}**${uploadDate ? ` (${uploadDate})` : ''}\\\\n`;\n          clientSummary += `   [VIEWER:${pdfUrl}|${shortFileName}|Doc-${index+1}|${category}|${category}]\\\\n`;\n        } else {\n          clientSummary += `${index + 1}. ${fileName}${uploadDate ? ` (${uploadDate})` : ''}\\\\n`;\n        }\n      });\n      if (docsByCategory[category].length > 8) {\n        clientSummary += `   ... and ${docsByCategory[category].length - 8} more documents\\\\n`;\n      }\n      clientSummary += `\\\\n`;\n    }\n  });\n\n  // Add contact and project details if found\n  const contactInfo = extractContactInfo(results);\n  if (contactInfo) {\n    clientSummary += `📞 **Contact Information:**\\\\n${contactInfo}\\\\n\\\\n`;\n  }\n\n  clientSummary += `💡 **Quick Actions:**\\\\n`;\n  clientSummary += `- Ask me \"show me drawings\" to see architectural drawings\\\\n`;\n  clientSummary += `- Ask \"what's the painting scope?\" for detailed paint specifications\\\\n`;\n  clientSummary += `- Ask \"show me proposals\" to see all proposal documents\\\\n`;\n  clientSummary += `- For specific questions, just ask about any aspect of the project\\\\n`;\n\n  console.log('Generated comprehensive client summary with PDF previews');\n  return clientSummary;\n\n} catch (error) {\n  console.error('Client summary error:', error);\n  return `Error generating summary for client \"${clientName}\": ${error.message}. Please try again.`;\n}\n\n// Enhanced function to create inline PDF URLs\nfunction createInlinePDFUrl(clientName, category, fileName) {\n  const baseUrl = 'https://saxtechfcs.blob.core.windows.net/fcs-clients';\n  const path = `FCS-OriginalClients/${clientName}/${category}/${fileName}`;\n  \n  // Use the same SAS token format as the fixed Client Search\n  const sasParams = new URLSearchParams({\n    'sp': 'racwdl',\n    'st': '2025-08-08T05:00:57Z',\n    'se': '2030-08-08T13:15:57Z',\n    'spr': 'https',\n    'sv': '2024-11-04',\n    'sr': 'c',\n    'sig': 'lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2/rnIg='\n  });\n  \n  // Properly encode the entire URL\n  const encodedPath = encodeURI(path);\n  const fullUrl = `${baseUrl}/${encodedPath}?${sasParams.toString()}`;\n  \n  return fullUrl;\n}\n\n// Helper functions to extract specific information (same as before)\nfunction extractProjectInfo(results) {\n  const projectInfo = [];\n  const projectNames = new Set();\n  \n  results.forEach(doc => {\n    if (doc.content) {\n      const content = doc.content.toLowerCase();\n      \n      // Extract project names\n      const projectMatches = content.match(/(?:project|contract|job)[\\s:]*([^\\r\\n]+)/gi);\n      if (projectMatches) {\n        projectMatches.forEach(match => {\n          const cleaned = match.replace(/(?:project|contract|job)[\\s:]*/gi, '').trim();\n          if (cleaned.length > 10 && cleaned.length < 100) {\n            projectNames.add(cleaned);\n          }\n        });\n      }\n      \n      // Extract building information\n      const buildingMatches = content.match(/building(?:s)?\\s*(?:#\\s*)?(\\d+(?:\\s*(?:to|[-–])\\s*\\d+)?)/gi);\n      if (buildingMatches) {\n        buildingMatches.forEach(match => {\n          projectInfo.push(`- Buildings: ${match}`);\n        });\n      }\n    }\n  });\n  \n  // Add unique project names\n  Array.from(projectNames).slice(0, 3).forEach(name => {\n    projectInfo.push(`- Project: ${name}`);\n  });\n  \n  return projectInfo;\n}\n\nfunction extractFinancialInfo(results) {\n  const financialInfo = [];\n  const amounts = [];\n  \n  results.forEach(doc => {\n    if (doc.content) {\n      const content = doc.content;\n      \n      // Extract dollar amounts\n      const moneyMatches = content.match(/\\$[\\d,]+(?:\\.\\d{2})?/g);\n      if (moneyMatches) {\n        moneyMatches.forEach(amount => {\n          const numericValue = parseInt(amount.replace(/[$,]/g, ''));\n          if (numericValue >= 1000) { // Only significant amounts\n            amounts.push({ amount, value: numericValue });\n          }\n        });\n      }\n      \n      // Extract specific cost categories\n      const costMatches = content.match(/(painting|resinous flooring|architectural)[^$]*\\$[\\d,]+/gi);\n      if (costMatches) {\n        costMatches.forEach(match => {\n          financialInfo.push(`- ${match.trim()}`);\n        });\n      }\n    }\n  });\n  \n  // Add largest amounts found\n  const sortedAmounts = amounts.sort((a, b) => b.value - a.value).slice(0, 5);\n  sortedAmounts.forEach(item => {\n    if (item.value >= 10000) { // Only show amounts $10k+\n      financialInfo.push(`- Contract Value: ${item.amount}`);\n    }\n  });\n  \n  return [...new Set(financialInfo)]; // Remove duplicates\n}\n\nfunction extractSpecifications(results) {\n  const specs = [];\n  \n  results.forEach(doc => {\n    if (doc.content) {\n      const content = doc.content;\n      \n      // Paint specifications\n      const paintSpecs = content.match(/(?:sherwin williams?|benjamin moore|sw\\s+\\d+|color|epoxy paint)[^.\\r\\n]*(?:\\.|$)/gi);\n      if (paintSpecs) {\n        paintSpecs.slice(0, 3).forEach(spec => {\n          specs.push(`- Paint: ${spec.trim()}`);\n        });\n      }\n      \n      // Flooring specifications\n      const flooringSpecs = content.match(/(?:ceramic carpet|resinous|epoxy flooring|gp\\d+)[^.\\r\\n]*(?:\\.|$)/gi);\n      if (flooringSpecs) {\n        flooringSpecs.slice(0, 3).forEach(spec => {\n          specs.push(`- Flooring: ${spec.trim()}`);\n        });\n      }\n      \n      // Coverage specifications\n      const coverageSpecs = content.match(/\\d+\\s*(?:sq\\.?\\s*ft\\.?|sqft)/gi);\n      if (coverageSpecs) {\n        const uniqueCoverage = [...new Set(coverageSpecs)].slice(0, 3);\n        uniqueCoverage.forEach(coverage => {\n          specs.push(`- Coverage: ${coverage}`);\n        });\n      }\n    }\n  });\n  \n  return [...new Set(specs)].slice(0, 8); // Limit to 8 unique specs\n}\n\nfunction extractContactInfo(results) {\n  let contactInfo = '';\n  \n  results.forEach(doc => {\n    if (doc.content && !contactInfo) {\n      const content = doc.content;\n      \n      // Extract company and contact information\n      const companyMatch = content.match(/(?:dear|attn:|attention:)\\s*([^,\\r\\n]+)/i);\n      if (companyMatch) {\n        contactInfo += `Contact: ${companyMatch[1].trim()}\\n`;\n      }\n      \n      // Extract phone numbers\n      const phoneMatch = content.match(/(?:tel|phone)[:,\\s]*(\\(\\d{3}\\)\\s*\\d{3}-\\d{4}|\\d{3}[.-]\\d{3}[.-]\\d{4})/i);\n      if (phoneMatch) {\n        contactInfo += `Phone: ${phoneMatch[1]}\\n`;\n      }\n      \n      // Extract addresses\n      const addressMatch = content.match(/\\d+\\s+[^,\\r\\n]+(?:street|st|avenue|ave|road|rd)[^,\\r\\n]*/i);\n      if (addressMatch) {\n        contactInfo += `Address: ${addressMatch[0]}\\n`;\n      }\n    }\n  });\n  \n  return contactInfo || null;\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        1600,
        352
      ],
      "id": "2e4aac91-52dd-454c-829c-69e156624821",
      "name": "Client Summary"
    },
    {
      "parameters": {
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients?restype=container&comp=list&prefix=FCS-OriginalClients/{{ $node[\"Extract Delete Client Info\"].json.clientName }}/&sp=racwdl&st=2025-08-07T21:44:55Z&se=2030-08-08T05:59:55Z&spr=https&sv=2024-11-04&sr=c&sig=AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo%3D",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-version",
              "value": "2024-11-04"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "20e2966e-3e7e-4cee-b83e-0cc0b0d700a7",
      "name": "List Client Blobs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        32,
        1072
      ]
    },
    {
      "parameters": {
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients?restype=container&comp=list&prefix=FCS-ConvertedClients/{{ $node[\"Extract Delete Client Info\"].json.clientName }}/&sp=racwdl&st=2025-08-07T21:44:55Z&se=2030-08-08T05:59:55Z&spr=https&sv=2024-11-04&sr=c&sig=AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo%3D",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-version",
              "value": "2024-11-04"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "4dd630be-8cfc-4499-938e-7dd2e19472d6",
      "name": "List Converted Client Blobs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        272,
        1072
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the client info from the extraction node\nconst clientData = $node[\"Extract Delete Client Info\"].json;\nconst clientId = clientData.clientId;\nconst clientName = clientData.clientName;\n\n// Parse the XML response from blob listing (ConvertedClients)\nconst convertedXmlResponse = $json.data || '';\n\n// Parse the XML response from original clients listing\nconst originalXmlResponse = $node[\"List Client Blobs\"].json.data || '';\n\nconst blobPaths = [];\n\n// Extract blob names from Original XML\nconst originalBlobMatches = originalXmlResponse.match(/<Name>([^<]+)<\\/Name>/g) || [];\nconst originalBlobPaths = originalBlobMatches.map(match => {\n  const name = match.replace(/<Name>|<\\/Name>/g, '');\n  return name;\n});\n\n// Extract blob names from Converted XML\nconst convertedBlobMatches = convertedXmlResponse.match(/<Name>([^<]+)<\\/Name>/g) || [];\nconst convertedBlobPaths = convertedBlobMatches.map(match => {\n  const name = match.replace(/<Name>|<\\/Name>/g, '');\n  return name;\n});\n\nconsole.log(`Found ${originalBlobPaths.length} blobs in OriginalClients for: ${clientName}`);\nconsole.log(`Found ${convertedBlobPaths.length} blobs in ConvertedClients for: ${clientName}`);\n\n// Add all found blobs to deletion list\nblobPaths.push(...originalBlobPaths);\nblobPaths.push(...convertedBlobPaths);\n\n// If no blobs found, still try to delete standard structure\nif (blobPaths.length === 0) {\n  console.log('No blobs found, attempting standard folder structure...');\n  const categories = ['drawings', 'estimates', 'proposals', 'specs', 'signed-contracts'];\n  \n  for (const category of categories) {\n    blobPaths.push(`FCS-OriginalClients/${clientName}/${category}/.placeholder`);\n    blobPaths.push(`FCS-ConvertedClients/${clientName}/${category}/.placeholder`);\n  }\n  \n  blobPaths.push(`FCS-OriginalClients/${clientName}/.metadata/client.json`);\n  blobPaths.push(`FCS-ConvertedClients/${clientName}/.metadata/client.json`);\n  blobPaths.push(`FCS-OriginalClients/${clientName}/.placeholder`);\n  blobPaths.push(`FCS-ConvertedClients/${clientName}/.placeholder`);\n}\n\n// Create delete operations for each blob\nconst deleteOperations = blobPaths.map(path => ({\n  json: {\n    blobPath: path,\n    clientId: clientId,\n    clientName: clientName,\n    totalBlobs: blobPaths.length,\n    url: `https://saxtechfcs.blob.core.windows.net/fcs-clients/${path}?sp=racwdl&st=2025-08-07T21:44:55Z&se=2030-08-08T05:59:55Z&spr=https&sv=2024-11-04&sr=c&sig=AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo%3D`\n  }\n}));\n\nconsole.log(`Created ${deleteOperations.length} delete operations for: ${clientName}`);\n\nreturn deleteOperations;"
      },
      "id": "f9903785-e351-4239-8970-3dd46c620885",
      "name": "Parse Blobs and Create Delete Ops",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        1072
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-version",
              "value": "2024-11-04"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "id": "e0d30867-1ab0-444e-9da6-c25a44229044",
      "name": "Delete Blob Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        1072
      ]
    },
    {
      "parameters": {
        "jsCode": "// Collect all the deletion results with better error handling\nconst results = [];\nlet clientName = 'unknown';\nlet clientId = 'unknown';\nlet totalBlobs = 0;\n\n// Get all input items - these contain both HTTP response and original request data\nconst allInputs = $input.all();\n\nconsole.log(`Processing ${allInputs.length} deletion results`);\nconsole.log('First item data:', JSON.stringify(Object.keys(allInputs[0]?.json || {})));\n\n// Get the original delete operations data from Parse Blobs node\nlet deleteOpsData = [];\ntry {\n  const parseBlobsNode = $('Parse Blobs and Create Delete Ops').all();\n  deleteOpsData = parseBlobsNode.map(item => item.json);\n  console.log(`Retrieved ${deleteOpsData.length} original delete operations`);\n} catch (e) {\n  console.log('Could not retrieve Parse Blobs data:', e.message);\n}\n\n// Process each deletion result\nfor (let i = 0; i < allInputs.length; i++) {\n  const item = allInputs[i];\n  const originalData = deleteOpsData[i] || {};\n  \n  // Get client info from original data or response\n  if (clientName === 'unknown') {\n    clientName = originalData.clientName || item.json.clientName || 'unknown';\n  }\n  if (clientId === 'unknown') {\n    clientId = originalData.clientId || item.json.clientId || 'unknown';\n  }\n  if (totalBlobs === 0) {\n    totalBlobs = originalData.totalBlobs || item.json.totalBlobs || allInputs.length;\n  }\n  \n  // Get the blob path from original data\n  const blobPath = originalData.blobPath || item.json.blobPath || item.json.url || 'unknown';\n  \n  // Handle the response - check for statusCode in different places\n  let statusCode = item.json.statusCode;\n  \n  // If we have a fullResponse structure, extract from there\n  if (!statusCode && item.json.statusCode !== undefined) {\n    statusCode = item.json.statusCode;\n  }\n  \n  // Check headers for status\n  if (!statusCode && item.json.headers) {\n    // Check for x-ms-request-id or other headers that indicate success\n    if (item.json.headers['x-ms-request-id'] || item.json.headers['x-ms-delete-type-permanent']) {\n      statusCode = 202; // Successful delete\n    }\n  }\n  \n  // For Azure Blob Storage DELETE operations:\n  // - 202 = Accepted (delete initiated)\n  // - 404 = Not Found (already deleted or never existed - still consider success)\n  // - 200/201 = Also success\n  // - 0 or undefined = Network error or request failed\n  const isSuccess = statusCode === 200 || statusCode === 201 || statusCode === 202 || statusCode === 404;\n  \n  console.log(`Delete result ${i+1}/${allInputs.length} for ${blobPath}: HTTP ${statusCode || 'unknown'} - ${isSuccess ? 'SUCCESS' : 'FAILED'}`);\n  \n  results.push({\n    path: blobPath,\n    status: isSuccess ? 'deleted' : 'failed',\n    statusCode: statusCode || 0,\n    timestamp: new Date().toISOString()\n  });\n}\n\n// If we still don't have client info, try to get it from the webhook data\nif (clientName === 'unknown' || clientId === 'unknown') {\n  try {\n    const extractData = $('Extract Delete Client Info').first();\n    if (extractData && extractData.json) {\n      clientName = extractData.json.clientName || clientName;\n      clientId = extractData.json.clientId || clientId;\n      console.log(`Retrieved client info from Extract node: ${clientName} (${clientId})`);\n    }\n  } catch (e) {\n    console.log('Could not retrieve client info from Extract node:', e.message);\n  }\n}\n\n// Count successful deletions\nconst successCount = results.filter(r => r.status === 'deleted').length;\nconst failedCount = results.filter(r => r.status === 'failed').length;\n\nconsole.log(`Delete summary: ${successCount} succeeded, ${failedCount} failed out of ${results.length} total`);\n\n// Prepare for search index cleanup\nconst deleteResult = {\n  status: failedCount === 0 ? 'success' : 'partial_success',\n  operation: 'DELETE_CLIENT',\n  clientId: clientId,\n  clientName: clientName,\n  deletedCount: successCount,\n  failedCount: failedCount,\n  totalAttempted: results.length,\n  message: failedCount === 0 \n    ? `Client \"${clientName}\" deleted from storage (${successCount} files), proceeding with search index cleanup`\n    : `Client \"${clientName}\" partially deleted: ${successCount} successful, ${failedCount} failed`,\n  timestamp: new Date().toISOString(),\n  details: results,\n  requiresSearchIndexCleanup: true\n};\n\nconsole.log(`Delete operation completed for client: ${clientName} - ${successCount} deleted, ${failedCount} failed - proceeding to search index cleanup`);\n\nreturn [{\n  json: deleteResult\n}];"
      },
      "id": "3c072845-e56c-4afc-bad3-c23bf2188cc3",
      "name": "Process Delete Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        1072
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the blob delete result\nconst deleteResult = $('Process Delete Results').first().json;\n\n// Get the search index deletion response from previous node\nconst deleteDocsData = $node['Delete Found Documents'].json;\nconst searchResponse = $json;\n\n// Determine search index status\nlet searchIndexStatus = 'skipped';\nlet searchDeletedCount = 0;\nlet searchMessage = 'No search index cleanup needed';\n\nconsole.log('Search deletion response keys:', Object.keys(searchResponse));\nconsole.log('Delete docs data:', {\n  searchDeleteSkipped: deleteDocsData?.searchDeleteSkipped,\n  deletedCount: deleteDocsData?.deletedCount\n});\n\n// Check if search deletion was skipped (no documents to delete)\nif (deleteDocsData?.searchDeleteSkipped) {\n  searchIndexStatus = 'skipped';\n  searchDeletedCount = 0;\n  searchMessage = 'No documents in search index to delete';\n} else {\n  // Azure Search returns the operation results in the value array\n  // Each item in the array has a status field indicating success\n  // A successful response has statusCode in the 200 range\n  let statusCode = searchResponse.statusCode;\n  \n  // If statusCode is missing, check for the value array which indicates success\n  if (!statusCode && searchResponse.value !== undefined) {\n    // If we have a value array, the request was successful\n    statusCode = 200;\n  }\n  \n  // Also check for @odata.context which indicates a successful response\n  if (!statusCode && searchResponse['@odata.context']) {\n    statusCode = 200;\n  }\n  \n  // Successful deletion\n  if (statusCode === 200 || statusCode === 201 || statusCode === 202 || statusCode === 204) {\n    searchIndexStatus = 'success';\n    searchDeletedCount = deleteDocsData?.deletedCount || 0;\n    searchMessage = `Successfully deleted ${searchDeletedCount} documents from search index`;\n  } else if (statusCode) {\n    // Failed with specific status code\n    searchIndexStatus = 'failed';\n    searchMessage = `Failed to delete from search index: HTTP ${statusCode}`;\n  } else {\n    // No status code available - check if we have any indication of success\n    if (searchResponse.value && Array.isArray(searchResponse.value)) {\n      // We have a value array, assume success\n      searchIndexStatus = 'success';\n      searchDeletedCount = deleteDocsData?.deletedCount || searchResponse.value.length || 0;\n      searchMessage = `Successfully deleted ${searchDeletedCount} documents from search index`;\n    } else {\n      // Unable to determine status\n      searchIndexStatus = 'failed';\n      searchMessage = 'Failed to delete from search index: Unable to determine status';\n    }\n  }\n}\n\n// Build the final result\nconst finalResult = {\n  ...deleteResult,\n  searchIndexCleanup: {\n    status: searchIndexStatus,\n    deletedDocuments: searchDeletedCount,\n    timestamp: new Date().toISOString(),\n    message: searchMessage\n  },\n  overallStatus: deleteResult.status === 'success' && (searchIndexStatus === 'success' || searchIndexStatus === 'skipped') \n    ? 'success' \n    : 'partial_success',\n  message: `Client \"${deleteResult.clientName}\": ${deleteResult.deletedCount} blob files deleted, ${searchDeletedCount} search documents removed`,\n  searchIndexNote: searchMessage\n};\n\nconsole.log(`Delete operation completed - Blobs: ${deleteResult.deletedCount} deleted, Search Index: ${searchDeletedCount} deleted (status: ${searchIndexStatus})`);\n\nreturn [{\n  json: finalResult\n}];"
      },
      "id": "5c1a38ed-03f8-4402-b8a0-6a183adda2cb",
      "name": "Finalize Delete Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1888,
        1168
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"api-key\": \"UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"search\": \"*\",\n  \"filter\": \"client eq '{{ $json.clientName }}'\",\n  \"select\": \"id\",\n  \"top\": 1000\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        944,
        1264
      ],
      "id": "2c1d65fb-852a-4d04-ae30-0f1681b20ee4",
      "name": "Cleanup Search Index1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"search\": \"*\",\n  \"filter\": \"client eq '{{ $node[\"Process Delete Results\"].json.clientName }}'\",\n  \"select\": \"id,client,category,fileName\",\n  \"top\": 1000\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1168,
        1168
      ],
      "id": "275a4f8c-2bea-4b29-97a4-f50033d12cec",
      "name": "Find Documents to Delete"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.searchDeleteSkipped ? JSON.stringify({ \"value\": [] }) : JSON.stringify({ \"value\": $json.deleteActions }) }}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1648,
        1168
      ],
      "id": "af30e946-9664-491a-8216-0745e7589023",
      "name": "Delete From Search Index"
    },
    {
      "parameters": {
        "content": "## Delete Client\n",
        "height": 416,
        "width": 2816,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -528,
        1008
      ],
      "id": "97fcbe3e-ca3d-45d9-82d3-1a3df5967d89",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "5e73ccd3-c99b-4e5a-957e-bd233bc76f93",
      "name": "Delete Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2096,
        1168
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/clients/delete",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "23309480-34e7-4900-8907-8f7508a09429",
      "name": "Delete Client Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -416,
        1072
      ],
      "webhookId": "ask-foreman-delete-client"
    },
    {
      "parameters": {
        "jsCode": "// Fixed file preparation with binary conversion for Azure upload\nconst inputData = $input.all()[0].json;\n\n// Handle both direct JSON and webhook body structure\nconst body = inputData.body || inputData;\n\n// Extract file data (base64 string)\nconst fileData = body.file || body.data || '';\nconst fileName = body.fileName || body.name || 'unknown.pdf';\nconst mimeType = body.mimeType || body.type || 'application/pdf';\nconst category = body.category || 'uncategorized';\nconst client = body.client || 'general';\nconst clientName = body.clientName || '';\n\n// Check if file data exists\nif (!fileData) {\n    throw new Error('No file data provided in upload request');\n}\n\n// Calculate approximate file size from base64\nconst base64Length = fileData.length;\nconst padding = (fileData.match(/=/g) || []).length;\nconst fileSize = Math.floor((base64Length * 3) / 4) - padding;\n\n// Determine if file is large (> 10MB)\nconst isLargeFile = fileSize > 10 * 1024 * 1024;\n\nconsole.log(`File: ${fileName}, Size: ${(fileSize / 1024 / 1024).toFixed(2)} MB, Large: ${isLargeFile}`);\n\n// Convert base64 to binary buffer for Azure upload\nconst buffer = Buffer.from(fileData, 'base64');\n\n// Return data with both JSON metadata and binary data\nreturn {\n    json: {\n        // Keep base64 for any nodes that need it\n        file: fileData,\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        fileSizeMB: (fileSize / 1024 / 1024).toFixed(2),\n        isLargeFile: isLargeFile,\n        uploadedAt: new Date().toISOString(),\n        // Azure blob URLs\n        originalBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-originalclients/${client}/${category}/${fileName}`,\n        processedBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-processedclients/${client}/${category}/${fileName}.jsonl`\n    },\n    binary: {\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileName.split('.').pop() || 'pdf'\n        }\n    }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        1072
      ],
      "id": "1dfa70c6-80d8-4f68-928a-15c99054ac54",
      "name": "Extract Delete Client Info"
    },
    {
      "parameters": {
        "content": "## Azure Search Index Schema \n\nIndex \"fcs-construction-docs-index-v2\" has ALL these fields:\n\n✅ AVAILABLE FIELDS:\n- id (Edm.String) - Key field\n- content (Edm.String) - Searchable text\n- contentVector (Collection) - For embeddings\n- client (Edm.String) - Searchable, Filterable\n- category (Edm.String) - Searchable, Filterable\n- fileName (Edm.String) - Searchable\n- uploadedAt (Edm.DateTimeOffset) - Filterable\n- blobPath (Edm.String) - Original file path\n- mimeType (Edm.String) - Filterable \n- convertedPath (Edm.String) \n- metadata (Edm.String) - Optional \n",
        "height": 472,
        "width": 528,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2784,
        1008
      ],
      "id": "f79add40-9748-4736-bbba-05b3c8a11027",
      "name": "Search Index Schema"
    },
    {
      "parameters": {
        "jsCode": "// Get the client info from the delete result\nconst deleteResult = $node[\"Process Delete Results\"].json;\nconst clientName = deleteResult.clientName;\nconst clientId = deleteResult.clientId;\n\n// Get search results with the actual fields from the index\nconst searchResults = $json.value || [];\n\nconsole.log(`Found ${searchResults.length} documents in search index for client: ${clientName}`);\n\n// If no documents found, return success without calling Azure Search\nif (searchResults.length === 0) {\n  console.log('No documents found to delete from search index');\n  \n  return [{\n    json: {\n      searchDeleteSkipped: true,\n      deletedCount: 0,\n      message: 'No documents in search index to delete',\n      status: 'success',\n      clientName: clientName,\n      clientId: clientId,\n      value: []\n    }\n  }];\n}\n\n// Log what we found\nsearchResults.slice(0, 5).forEach(doc => {\n  console.log(`  - Document: ${doc.id} (client: ${doc.client}, category: ${doc.category})`);\n});\n\n// If we have documents, prepare the delete payload using only the id field\nconst deleteActions = searchResults.map(doc => ({\n  \"@search.action\": \"delete\",\n  \"id\": doc.id  // Only need the id to delete\n}));\n\nconsole.log(`Prepared ${deleteActions.length} delete actions for client: ${clientName}`);\n\n// Return the delete actions to be processed by next node\nreturn [{\n  json: {\n    searchDeleteSkipped: false,\n    deleteActions: deleteActions,\n    deletedCount: deleteActions.length,\n    message: `Found ${deleteActions.length} documents to delete from search index`,\n    status: 'pending',\n    clientName: clientName,\n    clientId: clientId\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1408,
        1168
      ],
      "id": "eeba9c18-09da-4397-9c1a-86e3c20ff69f",
      "name": "Delete Found Documents"
    },
    {
      "parameters": {
        "content": "## Index Operations",
        "height": 992,
        "width": 1488,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1232,
        1440
      ],
      "id": "8db8bdb8-c724-45d6-b9cc-cc7b6ae97cf0",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/index/delete",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "58d0a56c-3eaa-4de2-b640-1f9011f24f73",
      "name": "Delete Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        1328,
        1904
      ],
      "webhookId": "c3a8c414-ea0d-41a8-b056-7903c294ce5f"
    },
    {
      "parameters": {
        "jsCode": "const body = $json.body || $json;\nconst documentIds = body.documentIds || [];\n\nconst batch = {\n  value: documentIds.map(id => ({\n    '@search.action': 'delete',\n    id: id\n  }))\n};\n\nreturn batch;"
      },
      "id": "a14cbe4a-effc-4c40-9fc1-e0a6e9bd4998",
      "name": "Prepare Delete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1536,
        1904
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "1eebfd38-ea9d-4559-911d-41b4dfc63918",
      "name": "Delete Docs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1728,
        1904
      ]
    },
    {
      "parameters": {
        "jsCode": "return {\n  success: true,\n  deletedCount: $json.value ? $json.value.length : 0\n};"
      },
      "id": "8d0ea7e3-30c5-4697-8e56-cd1d5c874c15",
      "name": "Format Delete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1936,
        1904
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "2218ce71-1cd4-4edf-ae46-4468247967a5",
      "name": "Respond Delete",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2128,
        1904
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/index/clear",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "6d3cc3f9-e877-4fbb-aa91-250a713b329c",
      "name": "Clear Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        1328,
        2112
      ],
      "webhookId": "39ad35d7-c009-404b-b651-b35061acd4e6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\"search\": \"*\", \"top\": 1000, \"select\": \"id\"}",
        "options": {}
      },
      "id": "311211fa-3b3b-4b92-8162-2134a9bfe50e",
      "name": "Get All IDs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1536,
        2112
      ]
    },
    {
      "parameters": {
        "jsCode": "const documents = $json.value || [];\n\nif (documents.length === 0) {\n  return {\n    success: true,\n    deletedCount: 0,\n    message: \"Index is already empty\",\n    skip: true\n  };\n}\n\nconst batch = {\n  value: documents.map(doc => ({\n    '@search.action': 'delete',\n    id: doc.id\n  }))\n};\n\nreturn {\n  batch: batch,\n  count: documents.length,\n  skip: false\n};"
      },
      "id": "457944f2-f119-4715-a21c-37d8e9221f13",
      "name": "Prepare Clear",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1728,
        2112
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.skip }}",
              "operation": "notEqual",
              "value2": true
            }
          ]
        }
      },
      "id": "0ddd1bf7-101a-4d98-9efc-913152dc3d43",
      "name": "IF Has Docs",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1936,
        2112
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.batch) }}",
        "options": {}
      },
      "id": "4941390f-4ab1-4937-9b95-241140494c60",
      "name": "Delete All",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2128,
        2064
      ]
    },
    {
      "parameters": {
        "jsCode": "const count = $('clear-prepare').first().json.count || 0;\nreturn {\n  success: true,\n  deletedCount: count,\n  message: `Cleared ${count} documents from index`\n};"
      },
      "id": "e34d402c-6dd0-4daa-8708-bfd32abfb17f",
      "name": "Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        2128
      ]
    },
    {
      "parameters": {
        "jsCode": "return $json;"
      },
      "id": "f0c3afe3-f39d-4a0d-b071-02395e944045",
      "name": "Empty Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2128,
        2272
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c716fa87-d83e-4cdb-aa11-4c3009b60e68",
      "name": "Respond Clear",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2528,
        2128
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/index/search",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "e4677370-574a-4697-bf68-b65101cfea46",
      "name": "Search Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        1328,
        1712
      ],
      "webhookId": "ed6978ec-31e1-4eb6-9d0e-9b2c9f7d2894"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.body) }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "425778cf-d0c4-4532-bd2a-387957a6d6be",
      "name": "Azure Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1536,
        1712
      ]
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "73eee353-2b67-4a5e-83f6-62fe63a95a5b",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1728,
        1712
      ]
    },
    {
      "parameters": {
        "path": "ask-foreman/index/stats",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "id": "416b0b94-a0ef-4137-a24a-ba138885d153",
      "name": "Stats Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        1328,
        1520
      ],
      "webhookId": "d0cd3870-062a-4f9a-8a24-d27ad90f9d41"
    },
    {
      "parameters": {
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/stats?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "254a7434-ab9b-40d2-be04-a31f963a9791",
      "name": "Azure Stats",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1536,
        1520
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "5824b774-352b-4aa5-8f49-6c8140c44f23",
      "name": "Respond Stats",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1728,
        1520
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/files/delete",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": true
        }
      },
      "id": "7cd34fb4-ab20-4473-8842-052973c4d412",
      "name": "Delete File Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -432,
        1552
      ],
      "webhookId": "ask-foreman-delete-file"
    },
    {
      "parameters": {
        "jsCode": "// Universal \"Prepare File Data\" node code for n8n\n// Handles multiple possible webhook data structures\n\nconst inputItem = $input.first();\n\n// Initialize variables\nlet fileData = null;\nlet fileName = 'document.pdf';\nlet mimeType = 'application/pdf';\nlet category = 'uncategorized';\nlet client = 'general';\nlet clientName = 'general';\n\nconsole.log('=== Prepare File Data - Universal Handler ===');\n\n// Strategy 1: Check if data comes from a previous node (like Check File Size)\nif (inputItem.json && inputItem.json.fileBase64) {\n    console.log('Found fileBase64 from previous node');\n    fileData = inputItem.json.fileBase64;\n    fileName = inputItem.json.fileName || fileName;\n    mimeType = inputItem.json.mimeType || mimeType;\n    category = inputItem.json.category || category;\n    client = inputItem.json.client || client;\n    clientName = inputItem.json.clientName || clientName;\n}\n// Strategy 2: Check if data is directly in json\nelse if (inputItem.json && inputItem.json.file) {\n    console.log('Found file in json root');\n    fileData = inputItem.json.file;\n    fileName = inputItem.json.fileName || fileName;\n    mimeType = inputItem.json.mimeType || mimeType;\n    category = inputItem.json.category || category;\n    client = inputItem.json.client || client;\n    clientName = inputItem.json.clientName || clientName;\n}\n// Strategy 3: Check if data is in json.body (webhook with body)\nelse if (inputItem.json && inputItem.json.body) {\n    console.log('Found body in json, checking for file data');\n    let body = inputItem.json.body;\n    \n    // Parse if body is a string\n    if (typeof body === 'string') {\n        try {\n            body = JSON.parse(body);\n        } catch (e) {\n            console.error('Failed to parse body string');\n        }\n    }\n    \n    if (body && typeof body === 'object') {\n        fileData = body.file || body.fileBase64 || null;\n        fileName = body.fileName || fileName;\n        mimeType = body.mimeType || mimeType;\n        category = body.category || category;\n        client = body.client || client;\n        clientName = body.clientName || clientName;\n    }\n}\n// Strategy 4: Check if we already have binary data from webhook\nelse if (inputItem.binary && Object.keys(inputItem.binary).length > 0) {\n    console.log('Found existing binary data from webhook');\n    const binaryKey = Object.keys(inputItem.binary)[0];\n    const binaryItem = inputItem.binary[binaryKey];\n    \n    // We already have binary, just pass it through with metadata\n    return {\n        json: {\n            fileName: binaryItem.fileName || fileName,\n            mimeType: binaryItem.mimeType || mimeType,\n            category: inputItem.json?.category || category,\n            client: inputItem.json?.client || client,\n            clientName: inputItem.json?.clientName || client,\n            fileSize: binaryItem.data ? binaryItem.data.length : 0,\n            uploadedAt: new Date().toISOString()\n        },\n        binary: inputItem.binary\n    };\n}\n\n// Validate we found file data\nif (!fileData) {\n    console.error('ERROR: No file data found in any expected location');\n    console.error('Input structure:');\n    console.error('- Has json:', !!inputItem.json);\n    console.error('- Has binary:', !!inputItem.binary);\n    if (inputItem.json) {\n        console.error('- JSON keys:', Object.keys(inputItem.json));\n        console.error('- JSON sample:', JSON.stringify(inputItem.json).substring(0, 500));\n    }\n    throw new Error('No file data found in webhook request - check webhook configuration');\n}\n\n// Calculate file size and convert to binary\nlet fileSize;\nlet buffer;\n\n// Check if fileData is already a buffer\nif (Buffer.isBuffer(fileData)) {\n    console.log('File data is already a buffer');\n    buffer = fileData;\n    fileSize = buffer.length;\n} else if (typeof fileData === 'string') {\n    console.log('File data is base64 string, converting to buffer');\n    // It's a base64 string\n    buffer = Buffer.from(fileData, 'base64');\n    fileSize = buffer.length;\n} else {\n    console.error('Unknown file data type:', typeof fileData);\n    throw new Error('File data is neither a buffer nor a base64 string');\n}\n\n// Get file extension\nconst fileExtension = fileName.split('.').pop() || 'pdf';\n\nconsole.log(`✅ File prepared successfully:`);\nconsole.log(`   - Name: ${fileName}`);\nconsole.log(`   - Size: ${(fileSize / 1024).toFixed(2)} KB`);\nconsole.log(`   - Type: ${mimeType}`);\nconsole.log(`   - Client: ${client}/${clientName}`);\nconsole.log(`   - Category: ${category}`);\n\n// Return both JSON metadata and binary data\nreturn {\n    json: {\n        // Metadata for all downstream nodes\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: fileSize > 10 * 1024 * 1024,\n        uploadedAt: new Date().toISOString(),\n        // Keep base64 for nodes that need it\n        fileBase64: typeof fileData === 'string' ? fileData : buffer.toString('base64')\n    },\n    binary: {\n        // Binary data for Azure upload - using 'data' as the standard field name\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileExtension\n        }\n    }\n};\n"
      },
      "id": "11712c53-e0ba-4f40-8561-96905ae8b285",
      "name": "Extract Delete Parameters",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        1552
      ]
    },
    {
      "parameters": {
        "jsCode": "// Fixed file size check with proper data extraction\nconst inputData = $input.all()[0].json;\n\n// Handle both direct JSON and webhook body structure\nconst body = inputData.body || inputData;\n\n// Extract file data (base64 string)\nconst fileData = body.file || body.data || '';\nconst fileName = body.fileName || body.name || 'unknown.pdf';\nconst mimeType = body.mimeType || body.type || 'application/pdf';\nconst category = body.category || 'uncategorized';\nconst client = body.client || 'general';\nconst clientName = body.clientName || '';\n\n// Check if file data exists\nif (!fileData) {\n    throw new Error('No file data provided in upload request');\n}\n\n// Calculate approximate file size from base64\n// Base64 increases size by ~33%, so we reverse calculate\nconst base64Length = fileData.length;\nconst padding = (fileData.match(/=/g) || []).length;\nconst fileSize = Math.floor((base64Length * 3) / 4) - padding;\n\n// Determine if file is large (> 10MB)\nconst isLargeFile = fileSize > 10 * 1024 * 1024;\n\nconsole.log(`File: ${fileName}, Size: ${(fileSize / 1024).toFixed(2)} KB, Large: ${isLargeFile}`);\n\n// Return data for next nodes\nreturn {\n    json: {\n        file: fileData,\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: isLargeFile,\n        uploadedAt: new Date().toISOString()\n    }\n};"
      },
      "id": "34d4567b-e745-48a8-80bf-b8f0b7140592",
      "name": "Prepare Index Delete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        1552
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.indexDeleteSkipped }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "591e2dfe-866c-4d75-8c27-53f7f9b1ef80",
      "name": "Should Delete from Index?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        176,
        1824
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.deletePayload) }}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "68434f17-f7f6-4903-945e-bd8c75ab8dc5",
      "name": "Delete from Search Index",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        576,
        1488
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $node['Extract Delete Parameters'].json.originalPath }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "59095fad-170b-48d7-8cf8-199a99e050ce",
      "name": "Delete Original File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        576,
        1664
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $node['Extract Delete Parameters'].json.convertedPath }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "e3aa8dc0-399d-4304-8314-98b71a2f3b19",
      "name": "Delete Converted File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        576,
        1856
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $node['Extract Delete Parameters'].json.metadataPath }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "d52e4b98-f79d-4114-8ac7-3dd6a63df3bd",
      "name": "Delete Metadata File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        576,
        2032
      ]
    },
    {
      "parameters": {
        "jsCode": "// Optimized chunking with memory management\nconst content = $input.item.json.convertedContent || $input.item.json.content;\nconst CHUNK_SIZE = 1000; // Characters per chunk\nconst CHUNK_OVERLAP = 200; // Overlap between chunks\n\nlet chunks = [];\nlet text = '';\n\ntry {\n  // Parse content if it's JSON\n  if (typeof content === 'string') {\n    try {\n      const parsed = JSON.parse(content);\n      text = parsed.content || parsed.text || JSON.stringify(parsed);\n    } catch {\n      text = content;\n    }\n  } else {\n    text = JSON.stringify(content);\n  }\n  \n  // Create overlapping chunks with memory efficiency\n  for (let i = 0; i < text.length; i += (CHUNK_SIZE - CHUNK_OVERLAP)) {\n    const chunk = text.slice(i, Math.min(i + CHUNK_SIZE, text.length));\n    if (chunk.trim()) {\n      chunks.push({\n        id: `${$input.item.json.client}_${$input.item.json.fileName}_chunk_${chunks.length}`,\n        content: chunk,\n        index: chunks.length,\n        client: $input.item.json.client,\n        clientName: $input.item.json.clientName,\n        category: $input.item.json.category,\n        fileName: $input.item.json.fileName,\n        chunkOf: $input.item.json.fileName,\n        totalChunks: 0 // Will be updated\n      });\n    }\n    \n    // Free memory periodically\n    if (chunks.length % 50 === 0) {\n      global.gc && global.gc();\n    }\n  }\n  \n  // Update total chunks count\n  chunks = chunks.map(chunk => ({\n    ...chunk,\n    totalChunks: chunks.length\n  }));\n  \n} catch (error) {\n  // Fallback for error cases\n  chunks = [{\n    id: `${$input.item.json.client}_${$input.item.json.fileName}_chunk_0`,\n    content: 'Error processing document: ' + error.message,\n    index: 0,\n    client: $input.item.json.client,\n    clientName: $input.item.json.clientName,\n    category: $input.item.json.category,\n    fileName: $input.item.json.fileName,\n    error: error.message\n  }];\n}\n\nreturn chunks.map(chunk => ({ json: chunk }));"
      },
      "id": "c6550f5f-85f8-4944-800b-bbad99442b91",
      "name": "Consolidate Delete Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        1760
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "e4c10a1b-6356-4ce4-8b2e-85ef3d3ba64b",
      "name": "Delete Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1008,
        1760
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"search\": \"*\",\n  \"filter\": \"parentDocumentId eq '{{ $json.parentDocumentId }}' or (fileName eq '{{ $json.fileName }}' and client eq '{{ $json.clientName }}')\",\n  \"select\": \"id,fileName,client,parentDocumentId,chunkIndex\",\n  \"top\": 1000\n}",
        "options": {}
      },
      "id": "c7b8aea9-0111-47f0-ba37-4eb513e39126",
      "name": "Find Documents to Delete1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -16,
        1552
      ]
    },
    {
      "parameters": {
        "content": "## Upload and Convert Data\n",
        "height": 384,
        "width": 3472,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -528,
        608
      ],
      "id": "a553b953-e57c-4965-8476-75fc657d7143",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.indexPayload }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "52a475db-0278-4aba-8f32-f2d3a6360b63",
      "name": "Index Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2016,
        704
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "0a1af7a2-a93f-4d78-b370-21ff13990790",
      "name": "Upload Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2736,
        640
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare success response\nconst chunks = $input.all();\nconst firstChunk = chunks[0]?.json || {};\n\nreturn {\n    json: {\n        success: true,\n        message: \"Document processed successfully\",\n        details: {\n            fileName: firstChunk.fileName || 'unknown',\n            client: firstChunk.client || 'general',\n            category: firstChunk.category || 'uncategorized',\n            chunksProcessed: chunks.length,\n            timestamp: new Date().toISOString()\n        }\n    }\n};"
      },
      "id": "c1f02f3e-87c3-4ce9-8834-d58a123c50ee",
      "name": "Prepare Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2512,
        848
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Optimized chunking with memory management\nconst content = $input.item.json.convertedContent || $input.item.json.content;\nconst CHUNK_SIZE = 1000; // Characters per chunk\nconst CHUNK_OVERLAP = 200; // Overlap between chunks\n\nlet chunks = [];\nlet text = '';\n\ntry {\n  // Parse content if it's JSON\n  if (typeof content === 'string') {\n    try {\n      const parsed = JSON.parse(content);\n      text = parsed.content || parsed.text || JSON.stringify(parsed);\n    } catch {\n      text = content;\n    }\n  } else {\n    text = JSON.stringify(content);\n  }\n  \n  // Create overlapping chunks with memory efficiency\n  for (let i = 0; i < text.length; i += (CHUNK_SIZE - CHUNK_OVERLAP)) {\n    const chunk = text.slice(i, Math.min(i + CHUNK_SIZE, text.length));\n    if (chunk.trim()) {\n      chunks.push({\n        id: `${$input.item.json.client}_${$input.item.json.fileName}_chunk_${chunks.length}`,\n        content: chunk,\n        index: chunks.length,\n        client: $input.item.json.client,\n        clientName: $input.item.json.clientName,\n        category: $input.item.json.category,\n        fileName: $input.item.json.fileName,\n        chunkOf: $input.item.json.fileName,\n        totalChunks: 0 // Will be updated\n      });\n    }\n    \n    // Free memory periodically\n    if (chunks.length % 50 === 0) {\n      global.gc && global.gc();\n    }\n  }\n  \n  // Update total chunks count\n  chunks = chunks.map(chunk => ({\n    ...chunk,\n    totalChunks: chunks.length\n  }));\n  \n} catch (error) {\n  // Fallback for error cases\n  chunks = [{\n    id: `${$input.item.json.client}_${$input.item.json.fileName}_chunk_0`,\n    content: 'Error processing document: ' + error.message,\n    index: 0,\n    client: $input.item.json.client,\n    clientName: $input.item.json.clientName,\n    category: $input.item.json.category,\n    fileName: $input.item.json.fileName,\n    error: error.message\n  }];\n}\n\nreturn chunks.map(chunk => ({ json: chunk }));"
      },
      "id": "65703025-595a-4ef5-ab3e-e48623ec2aed",
      "name": "Merge Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        848
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.skipIndex }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1bad6d94-c0f8-4f78-9e74-41c75d40513d",
      "name": "Should Index?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1824,
        832
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced duplicate check handler\nconst searchResults = $input.all()[0].json;\nconst chunkData = $node[\"Process and Chunk Document\"]?.json || $json;\n\n// Check for duplicates\nlet isDuplicate = false;\nlet existingDocId = null;\n\ntry {\n    if (searchResults && searchResults.value && Array.isArray(searchResults.value)) {\n        isDuplicate = searchResults.value.length > 0;\n        if (isDuplicate) {\n            existingDocId = searchResults.value[0].id;\n            console.log(`Duplicate found for ${chunkData.fileName} chunk ${chunkData.chunkIndex}: ${existingDocId}`);\n        }\n    }\n} catch (error) {\n    console.log('Error checking duplicates:', error.message);\n    isDuplicate = false;\n}\n\n// Pass through all the chunk data with duplicate flag\nconst outputData = {\n    ...chunkData,\n    isDuplicate: isDuplicate,\n    existingDocId: existingDocId,\n    shouldIndex: !isDuplicate,\n    // Ensure critical fields are present\n    parentDocumentId: chunkData.parentDocumentId || chunkData.fileName || '',\n    chunkIndex: typeof chunkData.chunkIndex === 'number' ? chunkData.chunkIndex : 0,\n    fileName: chunkData.fileName || 'unknown'\n};\n\n// Log what we're doing\nif (isDuplicate) {\n    console.log(`Skipping duplicate: ${outputData.fileName} chunk ${outputData.chunkIndex}`);\n} else {\n    console.log(`Will index: ${outputData.fileName} chunk ${outputData.chunkIndex}`);\n}\n\nreturn { json: outputData };"
      },
      "id": "70fa98ae-e3f0-49c8-a255-aa9bd64bb996",
      "name": "Handle Duplicate Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1632,
        832
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ \n                            (() => {\n                                const parentDoc = $json.parentDocumentId || $json.fileName || 'unknown';\n                                const chunkIdx = typeof $json.chunkIndex === 'number' ? $json.chunkIndex : 0;\n                                \n                                let filter = \"parentDocumentId eq '\" + parentDoc + \"' and chunkIndex eq \" + chunkIdx;\n                                \n                                return JSON.stringify({\n                                    \"search\": \"*\",\n                                    \"filter\": filter,\n                                    \"top\": 1,\n                                    \"select\": \"id,fileName,parentDocumentId,chunkIndex\"\n                                });\n                            })()\n                        }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "05362a6d-4f0b-47a3-9f5e-2ca58a66ca49",
      "name": "Check for Duplicates",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1424,
        832
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Prepare document for Azure Search indexing\nconst inputData = $input.all()[0].json;\nconst embeddings = inputData.data?.[0]?.embedding || inputData.embeddings || [];\n\nconst indexDocument = {\n    \"@search.action\": \"upload\",\n    id: inputData.id || `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    content: inputData.content || '',\n    contentVector: embeddings.length === 1536 ? embeddings : undefined,\n    fileName: inputData.fileName || 'unknown',\n    client: inputData.client || 'general',\n    clientName: inputData.clientName || '',\n    category: inputData.category || 'uncategorized',\n    parentDocumentId: inputData.parentDocumentId || inputData.fileName || '',\n    chunkIndex: typeof inputData.chunkIndex === 'number' ? inputData.chunkIndex : 0,\n    totalChunks: inputData.totalChunks || 1,\n    uploadedAt: inputData.uploadedAt || new Date().toISOString(),\n    blobPath: inputData.blobPath || '',\n    convertedPath: inputData.convertedPath || '',\n    mimeType: inputData.mimeType || 'text/plain',\n    metadata: typeof inputData.metadata === 'string' ? inputData.metadata : JSON.stringify(inputData.metadata || {})\n};\n\n// Remove undefined fields\nObject.keys(indexDocument).forEach(key => {\n    if (indexDocument[key] === undefined) {\n        delete indexDocument[key];\n    }\n});\n\nconsole.log(`Indexing document: ${indexDocument.fileName} chunk ${indexDocument.chunkIndex}`);\n\nreturn {\n    json: {\n        value: [indexDocument]\n    }\n};"
      },
      "id": "168f83cf-9b0a-4c6b-abce-8a776ada1ad2",
      "name": "Prepare Search Index",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1216,
        832
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://saxtechopenai.openai.azure.com/openai/deployments/text-embedding-ada-002/embeddings?api-version=2023-05-15",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "9NjdW7IV9g0nnd6qOfz5D2vxyfuyyEBrMx618DclXhPeISBvfcHHJQQJ99BHACHYHv6XJ3w3AAABACOGPfCS"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ \"input\": $json.content, \"model\": \"text-embedding-ada-002\" }) }}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 3,
              "batchInterval": 2000
            }
          },
          "timeout": 30000
        }
      },
      "id": "c4f2b969-b400-4c3c-8546-9268eeae325e",
      "name": "Generate Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        832
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Complete chunking with metadata preservation\nconst inputData = $input.all()[0].json;\n\n// Extract metadata from webhook body or direct json\nconst body = inputData.body || inputData;\nconst fileName = body.fileName || 'document_' + Date.now() + '.pdf';\nconst client = body.client || 'general';\nconst clientName = body.clientName || '';\nconst category = body.category || 'uncategorized';\n\n// Get content - for now we'll simulate PDF conversion\n// In production, you'd need a proper PDF converter node before this\nconst content = inputData.convertedContent || inputData.content || `\nSample content from PDF: ${fileName}\nClient: ${clientName}\nCategory: ${category}\nThis is test content for the construction document.\nPaint specifications: 2500 sq ft\nMaterials: Premium grade paint\nLabor: 40 hours estimated\n`;\n\nconst CHUNK_SIZE = 1500;\nconst CHUNK_OVERLAP = 200;\n\nlet chunks = [];\nlet text = typeof content === 'string' ? content : JSON.stringify(content);\n\nconsole.log(`Processing file: ${fileName} for client: ${client}`);\n\n// Create chunks\nif (!text || text.length < CHUNK_SIZE) {\n    chunks.push({\n        id: `${client}_${fileName.replace(/[^a-zA-Z0-9]/g, '_')}_chunk_0`,\n        content: text || 'Document content pending conversion',\n        parentDocumentId: fileName,\n        chunkIndex: 0,\n        totalChunks: 1,\n        client: client,\n        clientName: clientName,\n        category: category,\n        fileName: fileName,\n        uploadedAt: new Date().toISOString(),\n        blobPath: `FCS-OriginalClients/${client}/${category}/${fileName}`,\n        mimeType: body.mimeType || 'application/pdf',\n        metadata: {\n            originalFileName: fileName,\n            uploadSource: 'webhook',\n            processedAt: new Date().toISOString()\n        }\n    });\n} else {\n    for (let i = 0; i < text.length; i += (CHUNK_SIZE - CHUNK_OVERLAP)) {\n        const chunk = text.slice(i, Math.min(i + CHUNK_SIZE, text.length));\n        if (chunk.trim()) {\n            chunks.push({\n                id: `${client}_${fileName.replace(/[^a-zA-Z0-9]/g, '_')}_chunk_${chunks.length}`,\n                content: chunk,\n                parentDocumentId: fileName,\n                chunkIndex: chunks.length,\n                totalChunks: 0,\n                client: client,\n                clientName: clientName,\n                category: category,\n                fileName: fileName,\n                uploadedAt: new Date().toISOString(),\n                blobPath: `FCS-OriginalClients/${client}/${category}/${fileName}`,\n                mimeType: body.mimeType || 'application/pdf',\n                metadata: {\n                    originalFileName: fileName,\n                    uploadSource: 'webhook',\n                    processedAt: new Date().toISOString()\n                }\n            });\n        }\n    }\n    \n    // Update total chunks\n    chunks = chunks.map(chunk => ({\n        ...chunk,\n        totalChunks: chunks.length\n    }));\n}\n\nconsole.log(`Created ${chunks.length} chunks for ${fileName}`);\n\nreturn chunks.map(chunk => ({ json: chunk }));"
      },
      "id": "163db59c-be98-414f-95f4-649d7174c747",
      "name": "Process and Chunk Document",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        640
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://saxtech-docconverter.azurewebsites.net/api/ConvertDocument?code=KRitpiKC4_teemeHVrLWt8-vJdIvpSkzBFW0co3J4Q3FAzFuYbOMng==",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"BlobUrl\": \"{{ $json.originalBlobUrl.split('?')[0] }}\",\n  \"FileName\": \"{{ $json.uniqueFileName }}\",\n  \"MimeType\": \"{{ $json.mimeType }}\",\n  \"client\": \"{{ $json.client }}\",\n  \"category\": \"{{ $json.categoryFolder }}\"\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "49e7072a-f45f-43a8-b8d0-16aa8b64bc6c",
      "name": "Convert Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        608,
        736
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $json.originalBlobUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "Content-Type",
              "value": "={{ $json.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "={{ $json.data }}",
        "options": {
          "timeout": 300000
        }
      },
      "id": "968e1386-e1c9-490b-a0d0-fdc880f51a3c",
      "name": "Upload Large to Azure",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        400,
        848
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ \"https://saxtechfcs.blob.core.windows.net/fcs-clients/FCS-OriginalClients/\" + ($json.body?.client || $json.client || \"general\") + \"/\" + ($json.body?.category || $json.category || \"uncategorized\") + \"/\" + ($json.body?.fileName || $json.fileName || \"document.pdf\") + \"?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D\" }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "Content-Type",
              "value": "={{ $json.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "={{ $json.binaryFieldName }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "30a301ae-c9f5-44b3-8c8f-bf3c2d292e4e",
      "name": "Upload Original to Azure",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        400,
        656
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Fixed Check File Size node code for n8n\n// This code properly handles the JSON structure from the webhook\n// Get the webhook data\nconst webhookData = $input.first().json;\nconsole.log('Webhook data structure:', JSON.stringify(Object.keys(webhookData)));\n// The file data comes in webhookData.body.file (base64 string)\nlet fileData = null;\nlet fileName = 'unknown.pdf';\nlet mimeType = 'application/pdf';\nlet client = 'Unknown';\nlet category = 'general';\n// Extract file data from the webhook body\nif (webhookData.body) {\n  console.log('Found body in webhook data');\n  \n  // Extract the base64 file data\n  if (webhookData.body.file) {\n    fileData = webhookData.body.file;\n    console.log('Found file data, length:', fileData.length);\n  }\n  \n  // Extract metadata\n  if (webhookData.body.fileName) {\n    fileName = webhookData.body.fileName;\n  }\n  if (webhookData.body.mimeType) {\n    mimeType = webhookData.body.mimeType;\n  }\n  if (webhookData.body.client) {\n    client = webhookData.body.client;\n  }\n  if (webhookData.body.category) {\n    category = webhookData.body.category;\n  }\n} else if (webhookData.file) {\n  // Fallback: direct file property\n  console.log('Found file directly in webhook data');\n  fileData = webhookData.file;\n}\n// Check if we have file data\nif (!fileData) {\n  throw new Error('No file data found in webhook request');\n}\n// Calculate file size from base64\nconst base64Length = fileData.length;\nconst padding = (fileData.match(/=/g) || []).length;\nconst fileSizeBytes = Math.floor((base64Length * 3) / 4) - padding;\nconst fileSizeMB = (fileSizeBytes / (1024 * 1024)).toFixed(2);\nconsole.log(`File size: ${fileSizeBytes} bytes (${fileSizeMB} MB)`);\nconsole.log(`File name: ${fileName}`);\nconsole.log(`Client: ${client}`);\nconsole.log(`Category: ${category}`);\n// Check file size limit (30MB)\nconst MAX_SIZE_MB = 30;\nif (fileSizeMB > MAX_SIZE_MB) {\n  throw new Error(`File size (${fileSizeMB} MB) exceeds maximum allowed size of ${MAX_SIZE_MB} MB`);\n}\n// Return the processed data for next nodes\nreturn {\n  json: {\n    file: fileData,\n    fileName: fileName,\n    mimeType: mimeType,\n    client: client,\n    category: category,\n    fileSizeBytes: fileSizeBytes,\n    fileSizeMB: parseFloat(fileSizeMB),\n    originalBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-originalclients/${client}/${category}/${fileName}`,\n    processedBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-processedclients/${client}/${category}/${fileName}.jsonl`,\n    uniqueFileName: fileName,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "3029f8fb-7428-4680-8319-9317ef340704",
      "name": "Prepare Large File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        848
      ]
    },
    {
      "parameters": {
        "jsCode": "// Universal \"Prepare File Data\" node code for n8n\n// Handles multiple possible webhook data structures\n\nconst inputItem = $input.first();\n\n// Initialize variables\nlet fileData = null;\nlet fileName = 'document.pdf';\nlet mimeType = 'application/pdf';\nlet category = 'uncategorized';\nlet client = 'general';\nlet clientName = 'general';\n\nconsole.log('=== Prepare File Data - Universal Handler ===');\n\n// Strategy 1: Check if data comes from a previous node (like Check File Size)\nif (inputItem.json && inputItem.json.fileBase64) {\n    console.log('Found fileBase64 from previous node');\n    fileData = inputItem.json.fileBase64;\n    fileName = inputItem.json.fileName || fileName;\n    mimeType = inputItem.json.mimeType || mimeType;\n    category = inputItem.json.category || category;\n    client = inputItem.json.client || client;\n    clientName = inputItem.json.clientName || clientName;\n}\n// Strategy 2: Check if data is directly in json\nelse if (inputItem.json && inputItem.json.file) {\n    console.log('Found file in json root');\n    fileData = inputItem.json.file;\n    fileName = inputItem.json.fileName || fileName;\n    mimeType = inputItem.json.mimeType || mimeType;\n    category = inputItem.json.category || category;\n    client = inputItem.json.client || client;\n    clientName = inputItem.json.clientName || clientName;\n}\n// Strategy 3: Check if data is in json.body (webhook with body)\nelse if (inputItem.json && inputItem.json.body) {\n    console.log('Found body in json, checking for file data');\n    let body = inputItem.json.body;\n    \n    // Parse if body is a string\n    if (typeof body === 'string') {\n        try {\n            body = JSON.parse(body);\n        } catch (e) {\n            console.error('Failed to parse body string');\n        }\n    }\n    \n    if (body && typeof body === 'object') {\n        fileData = body.file || body.fileBase64 || null;\n        fileName = body.fileName || fileName;\n        mimeType = body.mimeType || mimeType;\n        category = body.category || category;\n        client = body.client || client;\n        clientName = body.clientName || clientName;\n    }\n}\n// Strategy 4: Check if we already have binary data from webhook\nelse if (inputItem.binary && Object.keys(inputItem.binary).length > 0) {\n    console.log('Found existing binary data from webhook');\n    const binaryKey = Object.keys(inputItem.binary)[0];\n    const binaryItem = inputItem.binary[binaryKey];\n    \n    // We already have binary, just pass it through with metadata\n    return {\n        json: {\n            fileName: binaryItem.fileName || fileName,\n            mimeType: binaryItem.mimeType || mimeType,\n            category: inputItem.json?.category || category,\n            client: inputItem.json?.client || client,\n            clientName: inputItem.json?.clientName || client,\n            fileSize: binaryItem.data ? binaryItem.data.length : 0,\n            uploadedAt: new Date().toISOString()\n        },\n        binary: inputItem.binary\n    };\n}\n\n// Validate we found file data\nif (!fileData) {\n    console.error('ERROR: No file data found in any expected location');\n    console.error('Input structure:');\n    console.error('- Has json:', !!inputItem.json);\n    console.error('- Has binary:', !!inputItem.binary);\n    if (inputItem.json) {\n        console.error('- JSON keys:', Object.keys(inputItem.json));\n        console.error('- JSON sample:', JSON.stringify(inputItem.json).substring(0, 500));\n    }\n    throw new Error('No file data found in webhook request - check webhook configuration');\n}\n\n// Calculate file size and convert to binary\nlet fileSize;\nlet buffer;\n\n// Check if fileData is already a buffer\nif (Buffer.isBuffer(fileData)) {\n    console.log('File data is already a buffer');\n    buffer = fileData;\n    fileSize = buffer.length;\n} else if (typeof fileData === 'string') {\n    console.log('File data is base64 string, converting to buffer');\n    // It's a base64 string\n    buffer = Buffer.from(fileData, 'base64');\n    fileSize = buffer.length;\n} else {\n    console.error('Unknown file data type:', typeof fileData);\n    throw new Error('File data is neither a buffer nor a base64 string');\n}\n\n// Get file extension\nconst fileExtension = fileName.split('.').pop() || 'pdf';\n\nconsole.log(`✅ File prepared successfully:`);\nconsole.log(`   - Name: ${fileName}`);\nconsole.log(`   - Size: ${(fileSize / 1024).toFixed(2)} KB`);\nconsole.log(`   - Type: ${mimeType}`);\nconsole.log(`   - Client: ${client}/${clientName}`);\nconsole.log(`   - Category: ${category}`);\n\n// Return both JSON metadata and binary data\nreturn {\n    json: {\n        // Metadata for all downstream nodes\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: fileSize > 10 * 1024 * 1024,\n        uploadedAt: new Date().toISOString(),\n        // Keep base64 for nodes that need it\n        fileBase64: typeof fileData === 'string' ? fileData : buffer.toString('base64')\n    },\n    binary: {\n        // Binary data for Azure upload - using 'data' as the standard field name\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileExtension\n        }\n    }\n};\n"
      },
      "id": "e15173b9-959c-4d8a-8629-8d14bd0bef2f",
      "name": "Prepare File Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        656
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.isLargeFile }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "67aa7b3c-80a8-44d7-a8f2-b7f70895acc2",
      "name": "Router File Size",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -16,
        736
      ]
    },
    {
      "parameters": {
        "jsCode": "// Fixed \"Check File Size\" node code for n8n\n// This version properly handles base64 JSON uploads and converts to binary for Azure upload\n\nconst inputData = $input.all()[0];\n\n// Initialize variables\nlet fileData = '';\nlet fileName = '';\nlet mimeType = '';\nlet category = '';\nlet client = '';\nlet clientName = '';\n\n// When a webhook receives JSON with Content-Type: application/json,\n// n8n typically puts the data in inputData.json\nconst json = inputData.json || {};\n\n// Debug logging to see structure\nconsole.log('Input structure keys:', Object.keys(inputData));\nconsole.log('JSON keys:', Object.keys(json));\n\n// The webhook likely wraps our data in a 'body' property\n// Try to extract from most likely location first\nif (json.body) {\n    // Parse body if it's a string\n    const body = typeof json.body === 'string' ? JSON.parse(json.body) : json.body;\n    \n    fileData = body.file || '';\n    fileName = body.fileName || 'document.pdf';\n    mimeType = body.mimeType || 'application/pdf';\n    category = body.category || 'uncategorized';\n    client = body.client || 'general';\n    clientName = body.clientName || client;\n    \n    console.log('Extracted from json.body - Client:', client, 'Category:', category);\n} else {\n    // Direct properties on json (fallback)\n    fileData = json.file || '';\n    fileName = json.fileName || 'document.pdf';\n    mimeType = json.mimeType || 'application/pdf';\n    category = json.category || 'uncategorized';\n    client = json.client || 'general';\n    clientName = json.clientName || client;\n    \n    console.log('Extracted from direct json - Client:', client, 'Category:', category);\n}\n\n// Validate we have file data\nif (!fileData) {\n    console.error('No file data found in:', JSON.stringify(json).substring(0, 500));\n    throw new Error('No file data found in upload request');\n}\n\n// Convert base64 to binary buffer\nconst buffer = Buffer.from(fileData, 'base64');\n\n// Calculate file size from buffer\nconst fileSize = buffer.length;\n\n// Determine if file is large (> 10MB)\nconst isLargeFile = fileSize > 10 * 1024 * 1024;\n\nconsole.log(`✅ Processing: ${fileName}, Size: ${(fileSize / 1024).toFixed(2)} KB, Client: ${client}, Category: ${category}`);\n\n// Get file extension\nconst fileExtension = fileName.split('.').pop() || 'pdf';\n\n// Return data with both JSON metadata AND binary data\n// The binary data is required for the Upload to Azure HTTP Request node\nreturn {\n    json: {\n        // Metadata for downstream nodes\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: isLargeFile,\n        uploadedAt: new Date().toISOString(),\n        // Include base64 in case other nodes need it\n        fileBase64: fileData\n    },\n    binary: {\n        // This is what the HTTP Request node needs\n        // The field name 'data' is what the HTTP node expects by default\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileExtension\n        }\n    }\n};\n"
      },
      "id": "0fd2af63-f3f4-415a-a02d-ceb5f8214e27",
      "name": "Check File Size",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        736
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/upload",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": true
        }
      },
      "id": "655888ea-54af-4559-b672-5ed8e81be39e",
      "name": "Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -416,
        736
      ],
      "webhookId": "ask-foreman-upload"
    }
  ],
  "connections": {
    "Chat Webhook1": {
      "main": [
        [
          {
            "node": "Prepare Chat Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Chat Input": {
      "main": [
        [
          {
            "node": "Construction AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construction AI Agent": {
      "main": [
        [
          {
            "node": "Format Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Agent Response": {
      "main": [
        [
          {
            "node": "Chat Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Construction Calculator Tool": {
      "ai_tool": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Search API": {
      "ai_tool": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "List Clients Webhook": {
      "main": [
        [
          {
            "node": "List Blob Client Folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Blob Client Folders": {
      "main": [
        [
          {
            "node": "Parse Client List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Client List": {
      "main": [
        [
          {
            "node": "List Clients Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Client Webhook": {
      "main": [
        [
          {
            "node": "Prepare Client Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Client Data": {
      "main": [
        [
          {
            "node": "Create Folder Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Folder Structure": {
      "main": [
        [
          {
            "node": "Create Blob Folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Blob Folders": {
      "main": [
        [
          {
            "node": "Create Client Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Client Search": {
      "ai_tool": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Client Summary": {
      "ai_tool": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Blob Request": {
      "main": [
        [
          {
            "node": "Process Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Delete Result": {
      "main": [
        [
          {
            "node": "Delete Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Delete Results": {
      "main": [
        [
          {
            "node": "Find Documents to Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanup Search Index1": {
      "main": [
        [
          {
            "node": "Find Documents to Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Documents to Delete": {
      "main": [
        [
          {
            "node": "Delete Found Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Client Webhook": {
      "main": [
        [
          {
            "node": "Extract Delete Client Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Client Blobs": {
      "main": [
        [
          {
            "node": "List Converted Client Blobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Converted Client Blobs": {
      "main": [
        [
          {
            "node": "Parse Blobs and Create Delete Ops",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Blobs and Create Delete Ops": {
      "main": [
        [
          {
            "node": "Delete Blob Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete From Search Index": {
      "main": [
        [
          {
            "node": "Finalize Delete Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Delete Client Info": {
      "main": [
        [
          {
            "node": "List Client Blobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Found Documents": {
      "main": [
        [
          {
            "node": "Delete From Search Index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Webhook": {
      "main": [
        [
          {
            "node": "Prepare Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Delete": {
      "main": [
        [
          {
            "node": "Delete Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Docs": {
      "main": [
        [
          {
            "node": "Format Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Delete": {
      "main": [
        [
          {
            "node": "Respond Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear Webhook": {
      "main": [
        [
          {
            "node": "Get All IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All IDs": {
      "main": [
        [
          {
            "node": "Prepare Clear",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Clear": {
      "main": [
        [
          {
            "node": "IF Has Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Has Docs": {
      "main": [
        [
          {
            "node": "Delete All",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Empty Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete All": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty Response": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Respond Clear",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stats Webhook": {
      "main": [
        [
          {
            "node": "Azure Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure Stats": {
      "main": [
        [
          {
            "node": "Respond Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Webhook": {
      "main": [
        [
          {
            "node": "Azure Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure Search": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete File Webhook": {
      "main": [
        [
          {
            "node": "Extract Delete Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Delete Parameters": {
      "main": [
        [
          {
            "node": "Find Documents to Delete1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Index Delete": {
      "main": [
        [
          {
            "node": "Should Delete from Index?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Delete from Index?": {
      "main": [
        [
          {
            "node": "Delete from Search Index",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Original File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Converted File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Metadata File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete Original File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Converted File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Metadata File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete from Search Index": {
      "main": [
        [
          {
            "node": "Consolidate Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Original File": {
      "main": [
        [
          {
            "node": "Consolidate Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Converted File": {
      "main": [
        [
          {
            "node": "Consolidate Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Metadata File": {
      "main": [
        [
          {
            "node": "Consolidate Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidate Delete Results": {
      "main": [
        [
          {
            "node": "Delete Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Documents to Delete1": {
      "main": [
        [
          {
            "node": "Prepare Index Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Index Document": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Upload Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Results": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Index?": {
      "main": [
        [
          {
            "node": "Index Document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Duplicate Check": {
      "main": [
        [
          {
            "node": "Should Index?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Duplicates": {
      "main": [
        [
          {
            "node": "Handle Duplicate Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Search Index": {
      "main": [
        [
          {
            "node": "Check for Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embeddings": {
      "main": [
        [
          {
            "node": "Prepare Search Index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process and Chunk Document": {
      "main": [
        [
          {
            "node": "Generate Embeddings",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upload Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Document": {
      "main": [
        [
          {
            "node": "Process and Chunk Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Large to Azure": {
      "main": [
        [
          {
            "node": "Convert Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Original to Azure": {
      "main": [
        [
          {
            "node": "Convert Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Large File": {
      "main": [
        [
          {
            "node": "Upload Large to Azure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare File Data": {
      "main": [
        [
          {
            "node": "Upload Original to Azure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Router File Size": {
      "main": [
        [
          {
            "node": "Prepare File Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Large File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check File Size": {
      "main": [
        [
          {
            "node": "Router File Size",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Webhook": {
      "main": [
        [
          {
            "node": "Check File Size",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "executionTimeout": 300,
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Upload Webhook": [
      {
        "json": {
          "headers": {
            "host": "workflows.saxtechnology.com",
            "x-request-id": "2eb8a120de3b096197dd8c37eda68649",
            "x-real-ip": "71.217.130.52",
            "x-forwarded-for": "71.217.130.52",
            "x-forwarded-host": "workflows.saxtechnology.com",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-scheme": "https",
            "x-scheme": "https",
            "content-length": "634444",
            "sec-ch-ua-platform": "\"macOS\"",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "https://askforeman.saxtechnology.com",
            "sec-fetch-site": "same-site",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "priority": "u=1, i"
          },
          "params": {},
          "query": {},
          "body": {
            "file": "",
            "fileName": "Metals.pdf",
            "mimeType": "application/pdf",
            "category": "drawings",
            "client": "Tom",
            "clientName": "Tom"
          },
          "webhookUrl": "https://workflows.saxtechnology.com/webhook/ask-foreman/upload",
          "executionMode": "production"
        }
      }
    ],
    "Search Webhook": [
      {
        "json": {
          "headers": {
            "host": "workflows.saxtechnology.com",
            "x-request-id": "5678e6690764ad19fb8a17477d018196",
            "x-real-ip": "71.217.130.52",
            "x-forwarded-for": "71.217.130.52",
            "x-forwarded-host": "workflows.saxtechnology.com",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-scheme": "https",
            "x-scheme": "https",
            "content-length": "77",
            "sec-ch-ua-platform": "\"macOS\"",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "https://askforeman.saxtechnology.com",
            "sec-fetch-site": "same-site",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "priority": "u=1, i"
          },
          "params": {},
          "query": {
            "cb": "1756679112554_0.5701195594127966"
          },
          "body": {
            "search": "*",
            "top": 1000,
            "select": "*",
            "count": true,
            "orderby": "fileName desc"
          },
          "webhookUrl": "https://workflows.saxtechnology.com/webhook/ask-foreman/index/search",
          "executionMode": "production"
        }
      }
    ]
  },
  "versionId": "9d141488-5c39-41db-9b04-86edb3c8f557",
  "triggerCount": 10,
  "shared": [
    {
      "createdAt": "2025-08-06T17:13:29.648Z",
      "updatedAt": "2025-08-06T17:13:29.648Z",
      "role": "workflow:owner",
      "workflowId": "nC5gkystSoLrrKkN",
      "projectId": "bQP3dNwrAvokwlWf",
      "project": {
        "createdAt": "2025-07-15T05:07:13.297Z",
        "updatedAt": "2025-07-24T02:47:26.484Z",
        "id": "bQP3dNwrAvokwlWf",
        "name": "SAX Technology Advisors <support@saxtechnology.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-07-15T05:07:13.297Z",
            "updatedAt": "2025-07-15T05:07:13.297Z",
            "role": "project:personalOwner",
            "userId": "f4c5d4f3-089d-4704-9c17-5067678f21c9",
            "projectId": "bQP3dNwrAvokwlWf",
            "user": {
              "createdAt": "2025-07-15T05:07:11.951Z",
              "updatedAt": "2025-08-31T20:26:05.533Z",
              "id": "f4c5d4f3-089d-4704-9c17-5067678f21c9",
              "email": "support@saxtechnology.com",
              "firstName": "SAX Technology",
              "lastName": "Advisors",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-07-15T05:08:09.912Z",
                "personalization_survey_n8n_version": "1.102.3",
                "automationGoalDevops": [
                  "cloud-infrastructure-orchestration",
                  "data-syncing",
                  "incident-response",
                  "monitoring-alerting",
                  "reporting",
                  "ticketing-systems-integrations"
                ],
                "companySize": "<20",
                "companyType": "systems-integrator",
                "role": "it",
                "reportedSource": "other",
                "reportedSourceOther": "TikTok"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "9cESMSw8tOrd4DBa",
                "userActivatedAt": 1753102800040,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1755752111116
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": true,
              "lastActiveAt": "2025-08-31",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": [
    {
      "createdAt": "2025-08-26T05:36:55.318Z",
      "updatedAt": "2025-08-26T05:36:55.318Z",
      "id": "AZS4FKK35Rzd1Giq",
      "name": "ask-foreman-clients"
    }
  ]
}