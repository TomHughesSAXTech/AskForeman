{
  "name": "SAXTech Foreman AI - Complete Admin Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/clients/create",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "d8fa177a-a5f7-4eea-a6f7-9aca9222ceab",
      "name": "Create Client Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [32, 1232],
      "webhookId": "ask-foreman-create-client"
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "ask-foreman/clients/list",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
      "name": "List Clients Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [32, 800],
      "webhookId": "ask-foreman-list-clients"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/clients/delete",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "delete-client-webhook-id",
      "name": "Delete Client Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [32, 1600],
      "webhookId": "ask-foreman-delete-client"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/reindex/client",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "reindex-client-webhook-id",
      "name": "Reindex Client Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [32, 2000],
      "webhookId": "ask-foreman-reindex-client"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/reindex/all",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "reindex-all-webhook-id",
      "name": "Reindex All Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [32, 2400],
      "webhookId": "ask-foreman-reindex-all"
    },
    {
      "parameters": {
        "jsCode": "const body = $json.body;\n\n// Validate input\nif (!body.clientName) {\n  throw new Error('Client name is required');\n}\n\n// Use the actual client name as provided (preserve original casing for display)\nconst clientFolder = body.clientName;\n\n// Define folder structure\nconst categories = ['drawings', 'estimates', 'proposals', 'specs', 'signed-contracts'];\n\nconst clientData = {\n  id: clientFolder.toLowerCase(),\n  folderName: clientFolder,\n  name: body.clientName,\n  projectName: body.projectName || '',\n  projectType: body.projectType || 'general',\n  projectDescription: body.projectDescription || '',\n  categories: categories,\n  createdAt: new Date().toISOString(),\n  metadata: {\n    version: '1.0',\n    indexPrefix: `${clientFolder.toLowerCase()}_`,\n    documentCount: 0,\n    lastUpdated: new Date().toISOString()\n  }\n};\n\nreturn [{\n  json: clientData\n}];"
      },
      "id": "25bee111-4dbb-468c-9de4-6a3b4fce2057",
      "name": "Prepare Client Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 1232]
    },
    {
      "parameters": {
        "jsCode": "// List all clients by reading from Azure Blob Storage\n// This simulates reading the client folders from FCS-OriginalClients\n\n// Simulated client data - in a real implementation, this would read from Azure Blob\nconst simulatedClients = [\n  { id: '123', name: '123', projectName: 'N/A' },\n  { id: 'amsterdam', name: 'Amsterdam', projectName: 'N/A' },\n  { id: 'baruch', name: 'Baruch', projectName: 'N/A' },\n  { id: 'brownsville', name: 'Brownsville', projectName: 'N/A' },\n  { id: 'rgergerg', name: 'rgergerg', projectName: 'N/A' },\n  { id: 'smith', name: 'Smith', projectName: 'N/A' },\n  { id: 'sumner', name: 'Sumner', projectName: 'N/A' },\n  { id: 'test', name: 'test', projectName: 'N/A' }\n];\n\nreturn [{\n  json: {\n    clients: simulatedClients,\n    count: simulatedClients.length,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "list-clients-code-id",
      "name": "List Clients Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 800]
    },
    {
      "parameters": {
        "jsCode": "const body = $json.body;\n\n// Validate input\nif (!body.clientId) {\n  throw new Error('Client ID is required');\n}\n\nconst clientId = body.clientId;\nconst clientName = body.clientName || clientId;\n\n// Create delete operation data\nconst deleteData = {\n  clientId: clientId,\n  clientName: clientName,\n  operation: 'DELETE_CLIENT',\n  timestamp: new Date().toISOString(),\n  paths: [\n    `FCS-OriginalClients/${clientName}/`,\n    `processed-documents/${clientId}/`,\n    `search-index/${clientId}_*`\n  ]\n};\n\nreturn [{\n  json: deleteData\n}];"
      },
      "id": "prepare-delete-code-id",
      "name": "Prepare Delete Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 1600]
    },
    {
      "parameters": {
        "jsCode": "const deleteData = $json;\n\n// Simulate blob deletion operations\n// In a real implementation, this would call Azure Blob Storage API to delete folders\n\nconst deletedPaths = [];\ndeleteData.paths.forEach(path => {\n  deletedPaths.push({\n    path: path,\n    status: 'deleted',\n    timestamp: new Date().toISOString()\n  });\n});\n\nreturn [{\n  json: {\n    operation: 'DELETE_CLIENT',\n    clientId: deleteData.clientId,\n    clientName: deleteData.clientName,\n    deletedPaths: deletedPaths,\n    status: 'success',\n    message: `Client \"${deleteData.clientName}\" and all associated data deleted successfully`\n  }\n}];"
      },
      "id": "execute-delete-code-id",
      "name": "Execute Delete Operations",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 1600]
    },
    {
      "parameters": {
        "jsCode": "const body = $json.body;\n\n// Validate input\nif (!body.clientId) {\n  throw new Error('Client ID is required');\n}\n\nconst clientId = body.clientId;\n\n// Create reindex operation data\nconst reindexData = {\n  clientId: clientId,\n  operation: 'REINDEX_CLIENT',\n  timestamp: new Date().toISOString(),\n  searchPaths: [\n    `FCS-OriginalClients/${clientId}/`,\n    `processed-documents/${clientId}/`\n  ]\n};\n\nreturn [{\n  json: reindexData\n}];"
      },
      "id": "prepare-reindex-code-id",
      "name": "Prepare Reindex Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 2000]
    },
    {
      "parameters": {
        "jsCode": "const reindexData = $json;\n\n// Simulate reindexing operations\n// In a real implementation, this would call Azure Cognitive Search API\n\nconst processedDocuments = [];\nreindexData.searchPaths.forEach(path => {\n  // Simulate finding and processing documents\n  const docCount = Math.floor(Math.random() * 50) + 1;\n  for (let i = 0; i < docCount; i++) {\n    processedDocuments.push({\n      path: `${path}document_${i}.pdf`,\n      status: 'reindexed',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nreturn [{\n  json: {\n    operation: 'REINDEX_CLIENT',\n    clientId: reindexData.clientId,\n    processedDocuments: processedDocuments.length,\n    status: 'success',\n    message: `Successfully reindexed ${processedDocuments.length} documents for client ${reindexData.clientId}`,\n    startedAt: reindexData.timestamp,\n    completedAt: new Date().toISOString()\n  }\n}];"
      },
      "id": "execute-reindex-code-id",
      "name": "Execute Reindex Operations",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 2000]
    },
    {
      "parameters": {
        "jsCode": "// Prepare full system reindex\nconst reindexAllData = {\n  operation: 'REINDEX_ALL',\n  timestamp: new Date().toISOString(),\n  searchPaths: [\n    'FCS-OriginalClients/',\n    'processed-documents/'\n  ]\n};\n\nreturn [{\n  json: reindexAllData\n}];"
      },
      "id": "prepare-reindex-all-code-id",
      "name": "Prepare Reindex All Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 2400]
    },
    {
      "parameters": {
        "jsCode": "const reindexAllData = $json;\n\n// Simulate full system reindexing\n// In a real implementation, this would call Azure Cognitive Search API for full reindex\n\n// Simulate processing all documents\nconst totalDocuments = Math.floor(Math.random() * 500) + 100;\nconst estimatedMinutes = Math.ceil(totalDocuments / 50);\n\nreturn [{\n  json: {\n    operation: 'REINDEX_ALL',\n    status: 'started',\n    estimatedDocuments: totalDocuments,\n    estimatedMinutes: estimatedMinutes,\n    message: `Full system reindex started. Processing approximately ${totalDocuments} documents. Estimated completion: ${estimatedMinutes} minutes.`,\n    startedAt: reindexAllData.timestamp,\n    jobId: `reindex_${Date.now()}`\n  }\n}];"
      },
      "id": "execute-reindex-all-code-id",
      "name": "Execute Reindex All Operations",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 2400]
    },
    {
      "parameters": {
        "jsCode": "// Create placeholder files for each category folder under FCS-OriginalClients\nconst client = $json;\nconst folderCreations = [];\n\n// Create a placeholder for each category under FCS-OriginalClients\nclient.categories.forEach(category => {\n  folderCreations.push({\n    json: {\n      client: client.folderName,\n      category: category,\n      path: `FCS-OriginalClients/${client.folderName}/${category}/.placeholder`,\n      content: '',\n      contentType: 'text/plain'\n    }\n  });\n});\n\n// Add metadata file under FCS-OriginalClients\nfolderCreations.push({\n  json: {\n    client: client.folderName,\n    category: '.metadata',\n    path: `FCS-OriginalClients/${client.folderName}/.metadata/client.json`,\n    content: JSON.stringify(client, null, 2),\n    contentType: 'application/json'\n  }\n});\n\nreturn folderCreations;"
      },
      "id": "081ac27e-1242-479d-9b4f-9965adfc7cec",
      "name": "Create Folder Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 1232]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $json.path }}?sp=racwdl&st=2025-08-07T21:44:55Z&se=2030-08-08T05:59:55Z&spr=https&sv=2024-11-04&sr=c&sig=AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo%3D",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "Content-Type",
              "value": "={{ $json.contentType }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "body",
              "value": "={{ $json.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "bb22fa88-64a6-43c3-ab3e-ace1eecdc04f",
      "name": "Create Blob Folders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [704, 1232]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"clients\": {{ JSON.stringify($json.clients) }},\n  \"count\": {{ $json.count }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}",
        "options": {}
      },
      "id": "list-clients-response-id",
      "name": "List Clients Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [480, 800]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"operation\": \"CREATE_CLIENT\",\n  \"client\": {\n    \"id\": \"{{ $node['Prepare Client Data'].json.id }}\",\n    \"name\": \"{{ $node['Prepare Client Data'].json.name }}\",\n    \"folderName\": \"{{ $node['Prepare Client Data'].json.folderName }}\",\n    \"projectName\": \"{{ $node['Prepare Client Data'].json.projectName }}\",\n    \"categories\": {{ JSON.stringify($node['Prepare Client Data'].json.categories) }}\n  },\n  \"createdAt\": \"{{ $node['Prepare Client Data'].json.createdAt }}\",\n  \"message\": \"Client created successfully with folder structure under FCS-OriginalClients\"\n}",
        "options": {}
      },
      "id": "f167b7cb-d09e-4dc5-a8be-4a8da7b8ea81",
      "name": "Create Client Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [928, 1232]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"{{ $json.status }}\",\n  \"operation\": \"{{ $json.operation }}\",\n  \"clientId\": \"{{ $json.clientId }}\",\n  \"clientName\": \"{{ $json.clientName }}\",\n  \"message\": \"{{ $json.message }}\",\n  \"deletedPaths\": {{ JSON.stringify($json.deletedPaths) }}\n}",
        "options": {}
      },
      "id": "delete-response-id",
      "name": "Delete Client Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [704, 1600]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"{{ $json.status }}\",\n  \"operation\": \"{{ $json.operation }}\",\n  \"clientId\": \"{{ $json.clientId }}\",\n  \"processedDocuments\": {{ $json.processedDocuments }},\n  \"message\": \"{{ $json.message }}\",\n  \"startedAt\": \"{{ $json.startedAt }}\",\n  \"completedAt\": \"{{ $json.completedAt }}\"\n}",
        "options": {}
      },
      "id": "reindex-response-id",
      "name": "Reindex Client Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [704, 2000]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"{{ $json.status }}\",\n  \"operation\": \"{{ $json.operation }}\",\n  \"estimatedDocuments\": {{ $json.estimatedDocuments }},\n  \"estimatedMinutes\": {{ $json.estimatedMinutes }},\n  \"message\": \"{{ $json.message }}\",\n  \"startedAt\": \"{{ $json.startedAt }}\",\n  \"jobId\": \"{{ $json.jobId }}\"\n}",
        "options": {}
      },
      "id": "reindex-all-response-id",
      "name": "Reindex All Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [704, 2400]
    }
  ],
  "connections": {
    "Create Client Webhook": {
      "main": [
        [
          {
            "node": "Prepare Client Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Clients Webhook": {
      "main": [
        [
          {
            "node": "List Clients Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Client Webhook": {
      "main": [
        [
          {
            "node": "Prepare Delete Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reindex Client Webhook": {
      "main": [
        [
          {
            "node": "Prepare Reindex Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reindex All Webhook": {
      "main": [
        [
          {
            "node": "Prepare Reindex All Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Client Data": {
      "main": [
        [
          {
            "node": "Create Folder Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Clients Code": {
      "main": [
        [
          {
            "node": "List Clients Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Delete Data": {
      "main": [
        [
          {
            "node": "Execute Delete Operations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Delete Operations": {
      "main": [
        [
          {
            "node": "Delete Client Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Reindex Data": {
      "main": [
        [
          {
            "node": "Execute Reindex Operations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Reindex Operations": {
      "main": [
        [
          {
            "node": "Reindex Client Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Reindex All Data": {
      "main": [
        [
          {
            "node": "Execute Reindex All Operations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Reindex All Operations": {
      "main": [
        [
          {
            "node": "Reindex All Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Folder Structure": {
      "main": [
        [
          {
            "node": "Create Blob Folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Blob Folders": {
      "main": [
        [
          {
            "node": "Create Client Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
