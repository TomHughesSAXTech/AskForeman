{
  "name": "SAXTech Foreman AI",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/chat",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "60967a2a-dce7-44d8-bb7f-623e4eb7affa",
      "name": "Chat Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1552,
        -1872
      ],
      "webhookId": "ask-foreman-chat"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all()[0];\n\n// Correct path: inputData.json.body.message\nconst message = inputData.json && inputData.json.body && inputData.json.body.message \n  ? inputData.json.body.message \n  : \"No message found\";\n\nconst client = inputData.json && inputData.json.body && inputData.json.body.client \n  ? inputData.json.body.client \n  : \"general\";\n\nreturn [{\n    json: {\n        chatInput: message,\n        client: client,\n        conversationId: `conv_${client}_${Date.now()}`,\n        sessionId: client,\n        timestamp: new Date().toISOString(),\n        isGeneralQuery: client === \"general\"\n    }\n}];"
      },
      "id": "34c95427-cb47-4c03-94c0-6d2b5a9c8b21",
      "name": "Prepare Chat Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1328,
        -1872
      ]
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are 'Foreman AI', a construction assistant providing clear, actionable information from project documents.\n\n## CORE RULES\n\nYOU MUST ALWAYS call the \"Client Search\" tool. NEVER try to reference documents from memory or generate file paths manually.\nFallback to ‘Google Search API’ if the answer is not known and CITE YOUR SOURCE\nUTILIZE the Construction Calculator Tool if necessary \n\n### Document Requests\nWhen users ask to see/open/view documents, ALWAYS use the Client Search tool.\n\n### Response Format\n- Be concise but complete\n- Use bullet points and tables\n- Include specific numbers and costs\n- List ALL exclusions and add-ons\n- Reference source documents\n\nNEVER provide generic or surface-level responses. When documents are found, you MUST:\n- EXTRACT SPECIFIC DETAILS - Pull exact numbers, specifications, product names, and requirements\n- PROVIDE COMPLETE LISTS - Don't summarize; list ALL items found\n- QUOTE DIRECTLY - Include relevant text excerpts from documents\n\n## QUERY TEMPLATES\n\n### Painting/Coating\n**Scope:** [Buildings and areas]\n**Products:** [Specific paints/coatings]\n**Exclusions:** [Numbered list]\n**Costs:** Base $X + Add-ons\n**Source:** [Document name]\n\n### Quantities\n**Materials:**\n- Paint: X gallons\n- Area: X sq ft\n- Linear: X LF\n\n### Scope of Work\n**INCLUDED:**\n1. [Item with details]\n2. [Item with details]\n\n**EXCLUDED:**\n1. [Item with reason]\n2. [Item with reason]\n\n**ADD-ONS:**\n- Item: $X\n- Item: $X\n\n## DOCUMENT REFERENCES\nWhen mentioning documents:\n- Show filename only (truncated if > 40 chars)\n- Provide clickable link\n- Format: [📄 filename.pdf]\n\n## SEARCH RESULT INTERPRETATION\nWhen the Document Search tool returns results:\nREAD THE ENTIRE CONTENT - Don't just look at highlights\nCROSS-REFERENCE - Connect information from multiple documents\nORGANIZE COMPREHENSIVELY - Group related information logically\nALWAYS CITE SOURCES - Reference specific documents and sections\nALWAYS extract specific drawing numbers, room numbers, and identifiers\n\n## KEY REMINDERS\n- Extract exact numbers, not approximations\n- List ALL items, not summaries\n- Include every exclusion\n- Show all add-on prices\n- Keep responses organized and scannable\n- Use tables for complex data\n- Bold important values\n\nBe professional, precise, and practical. Focus on what matters for construction decisions.",
          "maxIterations": 20,
          "returnIntermediateSteps": true,
          "enableStreaming": true
        }
      },
      "id": "a219b5eb-5ca6-4258-94e8-bc9e580a38ae",
      "name": "Construction AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -848,
        -1952
      ],
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "const agentOutput = $json;\nconst inputData = $node['Prepare Chat Input'].json;\n\n// Handle different response formats\nlet response;\nif (typeof agentOutput.output === 'string') {\n  response = agentOutput.output;\n} else if (typeof agentOutput.text === 'string') {\n  response = agentOutput.text;\n} else if (agentOutput.result && typeof agentOutput.result === 'string') {\n  response = agentOutput.result;\n} else {\n  response = 'I apologize, but I was unable to generate a proper response. Please try rephrasing your question.';\n}\n\n// Extract metadata about tools used\nconst intermediateSteps = agentOutput.intermediateSteps || [];\nconst toolsUsed = intermediateSteps.length;\nconst searchPerformed = intermediateSteps.some(step => \n  step.action && step.action.tool === 'search_construction_documents'\n);\n\n// Log the response for debugging\nconsole.log('Agent response formatted:', {\n  hasResponse: !!response,\n  toolsUsed: toolsUsed,\n  searchPerformed: searchPerformed,\n  client: inputData.client\n});\n\nreturn [{\n  json: {\n    response: response,\n    conversationId: inputData.conversationId,\n    client: inputData.client,\n    timestamp: new Date().toISOString(),\n    metadata: {\n      toolsUsed: toolsUsed,\n      searchPerformed: searchPerformed,\n      sessionId: inputData.sessionId,\n      isGeneralQuery: inputData.isGeneralQuery,\n      agentType: 'Foreman AI Construction Assistant'\n    }\n  }\n}];"
      },
      "id": "5efaf5a7-ff54-4131-b34d-dad0a74340fe",
      "name": "Format Agent Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        -1872
      ]
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {
          "maxTokens": 30000,
          "temperature": 0.3
        }
      },
      "id": "ae370edf-51ff-4e7e-b545-be48c74fe660",
      "name": "Azure OpenAI Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        -1152,
        -1696
      ],
      "credentials": {
        "azureOpenAiApi": {
          "id": "8A5jhqDTH1EpJ6T5",
          "name": "FCS Azure Model"
        }
      }
    },
    {
      "parameters": {
        "name": "construction_calculator",
        "description": "Perform construction calculations including area, volume, paint coverage, material quantities, linear feet, and cost estimates.",
        "jsCode": "// Construction Calculator Tool - Fixed\nconst toolInput = $input.all()[0].json;\nconst calculation = toolInput.calculation || toolInput.expression || toolInput.input;\n\nif (!calculation) {\n  return \"Please provide a calculation or specify what you'd like to calculate (e.g., 'paint coverage for 2500 sq ft at 2 coats').\";\n}\n\ntry {\n  // Handle specific construction calculations\n  if (calculation.toLowerCase().includes('paint') && calculation.toLowerCase().includes('coverage')) {\n    // Extract numbers from the input\n    const numbers = calculation.match(/\\d+/g);\n    if (numbers && numbers.length >= 1) {\n      const area = parseInt(numbers[0]);\n      const coats = numbers.length > 1 ? parseInt(numbers[1]) : 1;\n      const coverage_per_gallon = 350; // Standard coverage\n      \n      const gallons = Math.ceil((area * coats) / coverage_per_gallon * 10) / 10;\n      return `For ${area} sq ft with ${coats} coat(s): ${area} × ${coats} ÷ ${coverage_per_gallon} sq ft/gal = ${gallons} gallons needed`;\n    }\n  }\n  \n  // Handle linear feet calculations\n  if (calculation.toLowerCase().includes('linear') || calculation.toLowerCase().includes('feet')) {\n    const numbers = calculation.match(/\\d+/g);\n    if (numbers && numbers.length >= 2) {\n      const pieces = parseInt(numbers[0]);\n      const length = parseInt(numbers[1]);\n      const total = pieces * length;\n      return `${pieces} pieces × ${length} ft each = ${total} linear feet`;\n    }\n  }\n  \n  // Handle basic math expressions\n  const sanitized = calculation.replace(/[^0-9+\\-*/.()\\\\s]/g, '');\n  if (sanitized) {\n    const result = new Function('return ' + sanitized)();\n    return `${calculation} = ${result}`;\n  }\n  \n  return \"Please provide a clearer calculation. Examples: '2500 sq ft paint coverage 2 coats' or '20 × 12' for basic math.\";\n  \n} catch (error) {\n  return \"Could not calculate. Please try rephrasing your calculation.\";\n}"
      },
      "id": "f0e4baaf-d284-4853-988e-38fd80f9cb05",
      "name": "Construction Calculator Tool",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1,
      "position": [
        -848,
        -1696
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": {{ JSON.stringify($json.response) }},\n  \"conversationId\": \"{{ $json.conversationId }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"client\": \"{{ $json.client }}\",\n  \"metadata\": {\n    \"toolsUsed\": {{ $json.metadata.toolsUsed }},\n    \"searchPerformed\": {{ $json.metadata.searchPerformed }},\n    \"agentType\": \"{{ $json.metadata.agentType }}\"\n  }\n}",
        "options": {}
      },
      "id": "05ef4b80-985d-424e-8fbc-5927a5621c95",
      "name": "Chat Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -16,
        -1872
      ]
    },
    {
      "parameters": {
        "description": "Search the web for current construction industry information, standards, and best practices. Use this tool when the client context is 'general' and you need current industry information about construction topics, materials, codes, or standards.",
        "jsCode": "// COMPREHENSIVE Client Search Tool - WITH FULL CONTENT EXTRACTION\n// Handles all types of queries: listings, full content, searches\n// Includes all the original comprehensive search features\n\nconst chatInput = $json.chatInput || $json.query || $json.text || $json.message || '';\nconst client = $json.client || 'general';\nconst queryLower = (chatInput || '').toLowerCase();\n\nconsole.log('Client Search Input:', { chatInput, client, queryLower });\n\n// Helper function to create inline PDF URLs (if needed for your UI)\nfunction createInlinePDFUrl(clientName, category, fileName) {\n  const baseUrl = 'https://saxtechfcs.blob.core.windows.net/fcs-clients';\n  const path = `FCS-OriginalClients/${clientName}/${category}/${fileName}`;\n  \n  const sasParams = new URLSearchParams({\n    'sp': 'racwdl',\n    'st': '2025-08-08T05:00:57Z',\n    'se': '2030-08-08T13:15:57Z',\n    'spr': 'https',\n    'sv': '2024-11-04',\n    'sr': 'c',\n    'sig': 'lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2/rnIg='\n  });\n  \n  const encodedPath = encodeURI(path);\n  return `${baseUrl}/${encodedPath}?${sasParams.toString()}`;\n}\n\n// Azure Search Configuration\nconst searchService = 'fcssearchservice';\nconst indexName = 'fcs-construction-docs-index-v2';\nconst apiVersion = '2023-11-01';\nconst adminKey = 'UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv';\n\n// Check if asking for document list\nconst isListRequest = queryLower.includes('what') || \n                     queryLower.includes('doc') || \n                     queryLower.includes('have') || \n                     queryLower.includes('list') ||\n                     queryLower.includes('available');\n\nif (isListRequest) {\n  console.log('🔍 DETECTED DOCUMENT LIST REQUEST');\n  \n  try {\n    // Get ALL documents for this client, including content\n    const searchRequest = {\n      search: \"*\",\n      queryType: \"simple\",\n      filter: `client eq '${client}'`,\n      top: 100, // Get more results\n      select: \"id,client,category,fileName,content,uploadedAt,blobPath\",\n      count: true\n    };\n\n    console.log('List Request:', JSON.stringify(searchRequest, null, 2));\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const count = response['@odata.count'] || results.length;\n    \n    console.log(`Found ${count} documents for client: ${client}`);\n    \n    // Filter out documents without proper filenames (orphaned/deleted docs)\n    const validResults = results.filter(doc => \n      doc.fileName && \n      doc.fileName !== 'Unknown file' && \n      doc.fileName !== 'file' &&\n      doc.fileName.trim() !== ''\n    );\n    \n    if (validResults.length === 0) {\n      return `No valid documents found for client \"${client}\". Please upload documents for this client.`;\n    }\n\n    // Group documents by category\n    const docsByCategory = {};\n    validResults.forEach(doc => {\n      const category = doc.category || 'general';\n      if (!docsByCategory[category]) {\n        docsByCategory[category] = [];\n      }\n      docsByCategory[category].push(doc);\n    });\n\n    let responseText = `## Available Documents for Client: ${client}\\n\\n`;\n    responseText += `Found ${validResults.length} document(s) in your system.\\n\\n`;\n    \n    Object.keys(docsByCategory).sort().forEach(category => {\n      if (docsByCategory[category].length > 0) {\n        responseText += `### ${category.charAt(0).toUpperCase() + category.slice(1)}:\\n`;\n        \n        docsByCategory[category].forEach((doc, index) => {\n          const fileName = doc.fileName;\n          const hasContent = doc.content && doc.content.length > 0;\n          const uploadDate = doc.uploadedAt ? new Date(doc.uploadedAt).toLocaleDateString() : '';\n          \n          responseText += `${index + 1}. **${fileName}**\\n`;\n          if (uploadDate) {\n            responseText += `   - Uploaded: ${uploadDate}\\n`;\n          }\n          responseText += `   - Status: ${hasContent ? '✅ Ready' : '⚠️ Processing'}\\n`;\n          \n          // Show content preview if available\n          if (hasContent) {\n            const preview = doc.content.substring(0, 150).replace(/[\\r\\n]+/g, ' ').trim();\n            responseText += `   - Preview: \"${preview}...\"\\n`;\n          }\n          responseText += `\\n`;\n        });\n      }\n    });\n\n    responseText += `---\\n`;\n    responseText += `💡 You can ask me to:\\n`;\n    responseText += `• Show the full content of any document\\n`;\n    responseText += `• Search for specific information\\n`;\n    responseText += `• Extract particular sections or details`;\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Document list error:', error);\n    return `Error retrieving document list: ${error.message}`;\n  }\n}\n\n// Handle requests for FULL CONTENT of a specific document\nconst wantsFullContent = queryLower.includes('all of it') || \n                        queryLower.includes('everything') ||\n                        queryLower.includes('full') ||\n                        queryLower.includes('entire') ||\n                        queryLower.includes('complete') ||\n                        queryLower.includes('tell me what') ||\n                        queryLower.includes('show me') ||\n                        queryLower.includes('content');\n\nif (wantsFullContent || queryLower.includes('windows 11') || queryLower.includes('win11')) {\n  console.log('FULL CONTENT REQUEST DETECTED');\n  \n  try {\n    // Search for the specific document or get all docs with content\n    let searchQuery = \"*\";\n    \n    // If they mentioned a specific document\n    if (queryLower.includes('windows 11') || queryLower.includes('win11')) {\n      searchQuery = \"Windows 11 OR Win11 OR upgrade\";\n    }\n    \n    const searchRequest = {\n      search: searchQuery,\n      queryType: \"simple\",\n      filter: `client eq '${client}'`,\n      top: 10,\n      select: \"id,fileName,content,category,uploadedAt\",\n      count: true\n    };\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    \n    // Find documents with actual content\n    const docsWithContent = results.filter(doc => \n      doc.content && \n      doc.content.length > 0 && \n      doc.fileName && \n      doc.fileName !== 'Unknown file'\n    );\n    \n    if (docsWithContent.length === 0) {\n      return `No documents with extractable content found for \"${client}\". The documents may still be processing.`;\n    }\n    \n    // Get the most relevant document\n    const doc = docsWithContent[0];\n    \n    // Return FULL content formatted nicely\n    let responseText = `# Document: ${doc.fileName}\\n\\n`;\n    responseText += `**Client:** ${client}\\n`;\n    responseText += `**Category:** ${doc.category || 'general'}\\n`;\n    responseText += `**Content Length:** ${doc.content.length} characters\\n\\n`;\n    responseText += `---\\n\\n`;\n    responseText += `## Full Document Content:\\n\\n`;\n    \n    // Clean up the content for better display\n    const cleanContent = doc.content\n      .replace(/=== DOCUMENT ANALYSIS ===/g, '### Document Analysis')\n      .replace(/=== EXTRACTED TEXT CONTENT ===/g, '### Extracted Content')\n      .replace(/--- Page \\d+ ---/g, (match) => `\\n${match}\\n`)\n      .replace(/\\r\\n/g, '\\n')\n      .replace(/\\n{3,}/g, '\\n\\n');\n    \n    // If content is very long, provide it in chunks\n    if (cleanContent.length > 4000) {\n      const firstPart = cleanContent.substring(0, 3500);\n      responseText += firstPart;\n      responseText += `\\n\\n... [Content continues - ${cleanContent.length - 3500} more characters]\\n\\n`;\n      responseText += `💡 The document contains additional content. Ask me specific questions to get targeted information from the rest of the document.`;\n    } else {\n      responseText += cleanContent;\n    }\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Content extraction error:', error);\n    return `Error extracting document content: ${error.message}`;\n  }\n}\n\n// Handle SPECIFIC SEARCH QUERIES within documents\nif (chatInput && chatInput.trim() !== '') {\n  console.log('SPECIFIC SEARCH QUERY:', chatInput);\n  \n  try {\n    const searchRequest = {\n      search: chatInput,\n      queryType: \"simple\",\n      searchMode: \"any\",\n      filter: client !== 'general' ? `client eq '${client}'` : null,\n      top: 10,\n      select: \"fileName,category,content\",\n      highlight: \"content\",\n      highlightPreTag: \"**\",\n      highlightPostTag: \"**\",\n      count: true\n    };\n    \n    if (!searchRequest.filter) {\n      delete searchRequest.filter;\n    }\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const count = response['@odata.count'] || results.length;\n    \n    // Filter out invalid results\n    const validResults = results.filter(r => r.fileName && r.fileName !== 'Unknown file');\n    \n    if (validResults.length === 0) {\n      return `No results found for \"${chatInput}\" in ${client !== 'general' ? `client \"${client}\" documents` : 'any documents'}. Try different search terms.`;\n    }\n    \n    let responseText = `## Search Results: \"${chatInput}\"\\n\\n`;\n    responseText += `Found ${validResults.length} relevant result(s).\\n\\n`;\n    \n    validResults.forEach((result, index) => {\n      responseText += `### ${index + 1}. From ${result.fileName}\\n`;\n      responseText += `Category: ${result.category || 'general'}\\n\\n`;\n      \n      // Show highlighted matches or relevant excerpts\n      if (result['@search.highlights'] && result['@search.highlights'].content) {\n        responseText += `**Relevant sections:**\\n`;\n        result['@search.highlights'].content.slice(0, 5).forEach(highlight => {\n          const cleaned = highlight.replace(/[\\r\\n]+/g, ' ').trim();\n          if (cleaned.length > 50) {\n            responseText += `• ${cleaned}\\n`;\n          }\n        });\n      } else if (result.content) {\n        // Find relevant excerpt around the search term\n        const lowerContent = result.content.toLowerCase();\n        const searchTerms = chatInput.toLowerCase().split(' ');\n        let excerptStart = 0;\n        \n        for (const term of searchTerms) {\n          const index = lowerContent.indexOf(term);\n          if (index !== -1) {\n            excerptStart = Math.max(0, index - 100);\n            break;\n          }\n        }\n        \n        const excerpt = result.content.substring(excerptStart, excerptStart + 400).replace(/[\\r\\n]+/g, ' ').trim();\n        responseText += `**Excerpt:** ...${excerpt}...\\n`;\n      }\n      \n      responseText += `\\n---\\n\\n`;\n    });\n    \n    responseText += `💡 Need more details? Ask me to show the full content of any specific document.`;\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Search error:', error);\n    return `Error searching documents: ${error.message}`;\n  }\n}\n\n// Default response\nreturn `I can help you with construction documents for \"${client}\". Try:\\n• \"What documents do you have?\" - to list all documents\\n• \"Show me the Windows 11 document\" - to see specific content\\n• \"Tell me about [topic]\" - to search for specific information\\n• \"All of it\" or \"full content\" - to see complete document content`;\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        -672,
        -1680
      ],
      "id": "e4d766bc-337d-4689-9c12-93c429c96ed3",
      "name": "Google Search API",
      "executeOnce": false
    },
    {
      "parameters": {
        "contextWindowLength": 3
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -992,
        -1696
      ],
      "id": "a4c6b7b6-d0b6-424b-9272-dee9bec7e47c",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/clients/list",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "8ac380e8-3590-4d8f-9758-a7d84ed1b883",
      "name": "List Clients Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2048,
        384
      ],
      "webhookId": "ask-foreman-list-clients"
    },
    {
      "parameters": {
        "url": "https://saxtechfcs.blob.core.windows.net/fcs-clients?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D&restype=container&comp=list&prefix=FCS-OriginalClients/&delimiter=/",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "9a562b79-fc3f-4be4-b28d-f8d806fd110f",
      "name": "List Blob Client Folders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1824,
        384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Fixed file preparation with binary conversion for Azure upload\nconst inputData = $input.all()[0].json;\n\n// Handle both direct JSON and webhook body structure\nconst body = inputData.body || inputData;\n\n// Extract file data (base64 string)\nconst fileData = body.file || body.data || '';\nconst fileName = body.fileName || body.name || 'unknown.pdf';\nconst mimeType = body.mimeType || body.type || 'application/pdf';\nconst category = body.category || 'uncategorized';\nconst client = body.client || 'general';\nconst clientName = body.clientName || '';\n\n// Check if file data exists\nif (!fileData) {\n    throw new Error('No file data provided in upload request');\n}\n\n// Calculate approximate file size from base64\nconst base64Length = fileData.length;\nconst padding = (fileData.match(/=/g) || []).length;\nconst fileSize = Math.floor((base64Length * 3) / 4) - padding;\n\n// Determine if file is large (> 10MB)\nconst isLargeFile = fileSize > 10 * 1024 * 1024;\n\nconsole.log(`File: ${fileName}, Size: ${(fileSize / 1024 / 1024).toFixed(2)} MB, Large: ${isLargeFile}`);\n\n// Convert base64 to binary buffer for Azure upload\nconst buffer = Buffer.from(fileData, 'base64');\n\n// Return data with both JSON metadata and binary data\nreturn {\n    json: {\n        // Keep base64 for any nodes that need it\n        file: fileData,\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        fileSizeMB: (fileSize / 1024 / 1024).toFixed(2),\n        isLargeFile: isLargeFile,\n        uploadedAt: new Date().toISOString(),\n        // Azure blob URLs\n        originalBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-originalclients/${client}/${category}/${fileName}`,\n        processedBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-processedclients/${client}/${category}/${fileName}.jsonl`\n    },\n    binary: {\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileName.split('.').pop() || 'pdf'\n        }\n    }\n};\n"
      },
      "id": "750927ef-d9f8-4472-a5bb-bdfaf2bf8284",
      "name": "Parse Client List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1600,
        384
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "6dad3863-958d-43f2-b4c5-069fcc84eefa",
      "name": "List Clients Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -1360,
        384
      ]
    },
    {
      "parameters": {
        "content": "## Delete File(s)\n",
        "height": 736,
        "width": 1728,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2160,
        -640
      ],
      "id": "b7dd48f1-0aa4-4bb1-85f5-e7cf7a4efdcc",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Create Client\n",
        "height": 208,
        "width": 1216,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2160,
        112
      ],
      "id": "64c86939-d781-4ca4-ae43-ec1bdc64b9a8",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## List Clients\n",
        "height": 208,
        "width": 992,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2160,
        336
      ],
      "id": "ed931f0d-c51a-4407-9aa0-5eb41d2e37e8",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/clients/create",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": true
        }
      },
      "id": "6fdc11d5-b604-48fc-8046-0aba9384d257",
      "name": "Create Client Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2048,
        160
      ],
      "webhookId": "ask-foreman-create-client"
    },
    {
      "parameters": {
        "jsCode": "// Handle client creation request\nconst inputItem = $input.first();\nconst json = inputItem.json || {};\nconst data = json.body || json;\n// Extract client name from various possible locations\nconst clientName = data.clientName || data.client || data.name || '';\nif (!clientName) {\n    throw new Error('Client name is required');\n}\n// Clean client name for folder creation\nconst cleanName = clientName.replace(/[^a-zA-Z0-9-_ ]/g, '').trim();\nreturn {\n    json: {\n        clientName: cleanName,\n        timestamp: new Date().toISOString(),\n        categories: ['drawings', 'specs', 'submittals', 'rfis']\n    }\n};"
      },
      "id": "562a6f82-8c07-45cf-a880-1aa98f222c45",
      "name": "Prepare Client Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1824,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "// Fixed file size check with proper data extraction\nconst inputData = $input.all()[0].json;\n\n// Handle both direct JSON and webhook body structure\nconst body = inputData.body || inputData;\n\n// Extract file data (base64 string)\nconst fileData = body.file || body.data || '';\nconst fileName = body.fileName || body.name || 'unknown.pdf';\nconst mimeType = body.mimeType || body.type || 'application/pdf';\nconst category = body.category || 'uncategorized';\nconst client = body.client || 'general';\nconst clientName = body.clientName || '';\n\n// Check if file data exists\nif (!fileData) {\n    throw new Error('No file data provided in upload request');\n}\n\n// Calculate approximate file size from base64\n// Base64 increases size by ~33%, so we reverse calculate\nconst base64Length = fileData.length;\nconst padding = (fileData.match(/=/g) || []).length;\nconst fileSize = Math.floor((base64Length * 3) / 4) - padding;\n\n// Determine if file is large (> 10MB)\nconst isLargeFile = fileSize > 10 * 1024 * 1024;\n\nconsole.log(`File: ${fileName}, Size: ${(fileSize / 1024).toFixed(2)} KB, Large: ${isLargeFile}`);\n\n// Return data for next nodes\nreturn {\n    json: {\n        file: fileData,\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: isLargeFile,\n        uploadedAt: new Date().toISOString()\n    }\n};"
      },
      "id": "55fb2bfc-8efe-46a9-93cd-30ed98996f47",
      "name": "Create Folder Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1600,
        160
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $json.path }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "Content-Type",
              "value": "={{ $json.contentType }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "body",
              "value": "={{ $json.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "069a0ac9-872b-4329-91cd-be31d7a99592",
      "name": "Create Blob Folders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1360,
        160
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"operation\": \"CREATE_CLIENT\",\n  \"client\": {\n    \"id\": \"{{ $node['Prepare Client Data'].json.id }}\",\n    \"name\": \"{{ $node['Prepare Client Data'].json.name }}\",\n    \"folderName\": \"{{ $node['Prepare Client Data'].json.folderName }}\",\n    \"projectName\": \"{{ $node['Prepare Client Data'].json.projectName }}\",\n    \"categories\": {{ JSON.stringify($node['Prepare Client Data'].json.categories) }}\n  },\n  \"createdAt\": \"{{ $node['Prepare Client Data'].json.createdAt }}\",\n  \"message\": \"Client created successfully with folder structure under FCS-OriginalClients\"\n}",
        "options": {}
      },
      "id": "85835471-f2be-4132-b7ba-6fe92e65e7aa",
      "name": "Create Client Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -1136,
        160
      ]
    },
    {
      "parameters": {
        "description": "Call this tool for ANY client-specific queries including:\n- Document searches and information lookups \n- PDF links, document links, or file access requests\n- \"Give me links\", \"show me PDFs\", \"what documents do you have\"\n- Construction document searches, estimates, drawings, proposals, specs\n- Client information, project details, and document summaries\nThis is the MAIN tool for all client document and PDF-related queries.",
        "jsCode": "// COMPREHENSIVE Client Search Tool - AUTO CONTENT VERSION\n// Automatically shows document content when listing documents\n\nconst chatInput = $json.chatInput || $json.query || $json.text || $json.message || '';\nconst client = $json.client || 'general';\nconst queryLower = (chatInput || '').toLowerCase();\n\nconsole.log('Client Search Input:', { chatInput, client, queryLower });\n\n// Azure Search Configuration\nconst searchService = 'fcssearchservice';\nconst indexName = 'fcs-construction-docs-index-v2';\nconst apiVersion = '2023-11-01';\nconst adminKey = 'UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv';\n\n// Check if asking about documents (list request but with automatic content display)\nconst isDocumentQuery = queryLower.includes('what') || \n                       queryLower.includes('doc') || \n                       queryLower.includes('have') || \n                       queryLower.includes('list') ||\n                       queryLower.includes('available') ||\n                       queryLower.includes('show');\n\nif (isDocumentQuery) {\n  console.log('🔍 DOCUMENT QUERY - Will show content automatically');\n  \n  try {\n    // Get ALL documents for this client, INCLUDING FULL CONTENT\n    const searchRequest = {\n      search: \"*\",\n      queryType: \"simple\",\n      filter: `client eq '${client}'`,\n      top: 100,\n      select: \"id,client,category,fileName,content,uploadedAt,blobPath\",\n      count: true\n    };\n\n    console.log('Search Request:', JSON.stringify(searchRequest, null, 2));\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const count = response['@odata.count'] || results.length;\n    \n    console.log(`Found ${count} documents for client: ${client}`);\n    \n    // Filter out invalid documents\n    const validResults = results.filter(doc => \n      doc.fileName && \n      doc.fileName !== 'Unknown file' && \n      doc.fileName !== 'file' &&\n      doc.fileName.trim() !== ''\n    );\n    \n    if (validResults.length === 0) {\n      return `No documents found for client \"${client}\". Please upload documents for this client.`;\n    }\n\n    // Build comprehensive response with FULL CONTENT\n    let responseText = `# Documents for ${client}\\n\\n`;\n    responseText += `Found ${validResults.length} document(s) with the following content:\\n\\n`;\n    responseText += `---\\n\\n`;\n    \n    // Show each document with its FULL CONTENT\n    validResults.forEach((doc, index) => {\n      const fileName = doc.fileName;\n      const category = doc.category || 'general';\n      const hasContent = doc.content && doc.content.length > 0;\n      \n      responseText += `## ${index + 1}. ${fileName}\\n`;\n      responseText += `**Category:** ${category}\\n`;\n      \n      if (doc.uploadedAt) {\n        const uploadDate = new Date(doc.uploadedAt).toLocaleDateString();\n        responseText += `**Uploaded:** ${uploadDate}\\n`;\n      }\n      \n      responseText += `\\n`;\n      \n      // SHOW THE ACTUAL CONTENT\n      if (hasContent) {\n        responseText += `### Document Content:\\n\\n`;\n        \n        // Clean and format the content\n        const cleanContent = doc.content\n          .replace(/=== DOCUMENT ANALYSIS ===/g, '#### Document Analysis')\n          .replace(/=== EXTRACTED TEXT CONTENT ===/g, '#### Extracted Content')\n          .replace(/=== CONSTRUCTION DOCUMENT ANALYSIS ===/g, '#### Construction Analysis')\n          .replace(/=== METADATA ===/g, '#### Metadata')\n          .replace(/--- Page (\\d+) ---/g, '\\n**Page $1**\\n')\n          .replace(/\\r\\n/g, '\\n')\n          .replace(/\\n{3,}/g, '\\n\\n')\n          .trim();\n        \n        // Show full content or truncate if very long\n        if (cleanContent.length > 8000) {\n          // For very long documents, show substantial content but truncate\n          responseText += cleanContent.substring(0, 7500);\n          responseText += `\\n\\n... [${cleanContent.length - 7500} more characters]\\n\\n`;\n          responseText += `💡 **Note:** This document contains additional content. Ask specific questions to explore particular sections.\\n`;\n        } else {\n          // Show complete content for reasonably sized documents\n          responseText += cleanContent;\n        }\n      } else {\n        responseText += `⚠️ *Content is still being processed or is not available*\\n`;\n      }\n      \n      responseText += `\\n---\\n\\n`;\n    });\n\n    responseText += `\\n## How can I help?\\n`;\n    responseText += `Now that I have the document content, you can:\\n`;\n    responseText += `• Ask specific questions about the Windows 11 upgrade process\\n`;\n    responseText += `• Request summaries of specific sections\\n`;\n    responseText += `• Get step-by-step procedures\\n`;\n    responseText += `• Find troubleshooting information\\n`;\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Document search error:', error);\n    return `Error retrieving documents: ${error.message}`;\n  }\n}\n\n// Handle specific content requests (when asking for \"all of it\", \"everything\", etc.)\nconst wantsAllContent = queryLower.includes('all of it') || \n                       queryLower.includes('everything') ||\n                       queryLower.includes('full') ||\n                       queryLower.includes('entire') ||\n                       queryLower.includes('complete') ||\n                       queryLower.includes('tell me what');\n\nif (wantsAllContent) {\n  console.log('FULL CONTENT REQUEST');\n  \n  try {\n    const searchRequest = {\n      search: \"*\",\n      queryType: \"simple\",\n      filter: `client eq '${client}'`,\n      top: 10,\n      select: \"id,fileName,content,category,uploadedAt\",\n      count: true\n    };\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const docsWithContent = results.filter(doc => \n      doc.content && \n      doc.content.length > 0 && \n      doc.fileName && \n      doc.fileName !== 'Unknown file'\n    );\n    \n    if (docsWithContent.length === 0) {\n      return `No documents with content found for \"${client}\".`;\n    }\n    \n    let responseText = `# Complete Document Content\\n\\n`;\n    \n    docsWithContent.forEach((doc, index) => {\n      if (index > 0) responseText += `\\n---\\n\\n`;\n      \n      responseText += `## ${doc.fileName}\\n\\n`;\n      \n      const cleanContent = doc.content\n        .replace(/=== /g, '### ')\n        .replace(/--- Page/g, '\\n**Page')\n        .replace(/\\r\\n/g, '\\n')\n        .trim();\n      \n      responseText += cleanContent;\n    });\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Content extraction error:', error);\n    return `Error extracting content: ${error.message}`;\n  }\n}\n\n// Handle SPECIFIC SEARCH QUERIES\nif (chatInput && chatInput.trim() !== '') {\n  console.log('SPECIFIC SEARCH:', chatInput);\n  \n  try {\n    const searchRequest = {\n      search: chatInput,\n      queryType: \"simple\",\n      searchMode: \"any\",\n      filter: client !== 'general' ? `client eq '${client}'` : null,\n      top: 10,\n      select: \"fileName,category,content\",\n      highlight: \"content\",\n      highlightPreTag: \"**\",\n      highlightPostTag: \"**\",\n      count: true\n    };\n    \n    if (!searchRequest.filter) {\n      delete searchRequest.filter;\n    }\n\n    const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: searchUrl,\n      headers: {\n        'api-key': adminKey,\n        'Content-Type': 'application/json'\n      },\n      body: searchRequest,\n      json: true\n    });\n\n    const results = response.value || [];\n    const count = response['@odata.count'] || results.length;\n    \n    if (results.length === 0) {\n      return `No results found for \"${chatInput}\" in ${client !== 'general' ? `client \"${client}\" documents` : 'any documents'}.`;\n    }\n    \n    let responseText = `# Search Results: \"${chatInput}\"\\n\\n`;\n    responseText += `Found ${count} relevant result(s).\\n\\n`;\n    \n    results.forEach((result, index) => {\n      responseText += `## ${index + 1}. From ${result.fileName || 'Unknown'}\\n`;\n      \n      if (result['@search.highlights'] && result['@search.highlights'].content) {\n        responseText += `**Relevant sections:**\\n`;\n        result['@search.highlights'].content.slice(0, 5).forEach(highlight => {\n          const cleaned = highlight.replace(/[\\r\\n]+/g, ' ').trim();\n          if (cleaned.length > 50) {\n            responseText += `• ${cleaned}\\n`;\n          }\n        });\n      } else if (result.content) {\n        // Show relevant excerpt\n        const excerpt = result.content.substring(0, 500).replace(/[\\r\\n]+/g, ' ').trim();\n        responseText += `**Excerpt:** ${excerpt}...\\n`;\n      }\n      \n      responseText += `\\n`;\n    });\n    \n    return responseText;\n    \n  } catch (error) {\n    console.error('Search error:', error);\n    return `Error searching: ${error.message}`;\n  }\n}\n\n// Default response\nreturn `I can help you with documents for \"${client}\". Try:\\n• \"What documents do you have?\" - to see all content\\n• \"Search for [topic]\" - to find specific information\\n• Ask any specific question about your documents`;\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        -496,
        -1680
      ],
      "id": "df1eba97-0559-432d-bd35-408f18b68cdf",
      "name": "Client Search"
    },
    {
      "parameters": {
        "description": "Call this tool when a client asks high level about a client.",
        "jsCode": "// Enhanced Client Summary Tool - Now with inline PDF previews\n// Provides detailed client information with actual document content and PDF preview links\n\nconst searchService = 'fcssearchservice';\nconst indexName = 'fcs-construction-docs-index-v2';\nconst apiVersion = '2023-11-01';\nconst adminKey = 'UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv';\n\n// Get client from input\nconst clientName = $json.client || $json.chatInput || $json.query || '';\n\nconsole.log('Client Summary Request:', { clientName, allJson: $json });\n\nif (!clientName || clientName.trim() === '') {\n  return 'I need a client name to provide detailed information. Please specify which client you want to know about.';\n}\n\ntry {\n  // Search for all documents for this client\n  const searchRequest = {\n    search: \"*\",\n    queryType: \"simple\",\n    filter: `client eq '${clientName}'`,\n    top: 50, // Get more documents for comprehensive analysis\n    select: \"id,client,category,fileName,content,uploadedAt,blobPath\",\n    count: true\n  };\n\n  const searchUrl = `https://${searchService}.search.windows.net/indexes/${indexName}/docs/search?api-version=${apiVersion}`;\n\n  console.log('Fetching all documents for client:', clientName);\n\n  const response = await this.helpers.httpRequest({\n    method: 'POST',\n    url: searchUrl,\n    headers: {\n      'api-key': adminKey,\n      'Content-Type': 'application/json'\n    },\n    body: searchRequest,\n    json: true\n  });\n\n  const results = response.value || [];\n  const totalResults = response['@odata.count'] || results.length;\n\n  console.log(`Found ${totalResults} documents for client: ${clientName}`);\n\n  if (results.length === 0) {\n    return `I don't have any documents for client \"${clientName}\". Please check the client name or ensure documents have been uploaded and indexed.`;\n  }\n\n  // Analyze and categorize the documents\n  let clientSummary = `# ${clientName.toUpperCase()} CLIENT OVERVIEW\\\\n\\\\n`;\n  \n  // Document statistics\n  const docsByCategory = {};\n  const totalDocs = results.length;\n  let latestUpload = null;\n  \n  results.forEach(doc => {\n    const category = doc.category || 'unknown';\n    if (!docsByCategory[category]) {\n      docsByCategory[category] = [];\n    }\n    docsByCategory[category].push(doc);\n    \n    // Track latest upload\n    if (doc.uploadedAt) {\n      const uploadDate = new Date(doc.uploadedAt);\n      if (!latestUpload || uploadDate > latestUpload) {\n        latestUpload = uploadDate;\n      }\n    }\n  });\n\n  clientSummary += `📊 **Document Summary:**\\\\n`;\n  clientSummary += `- Total Documents: ${totalDocs}\\\\n`;\n  if (latestUpload) {\n    clientSummary += `- Last Updated: ${latestUpload.toLocaleDateString()}\\\\n`;\n  }\n  clientSummary += `- Document Categories:\\\\n`;\n  Object.keys(docsByCategory).forEach(category => {\n    clientSummary += `  • ${category.charAt(0).toUpperCase() + category.slice(1)}: ${docsByCategory[category].length} documents\\\\n`;\n  });\n  clientSummary += `\\\\n`;\n\n  // Extract key project information\n  const projectInfo = extractProjectInfo(results);\n  if (projectInfo.length > 0) {\n    clientSummary += `🏗️ **Project Information:**\\\\n`;\n    projectInfo.forEach(info => {\n      clientSummary += `${info}\\\\n`;\n    });\n    clientSummary += `\\\\n`;\n  }\n\n  // Extract financial information\n  const financialInfo = extractFinancialInfo(results);\n  if (financialInfo.length > 0) {\n    clientSummary += `💰 **Financial Summary:**\\\\n`;\n    financialInfo.forEach(info => {\n      clientSummary += `${info}\\\\n`;\n    });\n    clientSummary += `\\\\n`;\n  }\n\n  // Extract key specifications and materials\n  const specsInfo = extractSpecifications(results);\n  if (specsInfo.length > 0) {\n    clientSummary += `🔧 **Key Specifications:**\\\\n`;\n    specsInfo.forEach(info => {\n      clientSummary += `${info}\\\\n`;\n    });\n    clientSummary += `\\\\n`;\n  }\n\n  // Enhanced Document Breakdown with PDF previews\n  clientSummary += `📁 **Document Breakdown with Previews:**\\\\n\\\\n`;\n  Object.keys(docsByCategory).forEach(category => {\n    if (docsByCategory[category].length > 0) {\n      clientSummary += `**${category.charAt(0).toUpperCase() + category.slice(1)} (${docsByCategory[category].length}):**\\\\n`;\n      docsByCategory[category].slice(0, 8).forEach((doc, index) => { // Show up to 8 docs per category\n        const fileName = doc.fileName || 'Unknown file';\n        const uploadDate = doc.uploadedAt ? new Date(doc.uploadedAt).toLocaleDateString() : '';\n        \n        // Create inline PDF preview for PDF files\n        if (fileName.toLowerCase().endsWith('.pdf')) {\n          const pdfUrl = createInlinePDFUrl(clientName, category, fileName);\n          const shortFileName = fileName.length > 50 ? fileName.substring(0, 47) + '...' : fileName;\n          clientSummary += `${index + 1}. **${shortFileName}**${uploadDate ? ` (${uploadDate})` : ''}\\\\n`;\n          clientSummary += `   [VIEWER:${pdfUrl}|${shortFileName}|Doc-${index+1}|${category}|${category}]\\\\n`;\n        } else {\n          clientSummary += `${index + 1}. ${fileName}${uploadDate ? ` (${uploadDate})` : ''}\\\\n`;\n        }\n      });\n      if (docsByCategory[category].length > 8) {\n        clientSummary += `   ... and ${docsByCategory[category].length - 8} more documents\\\\n`;\n      }\n      clientSummary += `\\\\n`;\n    }\n  });\n\n  // Add contact and project details if found\n  const contactInfo = extractContactInfo(results);\n  if (contactInfo) {\n    clientSummary += `📞 **Contact Information:**\\\\n${contactInfo}\\\\n\\\\n`;\n  }\n\n  clientSummary += `💡 **Quick Actions:**\\\\n`;\n  clientSummary += `- Ask me \"show me drawings\" to see architectural drawings\\\\n`;\n  clientSummary += `- Ask \"what's the painting scope?\" for detailed paint specifications\\\\n`;\n  clientSummary += `- Ask \"show me proposals\" to see all proposal documents\\\\n`;\n  clientSummary += `- For specific questions, just ask about any aspect of the project\\\\n`;\n\n  console.log('Generated comprehensive client summary with PDF previews');\n  return clientSummary;\n\n} catch (error) {\n  console.error('Client summary error:', error);\n  return `Error generating summary for client \"${clientName}\": ${error.message}. Please try again.`;\n}\n\n// Enhanced function to create inline PDF URLs\nfunction createInlinePDFUrl(clientName, category, fileName) {\n  const baseUrl = 'https://saxtechfcs.blob.core.windows.net/fcs-clients';\n  const path = `FCS-OriginalClients/${clientName}/${category}/${fileName}`;\n  \n  // Use the same SAS token format as the fixed Client Search\n  const sasParams = new URLSearchParams({\n    'sp': 'racwdl',\n    'st': '2025-08-08T05:00:57Z',\n    'se': '2030-08-08T13:15:57Z',\n    'spr': 'https',\n    'sv': '2024-11-04',\n    'sr': 'c',\n    'sig': 'lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2/rnIg='\n  });\n  \n  // Properly encode the entire URL\n  const encodedPath = encodeURI(path);\n  const fullUrl = `${baseUrl}/${encodedPath}?${sasParams.toString()}`;\n  \n  return fullUrl;\n}\n\n// Helper functions to extract specific information (same as before)\nfunction extractProjectInfo(results) {\n  const projectInfo = [];\n  const projectNames = new Set();\n  \n  results.forEach(doc => {\n    if (doc.content) {\n      const content = doc.content.toLowerCase();\n      \n      // Extract project names\n      const projectMatches = content.match(/(?:project|contract|job)[\\s:]*([^\\r\\n]+)/gi);\n      if (projectMatches) {\n        projectMatches.forEach(match => {\n          const cleaned = match.replace(/(?:project|contract|job)[\\s:]*/gi, '').trim();\n          if (cleaned.length > 10 && cleaned.length < 100) {\n            projectNames.add(cleaned);\n          }\n        });\n      }\n      \n      // Extract building information\n      const buildingMatches = content.match(/building(?:s)?\\s*(?:#\\s*)?(\\d+(?:\\s*(?:to|[-–])\\s*\\d+)?)/gi);\n      if (buildingMatches) {\n        buildingMatches.forEach(match => {\n          projectInfo.push(`- Buildings: ${match}`);\n        });\n      }\n    }\n  });\n  \n  // Add unique project names\n  Array.from(projectNames).slice(0, 3).forEach(name => {\n    projectInfo.push(`- Project: ${name}`);\n  });\n  \n  return projectInfo;\n}\n\nfunction extractFinancialInfo(results) {\n  const financialInfo = [];\n  const amounts = [];\n  \n  results.forEach(doc => {\n    if (doc.content) {\n      const content = doc.content;\n      \n      // Extract dollar amounts\n      const moneyMatches = content.match(/\\$[\\d,]+(?:\\.\\d{2})?/g);\n      if (moneyMatches) {\n        moneyMatches.forEach(amount => {\n          const numericValue = parseInt(amount.replace(/[$,]/g, ''));\n          if (numericValue >= 1000) { // Only significant amounts\n            amounts.push({ amount, value: numericValue });\n          }\n        });\n      }\n      \n      // Extract specific cost categories\n      const costMatches = content.match(/(painting|resinous flooring|architectural)[^$]*\\$[\\d,]+/gi);\n      if (costMatches) {\n        costMatches.forEach(match => {\n          financialInfo.push(`- ${match.trim()}`);\n        });\n      }\n    }\n  });\n  \n  // Add largest amounts found\n  const sortedAmounts = amounts.sort((a, b) => b.value - a.value).slice(0, 5);\n  sortedAmounts.forEach(item => {\n    if (item.value >= 10000) { // Only show amounts $10k+\n      financialInfo.push(`- Contract Value: ${item.amount}`);\n    }\n  });\n  \n  return [...new Set(financialInfo)]; // Remove duplicates\n}\n\nfunction extractSpecifications(results) {\n  const specs = [];\n  \n  results.forEach(doc => {\n    if (doc.content) {\n      const content = doc.content;\n      \n      // Paint specifications\n      const paintSpecs = content.match(/(?:sherwin williams?|benjamin moore|sw\\s+\\d+|color|epoxy paint)[^.\\r\\n]*(?:\\.|$)/gi);\n      if (paintSpecs) {\n        paintSpecs.slice(0, 3).forEach(spec => {\n          specs.push(`- Paint: ${spec.trim()}`);\n        });\n      }\n      \n      // Flooring specifications\n      const flooringSpecs = content.match(/(?:ceramic carpet|resinous|epoxy flooring|gp\\d+)[^.\\r\\n]*(?:\\.|$)/gi);\n      if (flooringSpecs) {\n        flooringSpecs.slice(0, 3).forEach(spec => {\n          specs.push(`- Flooring: ${spec.trim()}`);\n        });\n      }\n      \n      // Coverage specifications\n      const coverageSpecs = content.match(/\\d+\\s*(?:sq\\.?\\s*ft\\.?|sqft)/gi);\n      if (coverageSpecs) {\n        const uniqueCoverage = [...new Set(coverageSpecs)].slice(0, 3);\n        uniqueCoverage.forEach(coverage => {\n          specs.push(`- Coverage: ${coverage}`);\n        });\n      }\n    }\n  });\n  \n  return [...new Set(specs)].slice(0, 8); // Limit to 8 unique specs\n}\n\nfunction extractContactInfo(results) {\n  let contactInfo = '';\n  \n  results.forEach(doc => {\n    if (doc.content && !contactInfo) {\n      const content = doc.content;\n      \n      // Extract company and contact information\n      const companyMatch = content.match(/(?:dear|attn:|attention:)\\s*([^,\\r\\n]+)/i);\n      if (companyMatch) {\n        contactInfo += `Contact: ${companyMatch[1].trim()}\\n`;\n      }\n      \n      // Extract phone numbers\n      const phoneMatch = content.match(/(?:tel|phone)[:,\\s]*(\\(\\d{3}\\)\\s*\\d{3}-\\d{4}|\\d{3}[.-]\\d{3}[.-]\\d{4})/i);\n      if (phoneMatch) {\n        contactInfo += `Phone: ${phoneMatch[1]}\\n`;\n      }\n      \n      // Extract addresses\n      const addressMatch = content.match(/\\d+\\s+[^,\\r\\n]+(?:street|st|avenue|ave|road|rd)[^,\\r\\n]*/i);\n      if (addressMatch) {\n        contactInfo += `Address: ${addressMatch[0]}\\n`;\n      }\n    }\n  });\n  \n  return contactInfo || null;\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        -352,
        -1680
      ],
      "id": "7e310594-3526-439d-991a-15ed74633105",
      "name": "Client Summary"
    },
    {
      "parameters": {
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients?restype=container&comp=list&prefix=FCS-OriginalClients/{{ $node[\"Extract Delete Client Info\"].json.clientName }}/&sp=racwdl&st=2025-08-07T21:44:55Z&se=2030-08-08T05:59:55Z&spr=https&sv=2024-11-04&sr=c&sig=AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo%3D",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-version",
              "value": "2024-11-04"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "e6764e7d-fbb3-4fb2-a6cf-2f7ed660d556",
      "name": "List Client Blobs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1600,
        -1008
      ]
    },
    {
      "parameters": {
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients?restype=container&comp=list&prefix=FCS-ConvertedClients/{{ $node[\"Extract Delete Client Info\"].json.clientName }}/&sp=racwdl&st=2025-08-07T21:44:55Z&se=2030-08-08T05:59:55Z&spr=https&sv=2024-11-04&sr=c&sig=AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo%3D",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-version",
              "value": "2024-11-04"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "1db42c4a-5188-4c97-9441-1bcebfe5ed49",
      "name": "List Converted Client Blobs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1360,
        -1008
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the client info from the extraction node\nconst clientData = $node[\"Extract Delete Client Info\"].json;\nconst clientId = clientData.clientId;\nconst clientName = clientData.clientName;\n\n// Parse the XML response from blob listing (ConvertedClients)\nconst convertedXmlResponse = $json.data || '';\n\n// Parse the XML response from original clients listing\nconst originalXmlResponse = $node[\"List Client Blobs\"].json.data || '';\n\nconst blobPaths = [];\n\n// Extract blob names from Original XML\nconst originalBlobMatches = originalXmlResponse.match(/<Name>([^<]+)<\\/Name>/g) || [];\nconst originalBlobPaths = originalBlobMatches.map(match => {\n  const name = match.replace(/<Name>|<\\/Name>/g, '');\n  return name;\n});\n\n// Extract blob names from Converted XML\nconst convertedBlobMatches = convertedXmlResponse.match(/<Name>([^<]+)<\\/Name>/g) || [];\nconst convertedBlobPaths = convertedBlobMatches.map(match => {\n  const name = match.replace(/<Name>|<\\/Name>/g, '');\n  return name;\n});\n\nconsole.log(`Found ${originalBlobPaths.length} blobs in OriginalClients for: ${clientName}`);\nconsole.log(`Found ${convertedBlobPaths.length} blobs in ConvertedClients for: ${clientName}`);\n\n// Add all found blobs to deletion list\nblobPaths.push(...originalBlobPaths);\nblobPaths.push(...convertedBlobPaths);\n\n// If no blobs found, still try to delete standard structure\nif (blobPaths.length === 0) {\n  console.log('No blobs found, attempting standard folder structure...');\n  const categories = ['drawings', 'estimates', 'proposals', 'specs', 'signed-contracts'];\n  \n  for (const category of categories) {\n    blobPaths.push(`FCS-OriginalClients/${clientName}/${category}/.placeholder`);\n    blobPaths.push(`FCS-ConvertedClients/${clientName}/${category}/.placeholder`);\n  }\n  \n  blobPaths.push(`FCS-OriginalClients/${clientName}/.metadata/client.json`);\n  blobPaths.push(`FCS-ConvertedClients/${clientName}/.metadata/client.json`);\n  blobPaths.push(`FCS-OriginalClients/${clientName}/.placeholder`);\n  blobPaths.push(`FCS-ConvertedClients/${clientName}/.placeholder`);\n}\n\n// Create delete operations for each blob\nconst deleteOperations = blobPaths.map(path => ({\n  json: {\n    blobPath: path,\n    clientId: clientId,\n    clientName: clientName,\n    totalBlobs: blobPaths.length,\n    url: `https://saxtechfcs.blob.core.windows.net/fcs-clients/${path}?sp=racwdl&st=2025-08-07T21:44:55Z&se=2030-08-08T05:59:55Z&spr=https&sv=2024-11-04&sr=c&sig=AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo%3D`\n  }\n}));\n\nconsole.log(`Created ${deleteOperations.length} delete operations for: ${clientName}`);\n\nreturn deleteOperations;"
      },
      "id": "d51f8aaf-5364-4613-b8df-8b24569493ce",
      "name": "Parse Blobs and Create Delete Ops",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1136,
        -1008
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-version",
              "value": "2024-11-04"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "id": "120ba0a3-beb9-4614-a90d-9ad643488b0d",
      "name": "Delete Blob Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -912,
        -1008
      ]
    },
    {
      "parameters": {
        "jsCode": "// Collect all the deletion results with better error handling\nconst results = [];\nlet clientName = 'unknown';\nlet clientId = 'unknown';\nlet totalBlobs = 0;\n\n// Get all input items - these contain both HTTP response and original request data\nconst allInputs = $input.all();\n\nconsole.log(`Processing ${allInputs.length} deletion results`);\nconsole.log('First item data:', JSON.stringify(Object.keys(allInputs[0]?.json || {})));\n\n// Get the original delete operations data from Parse Blobs node\nlet deleteOpsData = [];\ntry {\n  const parseBlobsNode = $('Parse Blobs and Create Delete Ops').all();\n  deleteOpsData = parseBlobsNode.map(item => item.json);\n  console.log(`Retrieved ${deleteOpsData.length} original delete operations`);\n} catch (e) {\n  console.log('Could not retrieve Parse Blobs data:', e.message);\n}\n\n// Process each deletion result\nfor (let i = 0; i < allInputs.length; i++) {\n  const item = allInputs[i];\n  const originalData = deleteOpsData[i] || {};\n  \n  // Get client info from original data or response\n  if (clientName === 'unknown') {\n    clientName = originalData.clientName || item.json.clientName || 'unknown';\n  }\n  if (clientId === 'unknown') {\n    clientId = originalData.clientId || item.json.clientId || 'unknown';\n  }\n  if (totalBlobs === 0) {\n    totalBlobs = originalData.totalBlobs || item.json.totalBlobs || allInputs.length;\n  }\n  \n  // Get the blob path from original data\n  const blobPath = originalData.blobPath || item.json.blobPath || item.json.url || 'unknown';\n  \n  // Handle the response - check for statusCode in different places\n  let statusCode = item.json.statusCode;\n  \n  // If we have a fullResponse structure, extract from there\n  if (!statusCode && item.json.statusCode !== undefined) {\n    statusCode = item.json.statusCode;\n  }\n  \n  // Check headers for status\n  if (!statusCode && item.json.headers) {\n    // Check for x-ms-request-id or other headers that indicate success\n    if (item.json.headers['x-ms-request-id'] || item.json.headers['x-ms-delete-type-permanent']) {\n      statusCode = 202; // Successful delete\n    }\n  }\n  \n  // For Azure Blob Storage DELETE operations:\n  // - 202 = Accepted (delete initiated)\n  // - 404 = Not Found (already deleted or never existed - still consider success)\n  // - 200/201 = Also success\n  // - 0 or undefined = Network error or request failed\n  const isSuccess = statusCode === 200 || statusCode === 201 || statusCode === 202 || statusCode === 404;\n  \n  console.log(`Delete result ${i+1}/${allInputs.length} for ${blobPath}: HTTP ${statusCode || 'unknown'} - ${isSuccess ? 'SUCCESS' : 'FAILED'}`);\n  \n  results.push({\n    path: blobPath,\n    status: isSuccess ? 'deleted' : 'failed',\n    statusCode: statusCode || 0,\n    timestamp: new Date().toISOString()\n  });\n}\n\n// If we still don't have client info, try to get it from the webhook data\nif (clientName === 'unknown' || clientId === 'unknown') {\n  try {\n    const extractData = $('Extract Delete Client Info').first();\n    if (extractData && extractData.json) {\n      clientName = extractData.json.clientName || clientName;\n      clientId = extractData.json.clientId || clientId;\n      console.log(`Retrieved client info from Extract node: ${clientName} (${clientId})`);\n    }\n  } catch (e) {\n    console.log('Could not retrieve client info from Extract node:', e.message);\n  }\n}\n\n// Count successful deletions\nconst successCount = results.filter(r => r.status === 'deleted').length;\nconst failedCount = results.filter(r => r.status === 'failed').length;\n\nconsole.log(`Delete summary: ${successCount} succeeded, ${failedCount} failed out of ${results.length} total`);\n\n// Prepare for search index cleanup\nconst deleteResult = {\n  status: failedCount === 0 ? 'success' : 'partial_success',\n  operation: 'DELETE_CLIENT',\n  clientId: clientId,\n  clientName: clientName,\n  deletedCount: successCount,\n  failedCount: failedCount,\n  totalAttempted: results.length,\n  message: failedCount === 0 \n    ? `Client \"${clientName}\" deleted from storage (${successCount} files), proceeding with search index cleanup`\n    : `Client \"${clientName}\" partially deleted: ${successCount} successful, ${failedCount} failed`,\n  timestamp: new Date().toISOString(),\n  details: results,\n  requiresSearchIndexCleanup: true\n};\n\nconsole.log(`Delete operation completed for client: ${clientName} - ${successCount} deleted, ${failedCount} failed - proceeding to search index cleanup`);\n\nreturn [{\n  json: deleteResult\n}];"
      },
      "id": "afeb5ed6-c56a-4492-8e85-972a9c7f0c89",
      "name": "Process Delete Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -688,
        -1008
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the blob delete result\nconst deleteResult = $('Process Delete Results').first().json;\n\n// Get the search index deletion response from previous node\nconst deleteDocsData = $node['Delete Found Documents'].json;\nconst searchResponse = $json;\n\n// Determine search index status\nlet searchIndexStatus = 'skipped';\nlet searchDeletedCount = 0;\nlet searchMessage = 'No search index cleanup needed';\n\nconsole.log('Search deletion response keys:', Object.keys(searchResponse));\nconsole.log('Delete docs data:', {\n  searchDeleteSkipped: deleteDocsData?.searchDeleteSkipped,\n  deletedCount: deleteDocsData?.deletedCount\n});\n\n// Check if search deletion was skipped (no documents to delete)\nif (deleteDocsData?.searchDeleteSkipped) {\n  searchIndexStatus = 'skipped';\n  searchDeletedCount = 0;\n  searchMessage = 'No documents in search index to delete';\n} else {\n  // Azure Search returns the operation results in the value array\n  // Each item in the array has a status field indicating success\n  // A successful response has statusCode in the 200 range\n  let statusCode = searchResponse.statusCode;\n  \n  // If statusCode is missing, check for the value array which indicates success\n  if (!statusCode && searchResponse.value !== undefined) {\n    // If we have a value array, the request was successful\n    statusCode = 200;\n  }\n  \n  // Also check for @odata.context which indicates a successful response\n  if (!statusCode && searchResponse['@odata.context']) {\n    statusCode = 200;\n  }\n  \n  // Successful deletion\n  if (statusCode === 200 || statusCode === 201 || statusCode === 202 || statusCode === 204) {\n    searchIndexStatus = 'success';\n    searchDeletedCount = deleteDocsData?.deletedCount || 0;\n    searchMessage = `Successfully deleted ${searchDeletedCount} documents from search index`;\n  } else if (statusCode) {\n    // Failed with specific status code\n    searchIndexStatus = 'failed';\n    searchMessage = `Failed to delete from search index: HTTP ${statusCode}`;\n  } else {\n    // No status code available - check if we have any indication of success\n    if (searchResponse.value && Array.isArray(searchResponse.value)) {\n      // We have a value array, assume success\n      searchIndexStatus = 'success';\n      searchDeletedCount = deleteDocsData?.deletedCount || searchResponse.value.length || 0;\n      searchMessage = `Successfully deleted ${searchDeletedCount} documents from search index`;\n    } else {\n      // Unable to determine status\n      searchIndexStatus = 'failed';\n      searchMessage = 'Failed to delete from search index: Unable to determine status';\n    }\n  }\n}\n\n// Build the final result\nconst finalResult = {\n  ...deleteResult,\n  searchIndexCleanup: {\n    status: searchIndexStatus,\n    deletedDocuments: searchDeletedCount,\n    timestamp: new Date().toISOString(),\n    message: searchMessage\n  },\n  overallStatus: deleteResult.status === 'success' && (searchIndexStatus === 'success' || searchIndexStatus === 'skipped') \n    ? 'success' \n    : 'partial_success',\n  message: `Client \"${deleteResult.clientName}\": ${deleteResult.deletedCount} blob files deleted, ${searchDeletedCount} search documents removed`,\n  searchIndexNote: searchMessage\n};\n\nconsole.log(`Delete operation completed - Blobs: ${deleteResult.deletedCount} deleted, Search Index: ${searchDeletedCount} deleted (status: ${searchIndexStatus})`);\n\nreturn [{\n  json: finalResult\n}];"
      },
      "id": "8387c899-8a42-4445-9b03-c155859b5d4e",
      "name": "Finalize Delete Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        -912
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"api-key\": \"UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"search\": \"*\",\n  \"filter\": \"client eq '{{ $json.clientName }}'\",\n  \"select\": \"id\",\n  \"top\": 1000\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -688,
        -816
      ],
      "id": "54d646d5-2c95-4a70-bfb9-0ef0a8be662b",
      "name": "Cleanup Search Index1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"search\": \"*\",\n  \"filter\": \"client eq '{{ $node[\"Process Delete Results\"].json.clientName }}'\",\n  \"select\": \"id,client,category,fileName\",\n  \"top\": 1000\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -464,
        -912
      ],
      "id": "153d24a2-5a6a-48ec-9af0-0d300e40e92c",
      "name": "Find Documents to Delete"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.searchDeleteSkipped ? JSON.stringify({ \"value\": [] }) : JSON.stringify({ \"value\": $json.deleteActions }) }}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        -912
      ],
      "id": "5b82005b-1c4a-463a-a8a3-7667239473dc",
      "name": "Delete From Search Index"
    },
    {
      "parameters": {
        "content": "## Delete Client\n",
        "height": 416,
        "width": 2816,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2160,
        -1072
      ],
      "id": "34e1501a-1d7b-491c-b4de-a446aa8ffa2f",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "199075d3-da4b-45cf-81e4-aef5fb6c601b",
      "name": "Delete Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        464,
        -912
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/clients/delete",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "cb3ec6c0-9eca-44ab-8150-a5e77d49e5c1",
      "name": "Delete Client Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2048,
        -1008
      ],
      "webhookId": "ask-foreman-delete-client"
    },
    {
      "parameters": {
        "jsCode": "// Fixed file preparation with binary conversion for Azure upload\nconst inputData = $input.all()[0].json;\n\n// Handle both direct JSON and webhook body structure\nconst body = inputData.body || inputData;\n\n// Extract file data (base64 string)\nconst fileData = body.file || body.data || '';\nconst fileName = body.fileName || body.name || 'unknown.pdf';\nconst mimeType = body.mimeType || body.type || 'application/pdf';\nconst category = body.category || 'uncategorized';\nconst client = body.client || 'general';\nconst clientName = body.clientName || '';\n\n// Check if file data exists\nif (!fileData) {\n    throw new Error('No file data provided in upload request');\n}\n\n// Calculate approximate file size from base64\nconst base64Length = fileData.length;\nconst padding = (fileData.match(/=/g) || []).length;\nconst fileSize = Math.floor((base64Length * 3) / 4) - padding;\n\n// Determine if file is large (> 10MB)\nconst isLargeFile = fileSize > 10 * 1024 * 1024;\n\nconsole.log(`File: ${fileName}, Size: ${(fileSize / 1024 / 1024).toFixed(2)} MB, Large: ${isLargeFile}`);\n\n// Convert base64 to binary buffer for Azure upload\nconst buffer = Buffer.from(fileData, 'base64');\n\n// Return data with both JSON metadata and binary data\nreturn {\n    json: {\n        // Keep base64 for any nodes that need it\n        file: fileData,\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        fileSizeMB: (fileSize / 1024 / 1024).toFixed(2),\n        isLargeFile: isLargeFile,\n        uploadedAt: new Date().toISOString(),\n        // Azure blob URLs\n        originalBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-originalclients/${client}/${category}/${fileName}`,\n        processedBlobUrl: `https://scstoreprd.blob.core.windows.net/fcs-processedclients/${client}/${category}/${fileName}.jsonl`\n    },\n    binary: {\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileName.split('.').pop() || 'pdf'\n        }\n    }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1840,
        -1008
      ],
      "id": "2d3a9e89-75bd-4726-b4d8-33ef97a25f23",
      "name": "Extract Delete Client Info"
    },
    {
      "parameters": {
        "content": "## Azure Search Index Schema \n\nIndex \"fcs-construction-docs-index-v2\" has ALL these fields:\n\n✅ AVAILABLE FIELDS:\n- id (Edm.String) - Key field\n- content (Edm.String) - Searchable text\n- contentVector (Collection) - For embeddings\n- client (Edm.String) - Searchable, Filterable\n- category (Edm.String) - Searchable, Filterable\n- fileName (Edm.String) - Searchable\n- uploadedAt (Edm.DateTimeOffset) - Filterable\n- blobPath (Edm.String) - Original file path\n- mimeType (Edm.String) - Filterable \n- convertedPath (Edm.String) \n- metadata (Edm.String) - Optional \n",
        "height": 472,
        "width": 528,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        704,
        -1280
      ],
      "id": "3d1ac29f-e394-4bfe-91a0-3cc17988bbe8",
      "name": "Search Index Schema"
    },
    {
      "parameters": {
        "jsCode": "// Get the client info from the delete result\nconst deleteResult = $node[\"Process Delete Results\"].json;\nconst clientName = deleteResult.clientName;\nconst clientId = deleteResult.clientId;\n\n// Get search results with the actual fields from the index\nconst searchResults = $json.value || [];\n\nconsole.log(`Found ${searchResults.length} documents in search index for client: ${clientName}`);\n\n// If no documents found, return success without calling Azure Search\nif (searchResults.length === 0) {\n  console.log('No documents found to delete from search index');\n  \n  return [{\n    json: {\n      searchDeleteSkipped: true,\n      deletedCount: 0,\n      message: 'No documents in search index to delete',\n      status: 'success',\n      clientName: clientName,\n      clientId: clientId,\n      value: []\n    }\n  }];\n}\n\n// Log what we found\nsearchResults.slice(0, 5).forEach(doc => {\n  console.log(`  - Document: ${doc.id} (client: ${doc.client}, category: ${doc.category})`);\n});\n\n// If we have documents, prepare the delete payload using only the id field\nconst deleteActions = searchResults.map(doc => ({\n  \"@search.action\": \"delete\",\n  \"id\": doc.id  // Only need the id to delete\n}));\n\nconsole.log(`Prepared ${deleteActions.length} delete actions for client: ${clientName}`);\n\n// Return the delete actions to be processed by next node\nreturn [{\n  json: {\n    searchDeleteSkipped: false,\n    deleteActions: deleteActions,\n    deletedCount: deleteActions.length,\n    message: `Found ${deleteActions.length} documents to delete from search index`,\n    status: 'pending',\n    clientName: clientName,\n    clientId: clientId\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        -912
      ],
      "id": "f952bd43-f868-4399-85bb-33f8a682e40b",
      "name": "Delete Found Documents"
    },
    {
      "parameters": {
        "content": "## Index Operations",
        "height": 992,
        "width": 1488,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -400,
        -640
      ],
      "id": "f8030aae-cd28-4e40-b257-7d8e05fc875a",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/index/delete",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "23ad6c2f-47bd-4ad4-84b8-86faa9dfe040",
      "name": "Delete Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -304,
        -176
      ],
      "webhookId": "c3a8c414-ea0d-41a8-b056-7903c294ce5f"
    },
    {
      "parameters": {
        "jsCode": "const body = $json.body || $json;\nconst documentIds = body.documentIds || [];\n\nconst batch = {\n  value: documentIds.map(id => ({\n    '@search.action': 'delete',\n    id: id\n  }))\n};\n\nreturn batch;"
      },
      "id": "b7d2dd4e-7cd5-4bda-a8f5-1da49a04c0e7",
      "name": "Prepare Delete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -96,
        -176
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "fd888b34-7642-420e-93cb-aff763559e32",
      "name": "Delete Docs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        96,
        -176
      ]
    },
    {
      "parameters": {
        "jsCode": "return {\n  success: true,\n  deletedCount: $json.value ? $json.value.length : 0\n};"
      },
      "id": "c4c48de2-a89e-4529-96b1-311fd5d90051",
      "name": "Format Delete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        -176
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "095a8d70-83b9-4e1c-b62e-ce6e3ba6d928",
      "name": "Respond Delete",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        496,
        -176
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/index/clear",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "7e1d865a-23de-4ac8-a161-dacbe1b4842a",
      "name": "Clear Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -304,
        32
      ],
      "webhookId": "39ad35d7-c009-404b-b651-b35061acd4e6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\"search\": \"*\", \"top\": 1000, \"select\": \"id\"}",
        "options": {}
      },
      "id": "ad9c7348-c50d-44cf-a2bf-f9a40e4c41e7",
      "name": "Get All IDs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -96,
        32
      ]
    },
    {
      "parameters": {
        "jsCode": "const documents = $json.value || [];\n\nif (documents.length === 0) {\n  return {\n    success: true,\n    deletedCount: 0,\n    message: \"Index is already empty\",\n    skip: true\n  };\n}\n\nconst batch = {\n  value: documents.map(doc => ({\n    '@search.action': 'delete',\n    id: doc.id\n  }))\n};\n\nreturn {\n  batch: batch,\n  count: documents.length,\n  skip: false\n};"
      },
      "id": "3b4e09de-32b8-43b2-8182-a0e19f72af0c",
      "name": "Prepare Clear",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        96,
        32
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.skip }}",
              "operation": "notEqual",
              "value2": true
            }
          ]
        }
      },
      "id": "2c43f8a2-681d-4b74-ae30-8861769c38f2",
      "name": "IF Has Docs",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        304,
        32
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.batch) }}",
        "options": {}
      },
      "id": "191acb42-f5f0-4c02-84f7-171e44c6bf24",
      "name": "Delete All",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        496,
        -16
      ]
    },
    {
      "parameters": {
        "jsCode": "const count = $('clear-prepare').first().json.count || 0;\nreturn {\n  success: true,\n  deletedCount: count,\n  message: `Cleared ${count} documents from index`\n};"
      },
      "id": "4c857b60-2d60-4eb1-af39-103b5f739e3d",
      "name": "Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        688,
        48
      ]
    },
    {
      "parameters": {
        "jsCode": "return $json;"
      },
      "id": "0a09550d-7674-45d4-8965-0e0bf5f104d1",
      "name": "Empty Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        192
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "7f96423f-a5ad-4d33-a295-c95f3606a3df",
      "name": "Respond Clear",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        896,
        48
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/index/search",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": false
        }
      },
      "id": "21a1395d-4c25-4173-92ab-b9ebd4b2813c",
      "name": "Search Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -304,
        -368
      ],
      "webhookId": "ed6978ec-31e1-4eb6-9d0e-9b2c9f7d2894"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.body) }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "999cd9ff-4e0e-4c01-b60c-b09fd7b6cc3b",
      "name": "Azure Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -96,
        -368
      ]
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "1a60300a-351a-4dcf-971c-67f19b168569",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        96,
        -368
      ]
    },
    {
      "parameters": {
        "path": "ask-foreman/index/stats",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "id": "d7611106-557a-4c3c-9db7-2650166cfcc7",
      "name": "Stats Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -304,
        -560
      ],
      "webhookId": "d0cd3870-062a-4f9a-8a24-d27ad90f9d41"
    },
    {
      "parameters": {
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/stats?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "893e5c44-93fe-4b0c-8091-467466a95f9b",
      "name": "Azure Stats",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -96,
        -560
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "0504f669-e302-463a-a958-963747ca23de",
      "name": "Respond Stats",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        96,
        -560
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/files/delete",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false,
          "rawBody": true
        }
      },
      "id": "d449bc35-e7fe-45e9-994e-c38a803d7326",
      "name": "Delete File Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2064,
        -528
      ],
      "webhookId": "ask-foreman-delete-file"
    },
    {
      "parameters": {
        "jsCode": "// Universal \"Prepare File Data\" node code for n8n\n// Handles multiple possible webhook data structures\n\nconst inputItem = $input.first();\n\n// Initialize variables\nlet fileData = null;\nlet fileName = 'document.pdf';\nlet mimeType = 'application/pdf';\nlet category = 'uncategorized';\nlet client = 'general';\nlet clientName = 'general';\n\nconsole.log('=== Prepare File Data - Universal Handler ===');\n\n// Strategy 1: Check if data comes from a previous node (like Check File Size)\nif (inputItem.json && inputItem.json.fileBase64) {\n    console.log('Found fileBase64 from previous node');\n    fileData = inputItem.json.fileBase64;\n    fileName = inputItem.json.fileName || fileName;\n    mimeType = inputItem.json.mimeType || mimeType;\n    category = inputItem.json.category || category;\n    client = inputItem.json.client || client;\n    clientName = inputItem.json.clientName || clientName;\n}\n// Strategy 2: Check if data is directly in json\nelse if (inputItem.json && inputItem.json.file) {\n    console.log('Found file in json root');\n    fileData = inputItem.json.file;\n    fileName = inputItem.json.fileName || fileName;\n    mimeType = inputItem.json.mimeType || mimeType;\n    category = inputItem.json.category || category;\n    client = inputItem.json.client || client;\n    clientName = inputItem.json.clientName || clientName;\n}\n// Strategy 3: Check if data is in json.body (webhook with body)\nelse if (inputItem.json && inputItem.json.body) {\n    console.log('Found body in json, checking for file data');\n    let body = inputItem.json.body;\n    \n    // Parse if body is a string\n    if (typeof body === 'string') {\n        try {\n            body = JSON.parse(body);\n        } catch (e) {\n            console.error('Failed to parse body string');\n        }\n    }\n    \n    if (body && typeof body === 'object') {\n        fileData = body.file || body.fileBase64 || null;\n        fileName = body.fileName || fileName;\n        mimeType = body.mimeType || mimeType;\n        category = body.category || category;\n        client = body.client || client;\n        clientName = body.clientName || clientName;\n    }\n}\n// Strategy 4: Check if we already have binary data from webhook\nelse if (inputItem.binary && Object.keys(inputItem.binary).length > 0) {\n    console.log('Found existing binary data from webhook');\n    const binaryKey = Object.keys(inputItem.binary)[0];\n    const binaryItem = inputItem.binary[binaryKey];\n    \n    // We already have binary, just pass it through with metadata\n    return {\n        json: {\n            fileName: binaryItem.fileName || fileName,\n            mimeType: binaryItem.mimeType || mimeType,\n            category: inputItem.json?.category || category,\n            client: inputItem.json?.client || client,\n            clientName: inputItem.json?.clientName || client,\n            fileSize: binaryItem.data ? binaryItem.data.length : 0,\n            uploadedAt: new Date().toISOString()\n        },\n        binary: inputItem.binary\n    };\n}\n\n// Validate we found file data\nif (!fileData) {\n    console.error('ERROR: No file data found in any expected location');\n    console.error('Input structure:');\n    console.error('- Has json:', !!inputItem.json);\n    console.error('- Has binary:', !!inputItem.binary);\n    if (inputItem.json) {\n        console.error('- JSON keys:', Object.keys(inputItem.json));\n        console.error('- JSON sample:', JSON.stringify(inputItem.json).substring(0, 500));\n    }\n    throw new Error('No file data found in webhook request - check webhook configuration');\n}\n\n// Calculate file size and convert to binary\nlet fileSize;\nlet buffer;\n\n// Check if fileData is already a buffer\nif (Buffer.isBuffer(fileData)) {\n    console.log('File data is already a buffer');\n    buffer = fileData;\n    fileSize = buffer.length;\n} else if (typeof fileData === 'string') {\n    console.log('File data is base64 string, converting to buffer');\n    // It's a base64 string\n    buffer = Buffer.from(fileData, 'base64');\n    fileSize = buffer.length;\n} else {\n    console.error('Unknown file data type:', typeof fileData);\n    throw new Error('File data is neither a buffer nor a base64 string');\n}\n\n// Get file extension\nconst fileExtension = fileName.split('.').pop() || 'pdf';\n\nconsole.log(`✅ File prepared successfully:`);\nconsole.log(`   - Name: ${fileName}`);\nconsole.log(`   - Size: ${(fileSize / 1024).toFixed(2)} KB`);\nconsole.log(`   - Type: ${mimeType}`);\nconsole.log(`   - Client: ${client}/${clientName}`);\nconsole.log(`   - Category: ${category}`);\n\n// Return both JSON metadata and binary data\nreturn {\n    json: {\n        // Metadata for all downstream nodes\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: fileSize > 10 * 1024 * 1024,\n        uploadedAt: new Date().toISOString(),\n        // Keep base64 for nodes that need it\n        fileBase64: typeof fileData === 'string' ? fileData : buffer.toString('base64')\n    },\n    binary: {\n        // Binary data for Azure upload - using 'data' as the standard field name\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileExtension\n        }\n    }\n};\n"
      },
      "id": "5aa0372e-0f80-43fc-846b-830e43ade161",
      "name": "Extract Delete Parameters",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1856,
        -528
      ]
    },
    {
      "parameters": {
        "jsCode": "// Fixed file size check with proper data extraction\nconst inputData = $input.all()[0].json;\n\n// Handle both direct JSON and webhook body structure\nconst body = inputData.body || inputData;\n\n// Extract file data (base64 string)\nconst fileData = body.file || body.data || '';\nconst fileName = body.fileName || body.name || 'unknown.pdf';\nconst mimeType = body.mimeType || body.type || 'application/pdf';\nconst category = body.category || 'uncategorized';\nconst client = body.client || 'general';\nconst clientName = body.clientName || '';\n\n// Check if file data exists\nif (!fileData) {\n    throw new Error('No file data provided in upload request');\n}\n\n// Calculate approximate file size from base64\n// Base64 increases size by ~33%, so we reverse calculate\nconst base64Length = fileData.length;\nconst padding = (fileData.match(/=/g) || []).length;\nconst fileSize = Math.floor((base64Length * 3) / 4) - padding;\n\n// Determine if file is large (> 10MB)\nconst isLargeFile = fileSize > 10 * 1024 * 1024;\n\nconsole.log(`File: ${fileName}, Size: ${(fileSize / 1024).toFixed(2)} KB, Large: ${isLargeFile}`);\n\n// Return data for next nodes\nreturn {\n    json: {\n        file: fileData,\n        fileName: fileName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: isLargeFile,\n        uploadedAt: new Date().toISOString()\n    }\n};"
      },
      "id": "d46be72c-43fd-47bc-8ecb-f21ee2eb5d8f",
      "name": "Prepare Index Delete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        -528
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.indexDeleteSkipped }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7ae25fad-83e8-4fed-806c-0dd9a4ed3161",
      "name": "Should Delete from Index?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1456,
        -256
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.deletePayload) }}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "d0ad39fe-019f-48c5-b073-70251b17b912",
      "name": "Delete from Search Index",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1056,
        -592
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $node['Extract Delete Parameters'].json.originalPath }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "d961c63c-4a32-43d6-a111-dde97d03541c",
      "name": "Delete Original File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1056,
        -416
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $node['Extract Delete Parameters'].json.convertedPath }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "76a50d64-4ed6-4b20-9124-81a34814518d",
      "name": "Delete Converted File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1056,
        -224
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $node['Extract Delete Parameters'].json.metadataPath }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "4bb04d87-6981-42b3-a600-9655dcea3086",
      "name": "Delete Metadata File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1056,
        -48
      ]
    },
    {
      "parameters": {
        "jsCode": "// Optimized chunking with memory management\nconst content = $input.item.json.convertedContent || $input.item.json.content;\nconst CHUNK_SIZE = 1000; // Characters per chunk\nconst CHUNK_OVERLAP = 200; // Overlap between chunks\n\nlet chunks = [];\nlet text = '';\n\ntry {\n  // Parse content if it's JSON\n  if (typeof content === 'string') {\n    try {\n      const parsed = JSON.parse(content);\n      text = parsed.content || parsed.text || JSON.stringify(parsed);\n    } catch {\n      text = content;\n    }\n  } else {\n    text = JSON.stringify(content);\n  }\n  \n  // Create overlapping chunks with memory efficiency\n  for (let i = 0; i < text.length; i += (CHUNK_SIZE - CHUNK_OVERLAP)) {\n    const chunk = text.slice(i, Math.min(i + CHUNK_SIZE, text.length));\n    if (chunk.trim()) {\n      chunks.push({\n        id: `${$input.item.json.client}_${$input.item.json.fileName}_chunk_${chunks.length}`,\n        content: chunk,\n        index: chunks.length,\n        client: $input.item.json.client,\n        clientName: $input.item.json.clientName,\n        category: $input.item.json.category,\n        fileName: $input.item.json.fileName,\n        chunkOf: $input.item.json.fileName,\n        totalChunks: 0 // Will be updated\n      });\n    }\n    \n    // Free memory periodically\n    if (chunks.length % 50 === 0) {\n      global.gc && global.gc();\n    }\n  }\n  \n  // Update total chunks count\n  chunks = chunks.map(chunk => ({\n    ...chunk,\n    totalChunks: chunks.length\n  }));\n  \n} catch (error) {\n  // Fallback for error cases\n  chunks = [{\n    id: `${$input.item.json.client}_${$input.item.json.fileName}_chunk_0`,\n    content: 'Error processing document: ' + error.message,\n    index: 0,\n    client: $input.item.json.client,\n    clientName: $input.item.json.clientName,\n    category: $input.item.json.category,\n    fileName: $input.item.json.fileName,\n    error: error.message\n  }];\n}\n\nreturn chunks.map(chunk => ({ json: chunk }));"
      },
      "id": "34268088-1cdc-4399-971e-40fdd1d7ea72",
      "name": "Consolidate Delete Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        -320
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "93a70a48-edf4-4fea-891a-d1bc511f763a",
      "name": "Delete Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -624,
        -320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/search?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "{{AZURE_SEARCH_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"search\": \"*\",\n  \"filter\": \"parentDocumentId eq '{{ $json.parentDocumentId }}' or (fileName eq '{{ $json.fileName }}' and client eq '{{ $json.clientName }}')\",\n  \"select\": \"id,fileName,client,parentDocumentId,chunkIndex\",\n  \"top\": 1000\n}",
        "options": {}
      },
      "id": "67d766e1-750c-4d21-9aed-de4e7e07c10d",
      "name": "Find Documents to Delete1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1648,
        -528
      ]
    },
    {
      "parameters": {
        "content": "## Upload and Convert Data\n",
        "height": 384,
        "width": 2624,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2160,
        -1472
      ],
      "id": "543e26ef-6b60-45d3-98c2-eeb88a7cf432",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/upload",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "b0924095-dae5-4f0b-83c7-8f580f64b938",
      "name": "Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2048,
        -1328
      ],
      "webhookId": "ask-foreman-upload"
    },
    {
      "parameters": {
        "jsCode": "// Extract and prepare file data from webhook\nconst inputItem = $input.first();\nconst json = inputItem.json || {};\n\n// Handle both direct JSON and nested body\nconst data = json.body || json;\n\n// Extract file data and metadata\nconst fileData = data.file || data.fileBase64 || '';\nconst fileName = data.fileName || 'document.pdf';\nconst mimeType = data.mimeType || 'application/pdf';\nconst category = data.category || 'uncategorized';\nconst client = data.client || 'general';\nconst clientName = data.clientName || client;\n\nif (!fileData) {\n    throw new Error('No file data provided in upload request');\n}\n\n// Convert base64 to buffer\nconst buffer = Buffer.from(fileData, 'base64');\nconst fileSize = buffer.length;\n\n// Generate safe file names and paths\nconst safeName = fileName.replace(/[^a-zA-Z0-9.-]/g, '_');\nconst timestamp = Date.now();\n\n// Azure blob paths\nconst originalPath = `${client}/${category}/original/${safeName}`;\nconst convertedPath = `${client}/${category}/converted/${safeName.replace(/\\.pdf$/i, '')}.jsonl`;\n\nconsole.log(`Processing: ${fileName} (${(fileSize/1024).toFixed(2)}KB) for client: ${client}`);\n\nreturn {\n    json: {\n        fileName: fileName,\n        safeName: safeName,\n        mimeType: mimeType,\n        category: category,\n        client: client,\n        clientName: clientName,\n        fileSize: fileSize,\n        isLargeFile: fileSize > 10 * 1024 * 1024,\n        originalPath: originalPath,\n        convertedPath: convertedPath,\n        uploadedAt: new Date().toISOString(),\n        fileBase64: fileData,\n        // Azure URLs\n        originalBlobUrl: `https://saxtechfcs.blob.core.windows.net/fcs-clients/FCS-OriginalClients/${originalPath}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D`,\n        convertedBlobUrl: `https://saxtechfcs.blob.core.windows.net/fcs-clients/FCS-OriginalClients/${convertedPath}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D`,\n        // Function app URL\n        functionAppUrl: `https://saxtech-docconverter.azurewebsites.net/api/ConvertDocument?code=KRitpiKC4_teemeHVrLWt8-vJdIvpSkzBFW0co3J4Q3FAzFuYbOMng==`,\n        timestamp: timestamp\n    },\n    binary: {\n        data: {\n            data: buffer,\n            mimeType: mimeType,\n            fileName: fileName,\n            fileExtension: fileName.split('.').pop() || 'pdf'\n        }\n    }\n};"
      },
      "id": "323356dc-55ed-4a24-a4d4-478b0aa67f05",
      "name": "Prepare File Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1840,
        -1328
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.isLargeFile }}",
              "value2": true
            }
          ]
        }
      },
      "id": "e91bb1c7-25e5-493a-947d-62705dcdb7ef",
      "name": "Check File Size",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1600,
        -1328
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/FCS-OriginalClients/{{ $json.originalPath }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "x-ms-blob-content-type",
              "value": "={{ $binary.data.mimeType }}"
            },
            {
              "name": "x-ms-version",
              "value": "2020-10-02"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "id": "70f59728-7ac4-46c7-a621-819fb51c42eb",
      "name": "Upload Original (Small)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1360,
        -1424
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://saxtechfcs.blob.core.windows.net/fcs-clients/FCS-OriginalClients/{{ $json.originalPath }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "x-ms-blob-content-type",
              "value": "=={{ $binary.data.mimeType }}"
            },
            {
              "name": "x-ms-version",
              "value": "2020-10-02"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "id": "938b47fa-b6d7-4167-8088-2784ed35f6d5",
      "name": "Upload Original (Large)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1360,
        -1248
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://saxtech-docconverter.azurewebsites.net/api/ConvertDocument?code=GsqoRnVEcexSaaBTLsQ6NAIw7M_2Qqxg8SdHsYuYuAcBAzFulSx1NA==",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-functions-key",
              "value": "GsqoRnVEcexSaaBTLsQ6NAIw7M_2Qqxg8SdHsYuYuAcBAzFulSx1NA=="
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"BlobUrl\": \"{{ $json.originalBlobUrl }}\",\n  \"FileName\": \"{{ $json.fileName }}\",\n  \"Client\": \"{{ $json.client }}\",\n  \"Category\": \"{{ $json.category }}\"\n}",
        "options": {}
      },
      "id": "96b9b16e-fd1b-400e-a818-e03895ac770a",
      "name": "Convert Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -912,
        -1344
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get data from previous nodes\nconst originalData = $node[\"Prepare File Data\"].json;\nconst conversionResponse = $input.first().json;\n\n// Extract the actual content from the conversion response\n// The response might be nested in body or have success/data structure\nlet documentContent = \"\";\nif (conversionResponse.body) {\n  documentContent = conversionResponse.body.content || conversionResponse.body.text || JSON.stringify(conversionResponse.body);\n} else if (conversionResponse.data) {\n  documentContent = conversionResponse.data.content || conversionResponse.data.text || JSON.stringify(conversionResponse.data);\n} else if (conversionResponse.content) {\n  documentContent = conversionResponse.content;\n} else if (conversionResponse.text) {\n  documentContent = conversionResponse.text;\n} else {\n  // Remove success field if present and stringify the rest\n  const {success, ...cleanData} = conversionResponse;\n  documentContent = JSON.stringify(cleanData);\n}\n\n// Generate unique document ID\nconst docId = `${originalData.client}_${originalData.category}_${originalData.fileName}`\n  .replace(/[^a-zA-Z0-9]/g, '_')\n  .toLowerCase();\n\n// Create the index document with ONLY the fields that exist in the schema\nconst indexDocument = {\n  \"@search.action\": \"upload\",\n  \"id\": docId,\n  \"content\": documentContent,\n  \"client\": originalData.client,\n  \"category\": originalData.category,\n  \"fileName\": originalData.fileName,\n  \"uploadedAt\": originalData.uploadedAt || new Date().toISOString(),\n  \"blobPath\": originalData.originalPath,\n  \"mimeType\": originalData.mimeType,\n  \"convertedPath\": originalData.convertedPath,\n  \"metadata\": JSON.stringify({\n    fileSize: originalData.fileSize,\n    timestamp: originalData.timestamp\n  })\n  // contentVector will be populated by embeddings if you add that later\n};\n\n// Return the properly formatted payload for Azure Search\nreturn {\n  json: {\n    value: [indexDocument]\n  }\n};"
      },
      "id": "365d3766-f9a9-484b-90eb-4a1525ce94e5",
      "name": "Prepare Index Document",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -688,
        -1344
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get data from previous nodes - handle both possible sources\nconst originalData = $node[\"Prepare File Data\"] ? $node[\"Prepare File Data\"].json : {};\nconst item = $input.first();\nconst json = item.json;\n\n// Merge all available data\nconst allData = { ...originalData, ...json };\n\n// Create JSONL format - each line is a complete JSON object\n// This format is better for streaming and processing large documents\nconst jsonlLines = [];\n\n// Add the main document record\njsonlLines.push(JSON.stringify({\n    fileName: allData.fileName,\n    client: allData.client,\n    category: allData.category,\n    uploadedAt: allData.uploadedAt || new Date().toISOString(),\n    fileSize: allData.fileSize,\n    mimeType: allData.mimeType,\n    documentId: allData.documentId || allData.id,\n    originalPath: allData.originalPath,\n    convertedPath: allData.convertedPath,\n    type: \"document_metadata\"\n}));\n\n// Add the content as separate line(s) - can be chunked if needed\nconst content = allData.convertedContent || allData.content || \"\";\nif (content) {\n    // If content is very large, you could split it into chunks here\n    jsonlLines.push(JSON.stringify({\n        documentId: allData.documentId || allData.id,\n        content: content,\n        type: \"document_content\"\n    }));\n}\n\n// Add index data as a separate line\nif (allData.indexDocument) {\n    jsonlLines.push(JSON.stringify({\n        documentId: allData.documentId || allData.id,\n        indexData: allData.indexDocument,\n        type: \"index_payload\"\n    }));\n}\n\n// Join all lines with newline characters for JSONL format\nconst jsonlString = jsonlLines.join('\\n');\nconst jsonlBuffer = Buffer.from(jsonlString);\n\n// Create safe file name with .jsonl extension\nlet outputFileName = \"converted.jsonl\";\nif (allData.safeName) {\n    outputFileName = allData.safeName.replace(/\\.(pdf|docx|xlsx|doc|xls)$/i, '.jsonl');\n} else if (allData.fileName) {\n    outputFileName = allData.fileName.replace(/[^a-zA-Z0-9.-]/g, '_').replace(/\\.(pdf|docx|xlsx|doc|xls)$/i, '.jsonl');\n}\n\nreturn {\n    json: {\n        ...allData,\n        uploadSuccess: true,\n        indexSuccess: true,\n        convertedFileName: outputFileName,\n        jsonlLineCount: jsonlLines.length\n    },\n    binary: {\n        converted: {\n            data: jsonlBuffer,\n            mimeType: 'application/x-ndjson',  // MIME type for JSONL\n            fileName: outputFileName,\n            fileExtension: 'jsonl'\n        }\n    }\n};"
      },
      "id": "c7c0d953-c3f7-4757-97d0-9d5d7d2fbd39",
      "name": "Prepare Converted Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        -1344
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"File uploaded and indexed successfully\",\n  \"data\": {\n    \"fileName\": \"{{ $json.fileName }}\",\n    \"client\": \"{{ $json.client }}\",\n    \"category\": \"{{ $json.category }}\",\n    \"fileSize\": \"{{ $json.fileSize }}\",\n    \"originalPath\": \"{{ $json.originalPath }}\",\n    \"convertedPath\": \"{{ $json.convertedPath }}\",\n    \"documentId\": \"{{ $json.documentId }}\",\n    \"uploadedAt\": \"{{ $json.uploadedAt }}\",\n    \"indexed\": true,\n    \"jsonlLineCount\": \"{{ $json.jsonlLineCount }}\"\n  }\n}",
        "options": {}
      },
      "id": "dffa22b0-1cb8-4aca-8a16-227693c80cba",
      "name": "Upload Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        256,
        -1344
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the original data from Prepare File Data node\nconst originalData = $node[\"Prepare File Data\"].json;\n\n// Pass through all the required data\nreturn {\n  json: {\n    originalBlobUrl: originalData.originalBlobUrl,\n    fileName: originalData.fileName,\n    client: originalData.client,\n    category: originalData.category,\n    // Include all other fields\n    ...originalData\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1136,
        -1344
      ],
      "id": "7ecb3746-c1b9-49d7-8d47-c19274e73867",
      "name": "Data Pass"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $json.convertedBlobUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-version",
              "value": "2024-11-04"
            },
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "Content-Type",
              "value": "application/x-ndjson"
            },
            {
              "name": "x-ms-blob-content-type",
              "value": "application/x-ndjson"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "converted",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        -1344
      ],
      "id": "1cd3a3ff-12be-4abb-9d52-4cc5fc865edd",
      "name": "Upload Converted JSONL"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fcssearchservice.search.windows.net/indexes/fcs-construction-docs-index-v2/docs/index?api-version=2023-11-01",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "UsSBLISH5UsbNGeUkBeCa1YZJ0SJPfRJwXBrAWY7kSAzSeABQBCv"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "id": "86fbc45e-9cc1-4309-9048-28ed8711f6e0",
      "name": "Index Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -464,
        -1344
      ]
    }
  ],
  "pinData": {
    "Search Webhook": [
      {
        "json": {
          "headers": {
            "host": "workflows.saxtechnology.com",
            "x-request-id": "5678e6690764ad19fb8a17477d018196",
            "x-real-ip": "71.217.130.52",
            "x-forwarded-for": "71.217.130.52",
            "x-forwarded-host": "workflows.saxtechnology.com",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-scheme": "https",
            "x-scheme": "https",
            "content-length": "77",
            "sec-ch-ua-platform": "\"macOS\"",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "https://askforeman.saxtechnology.com",
            "sec-fetch-site": "same-site",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "priority": "u=1, i"
          },
          "params": {},
          "query": {
            "cb": "1756679112554_0.5701195594127966"
          },
          "body": {
            "search": "*",
            "top": 1000,
            "select": "*",
            "count": true,
            "orderby": "fileName desc"
          },
          "webhookUrl": "https://workflows.saxtechnology.com/webhook/ask-foreman/index/search",
          "executionMode": "production"
        }
      }
    ],
    "Upload Webhook": [
      {
        "json": {
          "headers": {
            "host": "workflows.saxtechnology.com",
            "x-request-id": "6ba2183e21d91b779f34502e08ec9fc1",
            "x-real-ip": "71.217.130.52",
            "x-forwarded-for": "71.217.130.52",
            "x-forwarded-host": "workflows.saxtechnology.com",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-scheme": "https",
            "x-scheme": "https",
            "content-length": "288142",
            "sec-ch-ua-platform": "\"macOS\"",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "https://askforeman.saxtechnology.com",
            "sec-fetch-site": "same-site",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "priority": "u=1, i"
          },
          "params": {},
          "query": {},
          "body": {
            "file": "",
            "fileName": "Win11Upgrade.pdf",
            "mimeType": "application/pdf",
            "category": "signed-contracts",
            "client": "Tom",
            "clientName": "Tom"
          },
          "webhookUrl": "https://workflows.saxtechnology.com/webhook/ask-foreman/upload",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Chat Webhook1": {
      "main": [
        [
          {
            "node": "Prepare Chat Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Chat Input": {
      "main": [
        [
          {
            "node": "Construction AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construction AI Agent": {
      "main": [
        [
          {
            "node": "Format Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Agent Response": {
      "main": [
        [
          {
            "node": "Chat Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Construction Calculator Tool": {
      "ai_tool": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Search API": {
      "ai_tool": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "List Clients Webhook": {
      "main": [
        [
          {
            "node": "List Blob Client Folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Blob Client Folders": {
      "main": [
        [
          {
            "node": "Parse Client List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Client List": {
      "main": [
        [
          {
            "node": "List Clients Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Client Webhook": {
      "main": [
        [
          {
            "node": "Prepare Client Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Client Data": {
      "main": [
        [
          {
            "node": "Create Folder Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Folder Structure": {
      "main": [
        [
          {
            "node": "Create Blob Folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Blob Folders": {
      "main": [
        [
          {
            "node": "Create Client Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Client Search": {
      "ai_tool": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Client Summary": {
      "ai_tool": [
        [
          {
            "node": "Construction AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Blob Request": {
      "main": [
        [
          {
            "node": "Process Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Delete Result": {
      "main": [
        [
          {
            "node": "Delete Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Delete Results": {
      "main": [
        [
          {
            "node": "Find Documents to Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanup Search Index1": {
      "main": [
        [
          {
            "node": "Find Documents to Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Documents to Delete": {
      "main": [
        [
          {
            "node": "Delete Found Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Client Webhook": {
      "main": [
        [
          {
            "node": "Extract Delete Client Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Client Blobs": {
      "main": [
        [
          {
            "node": "List Converted Client Blobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Converted Client Blobs": {
      "main": [
        [
          {
            "node": "Parse Blobs and Create Delete Ops",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Blobs and Create Delete Ops": {
      "main": [
        [
          {
            "node": "Delete Blob Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete From Search Index": {
      "main": [
        [
          {
            "node": "Finalize Delete Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Delete Client Info": {
      "main": [
        [
          {
            "node": "List Client Blobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Found Documents": {
      "main": [
        [
          {
            "node": "Delete From Search Index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Webhook": {
      "main": [
        [
          {
            "node": "Prepare Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Delete": {
      "main": [
        [
          {
            "node": "Delete Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Docs": {
      "main": [
        [
          {
            "node": "Format Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Delete": {
      "main": [
        [
          {
            "node": "Respond Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear Webhook": {
      "main": [
        [
          {
            "node": "Get All IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All IDs": {
      "main": [
        [
          {
            "node": "Prepare Clear",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Clear": {
      "main": [
        [
          {
            "node": "IF Has Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Has Docs": {
      "main": [
        [
          {
            "node": "Delete All",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Empty Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete All": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty Response": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Respond Clear",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stats Webhook": {
      "main": [
        [
          {
            "node": "Azure Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure Stats": {
      "main": [
        [
          {
            "node": "Respond Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Webhook": {
      "main": [
        [
          {
            "node": "Azure Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure Search": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete File Webhook": {
      "main": [
        [
          {
            "node": "Extract Delete Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Delete Parameters": {
      "main": [
        [
          {
            "node": "Find Documents to Delete1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Index Delete": {
      "main": [
        [
          {
            "node": "Should Delete from Index?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Delete from Index?": {
      "main": [
        [
          {
            "node": "Delete from Search Index",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Original File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Converted File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Metadata File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete Original File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Converted File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete Metadata File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete from Search Index": {
      "main": [
        [
          {
            "node": "Consolidate Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Original File": {
      "main": [
        [
          {
            "node": "Consolidate Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Converted File": {
      "main": [
        [
          {
            "node": "Consolidate Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Metadata File": {
      "main": [
        [
          {
            "node": "Consolidate Delete Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidate Delete Results": {
      "main": [
        [
          {
            "node": "Delete Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Documents to Delete1": {
      "main": [
        [
          {
            "node": "Prepare Index Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Webhook": {
      "main": [
        [
          {
            "node": "Prepare File Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare File Data": {
      "main": [
        [
          {
            "node": "Check File Size",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check File Size": {
      "main": [
        [
          {
            "node": "Upload Original (Small)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Upload Original (Large)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Original (Small)": {
      "main": [
        [
          {
            "node": "Data Pass",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Original (Large)": {
      "main": [
        [
          {
            "node": "Data Pass",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Document": {
      "main": [
        [
          {
            "node": "Prepare Index Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Index Document": {
      "main": [
        [
          {
            "node": "Index Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Converted Data": {
      "main": [
        [
          {
            "node": "Upload Converted JSONL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Pass": {
      "main": [
        [
          {
            "node": "Convert Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Converted JSONL": {
      "main": [
        [
          {
            "node": "Upload Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Index Document": {
      "main": [
        [
          {
            "node": "Prepare Converted Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "executionTimeout": 300,
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "ba31ea34-18f2-4585-93e7-8f1985b0db20",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "12ae795a76724bbd765ceb9eff84de28a8d3f25aa888cd7dc1ec96209e80ff69"
  },
  "id": "nC5gkystSoLrrKkN",
  "tags": [
    {
      "createdAt": "2025-08-26T05:36:55.318Z",
      "updatedAt": "2025-08-26T05:36:55.318Z",
      "id": "AZS4FKK35Rzd1Giq",
      "name": "ask-foreman-clients"
    }
  ]
}