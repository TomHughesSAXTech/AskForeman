{
  "name": "Ask Foreman Admin API Complete",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "=POST",
        "path": "ask-foreman/admin/{{$parameter[\"action\"]}}/{{$parameter[\"subaction\"]}}",
        "responseMode": "onReceived",
        "responseData": "allEntries",
        "options": {}
      },
      "id": "d0e3f8b1-c4a2-4b89-8f3a-1234567890ab",
      "name": "Admin Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 500],
      "webhookId": "ask-foreman-admin"
    },
    {
      "parameters": {
        "mode": "expression",
        "value": "={{ $json.params.action }}/{{ $json.params.subaction || '' }}",
        "rules": {
          "rules": [
            {
              "value2": "clients/list",
              "output": 0
            },
            {
              "value2": "clients/update", 
              "output": 1
            },
            {
              "value2": "clients/delete",
              "output": 2
            },
            {
              "value2": "reindex/",
              "output": 3
            },
            {
              "value2": "reindex-all/",
              "output": 4
            },
            {
              "value2": "clear-index/",
              "output": 5
            }
          ]
        },
        "fallbackOutput": 6,
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Route by Action",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [450, 500]
    },
    {
      "parameters": {
        "url": "https://saxtechfcs.blob.core.windows.net/fcs-clients",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "sp",
              "value": "racwdl"
            },
            {
              "name": "st",
              "value": "2025-08-07T21:44:55Z"
            },
            {
              "name": "se",
              "value": "2030-08-08T05:59:55Z"
            },
            {
              "name": "spr",
              "value": "https"
            },
            {
              "name": "sv",
              "value": "2024-11-04"
            },
            {
              "name": "sr",
              "value": "c"
            },
            {
              "name": "sig",
              "value": "AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo="
            },
            {
              "name": "restype",
              "value": "container"
            },
            {
              "name": "comp",
              "value": "list"
            },
            {
              "name": "prefix",
              "value": "FCS-OriginalClients/"
            },
            {
              "name": "delimiter",
              "value": "/"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "list-clients-node",
      "name": "List Clients from Azure",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 200]
    },
    {
      "parameters": {
        "jsCode": "const xmlResponse = items[0].json;\nconst clients = [];\n\nconst regex = /<Name>FCS-OriginalClients\\/([^/]+)\\/<\\/Name>/g;\nlet match;\n\nwhile ((match = regex.exec(xmlResponse)) !== null) {\n  const clientFolder = match[1];\n  clients.push({\n    id: clientFolder.toLowerCase(),\n    name: clientFolder,\n    folder: clientFolder,\n    path: `FCS-OriginalClients/${clientFolder}/`,\n    documentCount: 0,\n    lastModified: new Date().toISOString(),\n    status: 'active'\n  });\n}\n\nclients.sort((a, b) => a.name.localeCompare(b.name));\n\nreturn [{ json: { clients: clients, success: true } }];"
      },
      "id": "parse-clients-node",
      "name": "Parse Client List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 200]
    },
    {
      "parameters": {
        "jsCode": "const body = items[0].json.body || {};\nconst { clientId, updates } = body;\n\nif (!clientId) {\n  return [{ json: { success: false, error: 'Client ID is required' } }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    message: `Client ${clientId} updated successfully`,\n    clientId: clientId,\n    updates: updates,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "update-client-node",
      "name": "Update Client",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "const body = items[0].json.body || {};\nconst { clientId } = body;\n\nif (!clientId) {\n  return [{ json: { success: false, error: 'Client ID is required' } }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    message: `Client ${clientId} marked for deletion`,\n    clientId: clientId,\n    timestamp: new Date().toISOString(),\n    warning: 'Full deletion requires Azure Blob Storage batch operations'\n  }\n}];"
      },
      "id": "delete-client-node",
      "name": "Delete Client",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 400]
    },
    {
      "parameters": {
        "jsCode": "const body = items[0].json.body || {};\nconst { filePath, clientId } = body;\n\nif (!filePath) {\n  return [{ json: { success: false, error: 'File path is required' } }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    message: `Document ${filePath} queued for reindexing`,\n    filePath: filePath,\n    clientId: clientId,\n    timestamp: new Date().toISOString(),\n    status: 'queued'\n  }\n}];"
      },
      "id": "reindex-doc-node",
      "name": "Reindex Document",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 500]
    },
    {
      "parameters": {
        "jsCode": "const body = items[0].json.body || {};\nconst { clientId } = body;\n\nif (clientId) {\n  return [{\n    json: {\n      success: true,\n      message: `Reindexing all documents for client ${clientId}`,\n      clientId: clientId,\n      timestamp: new Date().toISOString(),\n      status: 'processing',\n      estimatedTime: '5-10 minutes'\n    }\n  }];\n} else {\n  return [{\n    json: {\n      success: true,\n      message: 'Full system reindex initiated',\n      timestamp: new Date().toISOString(),\n      status: 'processing',\n      estimatedTime: '30-60 minutes',\n      warning: 'This operation may impact system performance'\n    }\n  }];\n}"
      },
      "id": "reindex-all-node",
      "name": "Reindex All Documents",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 600]
    },
    {
      "parameters": {
        "jsCode": "const body = items[0].json.body || {};\nconst { confirm, clientId } = body;\n\nif (confirm !== true) {\n  return [{\n    json: {\n      success: false,\n      error: 'Confirmation required (confirm: true)',\n      warning: 'This will clear the entire search index'\n    }\n  }];\n}\n\nif (clientId) {\n  return [{\n    json: {\n      success: true,\n      message: `Search index cleared for client ${clientId}`,\n      clientId: clientId,\n      timestamp: new Date().toISOString(),\n      documentsRemoved: 0,\n      status: 'completed'\n    }\n  }];\n} else {\n  return [{\n    json: {\n      success: true,\n      message: 'Entire search index cleared',\n      timestamp: new Date().toISOString(),\n      documentsRemoved: 0,\n      status: 'completed',\n      warning: 'All documents need to be reindexed'\n    }\n  }];\n}"
      },
      "id": "clear-index-node",
      "name": "Clear Search Index",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 700]
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    success: false,\n    error: 'Invalid API endpoint',\n    message: 'The requested admin action is not recognized',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "invalid-route-node",
      "name": "Invalid Route Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 800]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "webhook-response-node",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 500]
    }
  ],
  "connections": {
    "Admin Webhook": {
      "main": [
        [
          {
            "node": "Route by Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Action": {
      "main": [
        [
          {
            "node": "List Clients from Azure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Client",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete Client",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reindex Document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reindex All Documents",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Clear Search Index",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Invalid Route Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Clients from Azure": {
      "main": [
        [
          {
            "node": "Parse Client List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Client List": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Client": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Client": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reindex Document": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reindex All Documents": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear Search Index": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Invalid Route Handler": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3.0.0",
  "meta": {
    "instanceId": "ask-foreman-admin-complete"
  },
  "id": "ask-foreman-admin-complete",
  "tags": []
}
