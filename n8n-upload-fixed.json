{
  "name": "Ask Foreman Upload - Fixed",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/process",
        "responseMode": "lastNode",
        "options": {
          "rawBody": false
        }
      },
      "id": "webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Handle FormData from the webhook\nconst items = [];\n\ntry {\n  // Get the form data fields\n  const body = $input.first().json.body || {};\n  const query = $input.first().json.query || {};\n  const files = $input.first().json.files || {};\n  const binary = $input.first().binary || {};\n  \n  console.log('Body:', body);\n  console.log('Files:', files);\n  console.log('Binary data available:', Object.keys(binary));\n  \n  // Extract the form fields\n  const client = body.client || query.client || 'unknown';\n  const category = body.category || query.category || 'documents';\n  \n  // Get file info - n8n stores uploaded files in binary\n  let fileName = 'unknown.pdf';\n  let fileData = null;\n  \n  // Check for file in different possible locations\n  if (files && files.file && files.file.length > 0) {\n    fileName = files.file[0].originalname || files.file[0].name;\n  } else if (binary && binary.data) {\n    fileName = binary.data.fileName || 'document.pdf';\n    fileData = binary.data;\n  } else if (binary && Object.keys(binary).length > 0) {\n    // Get the first binary property\n    const firstKey = Object.keys(binary)[0];\n    fileData = binary[firstKey];\n    fileName = fileData.fileName || 'document.pdf';\n  }\n  \n  // Azure Storage configuration\n  const storageAccount = 'saxtechfcs';\n  const containerName = 'fcs-clients';\n  const sasToken = 'sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D';\n  \n  // Map category to folder name\n  const categoryMap = {\n    'drawings': 'Drawings',\n    'estimates': 'Estimates', \n    'proposals': 'Proposals',\n    'specs': 'Specs',\n    'signed-contracts': 'Signed-Contracts'\n  };\n  \n  const folderName = categoryMap[category] || 'Documents';\n  \n  // Construct blob path\n  const blobPath = `FCS-OriginalClients/${client}/${folderName}/${fileName}`;\n  const uploadUrl = `https://${storageAccount}.blob.core.windows.net/${containerName}/${blobPath}?${sasToken}`;\n  \n  // Prepare output\n  const output = {\n    json: {\n      success: true,\n      message: 'File processed successfully',\n      client: client,\n      category: category,\n      fileName: fileName,\n      folderName: folderName,\n      blobPath: blobPath,\n      uploadUrl: uploadUrl,\n      timestamp: new Date().toISOString()\n    }\n  };\n  \n  // Include binary data if available\n  if (fileData) {\n    output.binary = { data: fileData };\n  } else if (binary && Object.keys(binary).length > 0) {\n    output.binary = binary;\n  }\n  \n  items.push(output);\n  \n} catch (error) {\n  console.error('Error processing upload:', error);\n  items.push({\n    json: {\n      success: false,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nreturn items;"
      },
      "id": "process_upload",
      "name": "Process Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check_success",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $json.uploadUrl }}",
        "sendBinaryData": true,
        "binaryPropertyName": "data",
        "options": {
          "headers": {
            "x-ms-blob-type": "BlockBlob",
            "x-ms-meta-client": "={{ $json.client }}",
            "x-ms-meta-category": "={{ $json.category }}",
            "x-ms-meta-uploadDate": "={{ $json.timestamp }}"
          },
          "timeout": 30000
        }
      },
      "id": "upload_to_azure",
      "name": "Upload to Azure",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 250]
    },
    {
      "parameters": {
        "values": {
          "values": [
            {
              "name": "success",
              "value": "={{ $json.success }}"
            },
            {
              "name": "message",
              "value": "={{ $json.message || 'Upload completed' }}"
            },
            {
              "name": "path",
              "value": "={{ $json.blobPath }}"
            }
          ]
        },
        "options": {}
      },
      "id": "success_response",
      "name": "Success Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1050, 250]
    },
    {
      "parameters": {
        "values": {
          "values": [
            {
              "name": "success",
              "value": false
            },
            {
              "name": "message",
              "value": "={{ $json.error || 'Upload failed' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "error_response",
      "name": "Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [850, 350]
    },
    {
      "parameters": {
        "mode": "responseNode",
        "responseCode": 200,
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "respond",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1250, 300]
    }
  ],
  "connections": {
    "webhook": {
      "main": [
        [
          {
            "node": "process_upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process_upload": {
      "main": [
        [
          {
            "node": "check_success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_success": {
      "main": [
        [
          {
            "node": "upload_to_azure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "error_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "upload_to_azure": {
      "main": [
        [
          {
            "node": "success_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "success_response": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "error_response": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": []
}
