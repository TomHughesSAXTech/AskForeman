{
  "name": "Ask Foreman Admin API - Fixed",
  "nodes": [
    {
      "parameters": {},
      "id": "webhook-admin",
      "name": "Admin Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 500],
      "webhookId": "ask-foreman-admin"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.params.action }}/{{ $json.params.subaction }}",
        "rules": {
          "rules": [
            {
              "value2": "clients/list",
              "output": 0
            },
            {
              "value2": "clients/update",
              "output": 1
            },
            {
              "value2": "clients/delete",
              "output": 2
            },
            {
              "value2": "reindex/",
              "output": 3
            },
            {
              "value2": "reindex-all/",
              "output": 4
            },
            {
              "value2": "clear-index/",
              "output": 5
            }
          ]
        },
        "fallbackOutput": 6
      },
      "id": "switch-router",
      "name": "Route by Action",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [450, 500]
    },
    {
      "parameters": {
        "url": "https://saxtechfcs.blob.core.windows.net/fcs-clients?sp=racwdl&st=2025-08-07T21:44:55Z&se=2030-08-08T05:59:55Z&spr=https&sv=2024-11-04&sr=c&sig=AeQA3cyePZQqGGmb6QPu5G4y1b0qB8Z5FIFZBdi6Cdo%3D&restype=container&comp=list&prefix=FCS-OriginalClients/&delimiter=/",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "list-clients-azure",
      "name": "List Clients from Azure",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 200]
    },
    {
      "parameters": {
        "jsCode": "// Parse Azure XML response and extract client list\nconst xmlResponse = $input.first().json;\nconst clients = [];\n\n// Parse XML to extract folder names\nconst regex = /<Name>FCS-OriginalClients\\/([^/]+)\\/<\\/Name>/g;\nlet match;\n\nwhile ((match = regex.exec(xmlResponse)) !== null) {\n  const clientFolder = match[1];\n  \n  // Create client object\n  clients.push({\n    id: clientFolder.toLowerCase(),\n    name: clientFolder,\n    folder: clientFolder,\n    path: `FCS-OriginalClients/${clientFolder}/`,\n    documentCount: 0,\n    lastModified: new Date().toISOString(),\n    status: 'active'\n  });\n}\n\n// Sort alphabetically\nclients.sort((a, b) => a.name.localeCompare(b.name));\n\nreturn [{ json: { clients: clients, success: true } }];"
      },
      "id": "parse-client-list",
      "name": "Parse Client List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 200]
    },
    {
      "parameters": {
        "jsCode": "// Get client info from request\nconst body = $input.first().json.body || {};\nconst { clientId, updates } = body;\n\nif (!clientId) {\n  return [{\n    json: {\n      success: false,\n      error: 'Client ID is required'\n    }\n  }];\n}\n\n// In a real implementation, this would update client metadata in Azure\nreturn [{\n  json: {\n    success: true,\n    message: `Client ${clientId} updated successfully`,\n    clientId: clientId,\n    updates: updates,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "update-client",
      "name": "Update Client",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Get client ID from request\nconst body = $input.first().json.body || {};\nconst { clientId } = body;\n\nif (!clientId) {\n  return [{\n    json: {\n      success: false,\n      error: 'Client ID is required'\n    }\n  }];\n}\n\n// WARNING: This would delete all client files from Azure\nreturn [{\n  json: {\n    success: true,\n    message: `Client ${clientId} marked for deletion`,\n    clientId: clientId,\n    timestamp: new Date().toISOString(),\n    warning: 'Full deletion requires Azure Blob Storage batch operations'\n  }\n}];"
      },
      "id": "delete-client",
      "name": "Delete Client",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 400]
    },
    {
      "parameters": {
        "jsCode": "// Get file path from request\nconst body = $input.first().json.body || {};\nconst { filePath, clientId } = body;\n\nif (!filePath) {\n  return [{\n    json: {\n      success: false,\n      error: 'File path is required'\n    }\n  }];\n}\n\n// This would trigger reindexing of a specific document\nreturn [{\n  json: {\n    success: true,\n    message: `Document ${filePath} queued for reindexing`,\n    filePath: filePath,\n    clientId: clientId,\n    timestamp: new Date().toISOString(),\n    status: 'queued'\n  }\n}];"
      },
      "id": "reindex-document",
      "name": "Reindex Document",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 500]
    },
    {
      "parameters": {
        "jsCode": "// Get client ID from request (optional)\nconst body = $input.first().json.body || {};\nconst { clientId } = body;\n\nif (clientId) {\n  // Reindex specific client\n  return [{\n    json: {\n      success: true,\n      message: `Reindexing all documents for client ${clientId}`,\n      clientId: clientId,\n      timestamp: new Date().toISOString(),\n      status: 'processing',\n      estimatedTime: '5-10 minutes'\n    }\n  }];\n} else {\n  // Reindex entire system\n  return [{\n    json: {\n      success: true,\n      message: 'Full system reindex initiated',\n      timestamp: new Date().toISOString(),\n      status: 'processing',\n      estimatedTime: '30-60 minutes',\n      warning: 'This operation may impact system performance'\n    }\n  }];\n}"
      },
      "id": "reindex-all",
      "name": "Reindex All Documents",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 600]
    },
    {
      "parameters": {
        "jsCode": "// Get confirmation from request\nconst body = $input.first().json.body || {};\nconst { confirm, clientId } = body;\n\nif (confirm !== true) {\n  return [{\n    json: {\n      success: false,\n      error: 'Confirmation required (confirm: true)',\n      warning: 'This will clear the entire search index'\n    }\n  }];\n}\n\nif (clientId) {\n  // Clear index for specific client\n  return [{\n    json: {\n      success: true,\n      message: `Search index cleared for client ${clientId}`,\n      clientId: clientId,\n      timestamp: new Date().toISOString(),\n      documentsRemoved: 0,\n      status: 'completed'\n    }\n  }];\n} else {\n  // Clear entire index\n  return [{\n    json: {\n      success: true,\n      message: 'Entire search index cleared',\n      timestamp: new Date().toISOString(),\n      documentsRemoved: 0,\n      status: 'completed',\n      warning: 'All documents need to be reindexed'\n    }\n  }];\n}"
      },
      "id": "clear-index",
      "name": "Clear Search Index",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 700]
    },
    {
      "parameters": {
        "jsCode": "// Invalid route handler\nreturn [{\n  json: {\n    success: false,\n    error: 'Invalid API endpoint',\n    message: 'The requested admin action is not recognized',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "invalid-route",
      "name": "Invalid Route Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 800]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "respond-success",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 500]
    }
  ],
  "connections": {
    "webhook-admin": {
      "main": [
        [
          {
            "node": "switch-router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "switch-router": {
      "main": [
        [
          {
            "node": "list-clients-azure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "update-client",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "delete-client",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "reindex-document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "reindex-all",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "clear-index",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "invalid-route",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list-clients-azure": {
      "main": [
        [
          {
            "node": "parse-client-list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse-client-list": {
      "main": [
        [
          {
            "node": "respond-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-client": {
      "main": [
        [
          {
            "node": "respond-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete-client": {
      "main": [
        [
          {
            "node": "respond-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reindex-document": {
      "main": [
        [
          {
            "node": "respond-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reindex-all": {
      "main": [
        [
          {
            "node": "respond-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "clear-index": {
      "main": [
        [
          {
            "node": "respond-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "invalid-route": {
      "main": [
        [
          {
            "node": "respond-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateId": "ask-foreman-admin-api-fixed"
  },
  "pinData": {},
  "versionId": "2.0.0",
  "triggerCount": 1
}
