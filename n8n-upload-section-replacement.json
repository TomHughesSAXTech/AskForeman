{
  "name": "Upload Section Replacement - Exact Match",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask-foreman/process",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              }
            ]
          }
        }
      },
      "id": "eef86bac-7a0e-4e65-9418-a66a30020d12",
      "name": "Webhook - Upload Document1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [32, 800],
      "webhookId": "6e8cb745-238b-4f66-a912-16ffcc7a5ce6"
    },
    {
      "parameters": {
        "jsCode": "// Extract form data\nconst item = $input.first();\nconst formData = item.json.body;\nconst clientId = formData.client;\nconst category = formData.category;\n\n// Get binary data properly\nconst binaryKeys = Object.keys(item.binary || {});\nif (binaryKeys.length === 0) {\n  throw new Error('No file uploaded');\n}\n\n// Get the first binary item (usually 'data' or 'file')\nconst binaryKey = binaryKeys[0];\nconst fileData = item.binary[binaryKey];\nconst fileName = fileData.fileName;\nconst mimeType = fileData.mimeType;\n\n// Azure Storage configuration\nconst storageAccount = 'saxtechfcs';\nconst containerName = 'fcs-clients';\nconst convertedContainer = 'fcs-convertedclients';\nconst sasToken = 'sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D';\nconst sasTokenConverted = 'sp=racwdl&st=2025-08-08T05:03:40Z&se=2030-08-08T13:18:40Z&spr=https&sv=2024-11-04&sr=c&sig=IGFgvm%2FEh6RX3Qe5ZOubR4yc6uovwicdQAufdkrQaWs%3D';\n\n// Map category to folder name (matching existing structure)\nconst categoryMap = {\n  'drawings': 'Drawings',\n  'estimates': 'Estimates',\n  'proposals': 'Proposals',\n  'specs': 'Specs',\n  'signed-contracts': 'Signed-Contracts'\n};\n\nconst folderName = categoryMap[category] || 'Documents';\n\n// Construct blob path\nconst blobPath = `FCS-OriginalClients/${clientId}/${folderName}/${fileName}`;\nconst uploadUrl = `https://${storageAccount}.blob.core.windows.net/${containerName}/${blobPath}?${sasToken}`;\n\nreturn {\n  json: {\n    clientId,\n    category,\n    folderName,\n    fileName,\n    mimeType,\n    blobPath,\n    uploadUrl,\n    convertedContainer,\n    sasTokenConverted,\n    binaryKey  // Pass the key to next node\n  },\n  binary: item.binary  // Pass through all binary data\n};"
      },
      "id": "9f3cc7ab-c3ad-4a31-a793-67e3ba73b4cb",
      "name": "Prepare Upload Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [240, 800]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $json.uploadUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "Content-Type",
              "value": "={{ $json.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "={{ $json.binaryKey }}",
        "options": {}
      },
      "id": "b15a1384-c9de-4c3d-b731-d5c8922eca21",
      "name": "Upload to Azure Storage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [432, 800]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://saxtech-functionapps2.azurewebsites.net/api/ConvertDocument",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"blobUrl\": \"https://saxtechfcs.blob.core.windows.net/fcs-clients/{{ $('Prepare Upload Data').item.json.blobPath }}?sp=racwdl&st=2025-08-08T05:00:57Z&se=2030-08-08T13:15:57Z&spr=https&sv=2024-11-04&sr=c&sig=lJKK9jDZ59pJSNkKSgwaQIrCdBaJzx4XPzgEB2%2FrnIg%3D\",\n  \"fileName\": \"{{ $('Prepare Upload Data').item.json.fileName }}\",\n  \"mimeType\": \"{{ $('Prepare Upload Data').item.json.mimeType }}\",\n  \"client\": \"{{ $('Prepare Upload Data').item.json.clientId }}\",\n  \"category\": \"{{ $('Prepare Upload Data').item.json.category }}\"\n}",
        "options": {}
      },
      "id": "eba7587c-7571-4199-91a0-bb0291117023",
      "name": "Convert Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [640, 800]
    },
    {
      "parameters": {
        "jsCode": "// Get conversion result\nconst conversionResult = $input.first().json;\nconst uploadData = $('Prepare Upload Data').first().json;\n\n// Extract converted content (handle different response formats)\nlet convertedText = '';\nif (conversionResult.convertedContent) {\n  convertedText = conversionResult.convertedContent;\n} else if (conversionResult.text) {\n  convertedText = conversionResult.text;\n} else if (conversionResult.content) {\n  convertedText = conversionResult.content;\n} else if (conversionResult.success && conversionResult.data) {\n  convertedText = conversionResult.data;\n} else {\n  // If no expected field, stringify the whole response\n  convertedText = JSON.stringify(conversionResult, null, 2);\n}\n\n// Prepare converted file paths for fcs-convertedclients container\nconst textFileName = uploadData.fileName.replace(/\\.[^.]+$/, '.txt');\nconst convertedPath = `${uploadData.clientId}/converted/${uploadData.folderName}/${textFileName}`;\nconst metadataPath = `${uploadData.clientId}/metadata/${uploadData.folderName}/${uploadData.fileName}.json`;\n\nconst storageAccount = 'saxtechfcs';\nconst containerName = uploadData.convertedContainer;\nconst sasToken = uploadData.sasTokenConverted;\n\n// URLs for uploading to fcs-convertedclients\nconst convertedUploadUrl = `https://${storageAccount}.blob.core.windows.net/${containerName}/${convertedPath}?${sasToken}`;\nconst metadataUploadUrl = `https://${storageAccount}.blob.core.windows.net/${containerName}/${metadataPath}?${sasToken}`;\n\n// Create metadata\nconst metadata = {\n  originalFile: uploadData.fileName,\n  category: uploadData.category,\n  folderName: uploadData.folderName,\n  client: uploadData.clientId,\n  processedAt: new Date().toISOString(),\n  conversionMethod: conversionResult.conversionMethod || 'Azure Document Intelligence',\n  originalPath: uploadData.blobPath,\n  convertedPath: convertedPath,\n  contentLength: convertedText.length,\n  mimeType: uploadData.mimeType\n};\n\n// Convert text to base64 for binary handling\nconst textBuffer = Buffer.from(convertedText, 'utf-8');\nconst metadataBuffer = Buffer.from(JSON.stringify(metadata, null, 2), 'utf-8');\n\nreturn [\n  {\n    json: {\n      type: 'converted',\n      convertedPath,\n      uploadUrl: convertedUploadUrl,\n      originalFile: uploadData.fileName,\n      textFileName,\n      contentLength: textBuffer.length\n    },\n    binary: {\n      data: {\n        data: textBuffer.toString('base64'),\n        mimeType: 'text/plain',\n        fileName: textFileName\n      }\n    }\n  },\n  {\n    json: {\n      type: 'metadata',\n      metadataPath,\n      uploadUrl: metadataUploadUrl,\n      originalFile: uploadData.fileName\n    },\n    binary: {\n      data: {\n        data: metadataBuffer.toString('base64'),\n        mimeType: 'application/json',\n        fileName: uploadData.fileName + '.json'\n      }\n    }\n  }\n];"
      },
      "id": "b15b395f-c241-421b-b53f-dddf75721205",
      "name": "Prepare Converted Text",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [832, 800]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $json.uploadUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-ms-blob-type",
              "value": "BlockBlob"
            },
            {
              "name": "Content-Type",
              "value": "={{ $binary.data.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "id": "997aeea8-5c18-4c8e-8614-3a2a25bae800",
      "name": "Upload Converted Text",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1040, 800]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "Document processed and indexed successfully"
            },
            {
              "name": "fileName",
              "value": "={{ $('Prepare Upload Data').item.json.fileName }}"
            },
            {
              "name": "client",
              "value": "={{ $('Prepare Upload Data').item.json.clientId }}"
            },
            {
              "name": "category",
              "value": "={{ $('Prepare Upload Data').item.json.category }}"
            }
          ],
          "number": [
            {
              "name": "processedAt",
              "value": "={{ Date.now() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2dce7f96-870d-439f-95ec-f3a4fb175cb5",
      "name": "Set Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1232, 800]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "ef396ca6-10c3-4fb4-b02c-d751f7e248f0",
      "name": "Respond to Webhook1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1440, 800]
    }
  ],
  "connections": {
    "Webhook - Upload Document1": {
      "main": [
        [
          {
            "node": "Prepare Upload Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Upload Data": {
      "main": [
        [
          {
            "node": "Upload to Azure Storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Azure Storage": {
      "main": [
        [
          {
            "node": "Convert Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Document": {
      "main": [
        [
          {
            "node": "Prepare Converted Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Converted Text": {
      "main": [
        [
          {
            "node": "Upload Converted Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Converted Text": {
      "main": [
        [
          {
            "node": "Set Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
